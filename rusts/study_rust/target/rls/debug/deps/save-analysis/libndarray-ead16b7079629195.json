{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1","program":"/Users/lmq/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","ndarray","/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=ead16b7079629195","-C","extra-filename=-ead16b7079629195","--out-dir","/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps","-L","dependency=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps","--extern","itertools=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libitertools-a2a3a6951181b4a2.rmeta","--extern","matrixmultiply=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libmatrixmultiply-c039596fbf03d48e.rmeta","--extern","num_complex=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libnum_complex-437dd432163573f8.rmeta","--extern","num_traits=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libnum_traits-642fc5073c98c2be.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/lmq/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libndarray-ead16b7079629195.rmeta"},"prelude":{"crate_id":{"name":"ndarray","disambiguator":[1127166901409978141,944008833884226197]},"crate_root":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src","external_crates":[{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4620227846479891151,8940666995720399310]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[708786888276500661,1869679905933516582]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17797614960292103009,1417850245447323047]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6720920595826051040,11215649358134471660]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8026531996434605021,7548672481986894881]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15199692117975760301,15759057669947477134]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9558885404028525824,13175594019570260472]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8548926128210154822,11030442656094913500]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[29100438193256380,5674858793037386941]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10545297577132343508,9997456501188638734]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8552514812379964095,3476972860858422467]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[15246352187068451547,7657887935521535288]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15823142255167552404,10432132424716777218]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16403568371457060611,8708125167845734102]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[16645404746874811237,17194079169581878891]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":16,"id":{"name":"matrixmultiply","disambiguator":[11501785026759052637,11579262340536335066]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":17,"id":{"name":"rawpointer","disambiguator":[4624371352784681154,17529234414289111914]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":18,"id":{"name":"itertools","disambiguator":[17646519499586679624,5604900302350197222]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":19,"id":{"name":"either","disambiguator":[10401463782313016052,9782655421637807745]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[4103276330271741824,8963583079073114527]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","num":21,"id":{"name":"num_complex","disambiguator":[1916360863346818583,5545157049576032793]}}],"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":356,"byte_end":43867,"line_start":8,"line_end":1300,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":571},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4692,"byte_end":4701,"line_start":117,"line_end":117,"column_start":5,"column_end":14},"alias_span":null,"name":"Dimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":469},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4707,"byte_end":4720,"line_start":118,"line_end":118,"column_start":5,"column_end":18},"alias_span":null,"name":"IntoDimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":879},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4726,"byte_end":4736,"line_start":119,"line_end":119,"column_start":5,"column_end":15},"alias_span":null,"name":"RemoveAxis","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2908},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4742,"byte_end":4746,"line_start":120,"line_end":120,"column_start":5,"column_end":9},"alias_span":null,"name":"Axis","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2909},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4742,"byte_end":4746,"line_start":120,"line_end":120,"column_start":5,"column_end":9},"alias_span":null,"name":"Axis","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":3387},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4752,"byte_end":4767,"line_start":121,"line_end":121,"column_start":5,"column_end":20},"alias_span":null,"name":"AxisDescription","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3388},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4752,"byte_end":4767,"line_start":121,"line_end":121,"column_start":5,"column_end":20},"alias_span":null,"name":"AxisDescription","value":"","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4796,"byte_end":4797,"line_start":123,"line_end":123,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Dim","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":826},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4819,"byte_end":4826,"line_start":125,"line_end":125,"column_start":20,"column_end":27},"alias_span":null,"name":"NdIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3260},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4847,"byte_end":4856,"line_start":126,"line_end":126,"column_start":20,"column_end":29},"alias_span":null,"name":"IxDynImpl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1130},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4876,"byte_end":4883,"line_start":127,"line_end":127,"column_start":19,"column_end":26},"alias_span":null,"name":"indices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1132},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4885,"byte_end":4895,"line_start":127,"line_end":127,"column_start":28,"column_end":38},"alias_span":null,"name":"indices_of","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4066},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4914,"byte_end":4924,"line_start":128,"line_end":128,"column_start":17,"column_end":27},"alias_span":null,"name":"ShapeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4070},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4926,"byte_end":4935,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3509},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4954,"byte_end":4959,"line_start":129,"line_end":129,"column_start":17,"column_end":22},"alias_span":null,"name":"Slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3617},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4961,"byte_end":4970,"line_start":129,"line_end":129,"column_start":24,"column_end":33},"alias_span":null,"name":"SliceInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1085},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4972,"byte_end":4984,"line_start":129,"line_end":129,"column_start":35,"column_end":47},"alias_span":null,"name":"SliceNextDim","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3528},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4986,"byte_end":4998,"line_start":129,"line_end":129,"column_start":49,"column_end":61},"alias_span":null,"name":"SliceOrIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5129,"byte_end":5136,"line_start":134,"line_end":134,"column_start":22,"column_end":29},"alias_span":null,"name":"AsArray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1833},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5162,"byte_end":5174,"line_start":135,"line_end":135,"column_start":25,"column_end":37},"alias_span":null,"name":"LinalgScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1836},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5176,"byte_end":5183,"line_start":135,"line_end":135,"column_start":39,"column_end":46},"alias_span":null,"name":"NdFloat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1939},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5204,"byte_end":5209,"line_start":136,"line_end":136,"column_start":19,"column_end":24},"alias_span":null,"name":"stack","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5237,"byte_end":5249,"line_start":138,"line_end":138,"column_start":26,"column_end":38},"alias_span":null,"name":"ShapeBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2843},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5272,"byte_end":5283,"line_start":139,"line_end":139,"column_start":21,"column_end":32},"alias_span":null,"name":"IndexLonger","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4796,"byte_end":4797,"line_start":123,"line_end":123,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"ArrayViewMut6, ArrayViewMut3, ArrayViewMut0, ArrayView5, ArrayView2, Ix0, ArrayD, Array4, Array1, ArrayViewMut5, ArrayViewMut2, ArrayViewD, ArrayView4, ArrayView1, Array6, Array3, Array0, ArrayViewMutD, ArrayViewMut4, IxDyn, Ix6, Ix5, Ix4, Ix3, Ix2, Ix1, ArrayViewMut1, Array5, ArrayView0, Array2, ArrayView3, ArrayView6","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":343},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5557,"byte_end":5561,"line_start":155,"line_end":155,"column_start":5,"column_end":9},"alias_span":null,"name":"Data","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5567,"byte_end":5574,"line_start":156,"line_end":156,"column_start":5,"column_end":12},"alias_span":null,"name":"DataMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5580,"byte_end":5589,"line_start":157,"line_end":157,"column_start":5,"column_end":14},"alias_span":null,"name":"DataOwned","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5595,"byte_end":5605,"line_start":158,"line_end":158,"column_start":5,"column_end":15},"alias_span":null,"name":"DataShared","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5611,"byte_end":5620,"line_start":159,"line_end":159,"column_start":5,"column_end":14},"alias_span":null,"name":"DataClone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":826},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/mod.rs","byte_start":73849,"byte_end":73856,"line_start":16,"line_end":16,"column_start":24,"column_end":31},"alias_span":null,"name":"NdIndex","value":"","parent":{"krate":0,"index":426}},{"kind":"Use","ref_id":{"krate":0,"index":3260},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/mod.rs","byte_start":73979,"byte_end":73988,"line_start":19,"line_end":19,"column_start":29,"column_end":38},"alias_span":null,"name":"IxDynImpl","value":"","parent":{"krate":0,"index":426}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4796,"byte_end":4797,"line_start":123,"line_end":123,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"arr2, arr0, aview_mut1, aview0, arr1, FixedInitializer, aview1, aview2","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1334},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5708,"byte_end":5712,"line_start":166,"line_end":166,"column_start":20,"column_end":24},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3376},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235441,"byte_end":235445,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"alias_span":null,"name":"Axes","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":3676},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235473,"byte_end":235480,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"alias_span":null,"name":"Indices","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":3669},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235486,"byte_end":235497,"line_start":16,"line_end":16,"column_start":5,"column_end":16},"alias_span":null,"name":"IndicesIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1461},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235527,"byte_end":235531,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235537,"byte_end":235544,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":3870},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235550,"byte_end":235561,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"alias_span":null,"name":"IndexedIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":3871},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235550,"byte_end":235561,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"alias_span":null,"name":"IndexedIter","value":"","parent":{"krate":0,"index":1343}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235567,"byte_end":235581,"line_start":22,"line_end":22,"column_start":5,"column_end":19},"alias_span":null,"name":"IndexedIterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1489},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235567,"byte_end":235581,"line_start":22,"line_end":22,"column_start":5,"column_end":19},"alias_span":null,"name":"IndexedIterMut","value":"","parent":{"krate":0,"index":1344}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235587,"byte_end":235592,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"alias_span":null,"name":"Lanes","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1314},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235598,"byte_end":235606,"line_start":24,"line_end":24,"column_start":5,"column_end":13},"alias_span":null,"name":"LanesMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1598},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235612,"byte_end":235621,"line_start":25,"line_end":25,"column_start":5,"column_end":14},"alias_span":null,"name":"LanesIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1619},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235627,"byte_end":235639,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"alias_span":null,"name":"LanesIterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":3903},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235645,"byte_end":235653,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"alias_span":null,"name":"AxisIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1684},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235659,"byte_end":235670,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"AxisIterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1748},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235676,"byte_end":235690,"line_start":29,"line_end":29,"column_start":5,"column_end":19},"alias_span":null,"name":"AxisChunksIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235696,"byte_end":235713,"line_start":30,"line_end":30,"column_start":5,"column_end":22},"alias_span":null,"name":"AxisChunksIterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1199},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235719,"byte_end":235730,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"alias_span":null,"name":"ExactChunks","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1219},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235736,"byte_end":235751,"line_start":32,"line_end":32,"column_start":5,"column_end":20},"alias_span":null,"name":"ExactChunksIter","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1226},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235757,"byte_end":235771,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"alias_span":null,"name":"ExactChunksMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1246},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235777,"byte_end":235795,"line_start":34,"line_end":34,"column_start":5,"column_end":23},"alias_span":null,"name":"ExactChunksIterMut","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235801,"byte_end":235808,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":1334}},{"kind":"Use","ref_id":{"krate":0,"index":4098},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5903,"byte_end":5906,"line_start":182,"line_end":182,"column_start":5,"column_end":8},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1992},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5912,"byte_end":5922,"line_start":183,"line_end":183,"column_start":5,"column_end":15},"alias_span":null,"name":"NdProducer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1981},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5928,"byte_end":5942,"line_start":184,"line_end":184,"column_start":5,"column_end":19},"alias_span":null,"name":"IntoNdProducer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4360},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5948,"byte_end":5957,"line_start":185,"line_end":185,"column_start":5,"column_end":14},"alias_span":null,"name":"FoldWhile","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3663},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":5979,"byte_end":5985,"line_start":188,"line_end":188,"column_start":17,"column_end":23},"alias_span":null,"name":"Layout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2231},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283979,"byte_end":283988,"line_start":23,"line_end":23,"column_start":5,"column_end":14},"alias_span":null,"name":"ArrayBase","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283994,"byte_end":283999,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2238},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284005,"byte_end":284012,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"alias_span":null,"name":"RcArray","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2247},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284018,"byte_end":284027,"line_start":26,"line_end":26,"column_start":5,"column_end":14},"alias_span":null,"name":"ArrayView","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284033,"byte_end":284045,"line_start":27,"line_end":27,"column_start":5,"column_end":17},"alias_span":null,"name":"ArrayViewMut","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2908},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284083,"byte_end":284087,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"alias_span":null,"name":"Axis","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":2909},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284083,"byte_end":284087,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"alias_span":null,"name":"Axis","value":"","parent":{"krate":0,"index":2177}},{"kind":"Use","ref_id":{"krate":0,"index":3103},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284093,"byte_end":284096,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"alias_span":null,"name":"Dim","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284093,"byte_end":284096,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"alias_span":null,"name":"Dim","value":"","parent":{"krate":0,"index":2178}},{"kind":"Use","ref_id":{"krate":0,"index":571},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284102,"byte_end":284111,"line_start":34,"line_end":34,"column_start":5,"column_end":14},"alias_span":null,"name":"Dimension","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284144,"byte_end":284150,"line_start":38,"line_end":38,"column_start":10,"column_end":16},"alias_span":null,"name":"Array0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284152,"byte_end":284158,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"alias_span":null,"name":"Array1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284160,"byte_end":284166,"line_start":38,"line_end":38,"column_start":26,"column_end":32},"alias_span":null,"name":"Array2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284168,"byte_end":284174,"line_start":38,"line_end":38,"column_start":34,"column_end":40},"alias_span":null,"name":"Array3","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284176,"byte_end":284182,"line_start":38,"line_end":38,"column_start":42,"column_end":48},"alias_span":null,"name":"Array4","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284184,"byte_end":284190,"line_start":38,"line_end":38,"column_start":50,"column_end":56},"alias_span":null,"name":"Array5","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284192,"byte_end":284198,"line_start":38,"line_end":38,"column_start":58,"column_end":64},"alias_span":null,"name":"Array6","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284200,"byte_end":284206,"line_start":38,"line_end":38,"column_start":66,"column_end":72},"alias_span":null,"name":"ArrayD","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284237,"byte_end":284247,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"alias_span":null,"name":"ArrayView0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284249,"byte_end":284259,"line_start":41,"line_end":41,"column_start":22,"column_end":32},"alias_span":null,"name":"ArrayView1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284261,"byte_end":284271,"line_start":41,"line_end":41,"column_start":34,"column_end":44},"alias_span":null,"name":"ArrayView2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284273,"byte_end":284283,"line_start":41,"line_end":41,"column_start":46,"column_end":56},"alias_span":null,"name":"ArrayView3","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284285,"byte_end":284295,"line_start":41,"line_end":41,"column_start":58,"column_end":68},"alias_span":null,"name":"ArrayView4","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":119},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284297,"byte_end":284307,"line_start":41,"line_end":41,"column_start":70,"column_end":80},"alias_span":null,"name":"ArrayView5","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":122},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284309,"byte_end":284319,"line_start":42,"line_end":42,"column_start":1,"column_end":11},"alias_span":null,"name":"ArrayView6","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":125},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284321,"byte_end":284331,"line_start":42,"line_end":42,"column_start":13,"column_end":23},"alias_span":null,"name":"ArrayViewD","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284362,"byte_end":284375,"line_start":45,"line_end":45,"column_start":10,"column_end":23},"alias_span":null,"name":"ArrayViewMut0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284377,"byte_end":284390,"line_start":45,"line_end":45,"column_start":25,"column_end":38},"alias_span":null,"name":"ArrayViewMut1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284392,"byte_end":284405,"line_start":45,"line_end":45,"column_start":40,"column_end":53},"alias_span":null,"name":"ArrayViewMut2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284407,"byte_end":284420,"line_start":45,"line_end":45,"column_start":55,"column_end":68},"alias_span":null,"name":"ArrayViewMut3","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284422,"byte_end":284435,"line_start":46,"line_end":46,"column_start":1,"column_end":14},"alias_span":null,"name":"ArrayViewMut4","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284437,"byte_end":284450,"line_start":46,"line_end":46,"column_start":16,"column_end":29},"alias_span":null,"name":"ArrayViewMut5","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284452,"byte_end":284465,"line_start":46,"line_end":46,"column_start":31,"column_end":44},"alias_span":null,"name":"ArrayViewMut6","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284467,"byte_end":284480,"line_start":46,"line_end":46,"column_start":46,"column_end":59},"alias_span":null,"name":"ArrayViewMutD","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284511,"byte_end":284514,"line_start":49,"line_end":49,"column_start":10,"column_end":13},"alias_span":null,"name":"Ix0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":65},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284511,"byte_end":284514,"line_start":49,"line_end":49,"column_start":10,"column_end":13},"alias_span":null,"name":"Ix0","value":"","parent":{"krate":0,"index":2208}},{"kind":"Use","ref_id":{"krate":0,"index":75},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284516,"byte_end":284519,"line_start":49,"line_end":49,"column_start":15,"column_end":18},"alias_span":null,"name":"Ix1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284516,"byte_end":284519,"line_start":49,"line_end":49,"column_start":15,"column_end":18},"alias_span":null,"name":"Ix1","value":"","parent":{"krate":0,"index":2209}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284521,"byte_end":284524,"line_start":49,"line_end":49,"column_start":20,"column_end":23},"alias_span":null,"name":"Ix2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284521,"byte_end":284524,"line_start":49,"line_end":49,"column_start":20,"column_end":23},"alias_span":null,"name":"Ix2","value":"","parent":{"krate":0,"index":2210}},{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284526,"byte_end":284529,"line_start":49,"line_end":49,"column_start":25,"column_end":28},"alias_span":null,"name":"Ix3","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284526,"byte_end":284529,"line_start":49,"line_end":49,"column_start":25,"column_end":28},"alias_span":null,"name":"Ix3","value":"","parent":{"krate":0,"index":2211}},{"kind":"Use","ref_id":{"krate":0,"index":81},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284531,"byte_end":284534,"line_start":49,"line_end":49,"column_start":30,"column_end":33},"alias_span":null,"name":"Ix4","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284531,"byte_end":284534,"line_start":49,"line_end":49,"column_start":30,"column_end":33},"alias_span":null,"name":"Ix4","value":"","parent":{"krate":0,"index":2212}},{"kind":"Use","ref_id":{"krate":0,"index":83},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284536,"byte_end":284539,"line_start":49,"line_end":49,"column_start":35,"column_end":38},"alias_span":null,"name":"Ix5","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284536,"byte_end":284539,"line_start":49,"line_end":49,"column_start":35,"column_end":38},"alias_span":null,"name":"Ix5","value":"","parent":{"krate":0,"index":2213}},{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284541,"byte_end":284544,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"alias_span":null,"name":"Ix6","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284541,"byte_end":284544,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"alias_span":null,"name":"Ix6","value":"","parent":{"krate":0,"index":2214}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284546,"byte_end":284551,"line_start":49,"line_end":49,"column_start":45,"column_end":50},"alias_span":null,"name":"IxDyn","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284546,"byte_end":284551,"line_start":49,"line_end":49,"column_start":45,"column_end":50},"alias_span":null,"name":"IxDyn","value":"","parent":{"krate":0,"index":2215}},{"kind":"Use","ref_id":{"krate":0,"index":967},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284587,"byte_end":284591,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"alias_span":null,"name":"arr0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":969},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284593,"byte_end":284597,"line_start":53,"line_end":53,"column_start":11,"column_end":15},"alias_span":null,"name":"arr1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284599,"byte_end":284603,"line_start":53,"line_end":53,"column_start":17,"column_end":21},"alias_span":null,"name":"arr2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":973},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284609,"byte_end":284615,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"alias_span":null,"name":"aview0","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":975},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284617,"byte_end":284623,"line_start":54,"line_end":54,"column_start":13,"column_end":19},"alias_span":null,"name":"aview1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":977},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284625,"byte_end":284631,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"alias_span":null,"name":"aview2","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":980},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284637,"byte_end":284647,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"alias_span":null,"name":"aview_mut1","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284685,"byte_end":284697,"line_start":60,"line_end":60,"column_start":5,"column_end":17},"alias_span":null,"name":"ShapeBuilder","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":1836},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284735,"byte_end":284742,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"alias_span":null,"name":"NdFloat","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":284748,"byte_end":284755,"line_start":66,"line_end":66,"column_start":5,"column_end":12},"alias_span":null,"name":"AsArray","value":"","parent":{"krate":0,"index":2169}},{"kind":"Use","ref_id":{"krate":0,"index":4386},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39731,"byte_end":39743,"line_start":1138,"line_end":1138,"column_start":15,"column_end":27},"alias_span":null,"name":"OwnedRcRepr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4387},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39731,"byte_end":39743,"line_start":1138,"line_end":1138,"column_start":15,"column_end":27},"alias_span":null,"name":"OwnedRcRepr","value":"","parent":{"krate":0,"index":2255}},{"kind":"Use","ref_id":{"krate":0,"index":2681},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","byte_start":382978,"byte_end":382981,"line_start":12,"line_end":12,"column_start":28,"column_end":31},"alias_span":null,"name":"Dot","value":"","parent":{"krate":0,"index":2661}},{"kind":"Use","ref_id":{"krate":0,"index":2728},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","byte_start":383010,"byte_end":383025,"line_start":13,"line_end":13,"column_start":28,"column_end":43},"alias_span":null,"name":"general_mat_mul","value":"","parent":{"krate":0,"index":2661}},{"kind":"Use","ref_id":{"krate":0,"index":2733},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","byte_start":383054,"byte_end":383073,"line_start":14,"line_end":14,"column_start":28,"column_end":47},"alias_span":null,"name":"general_mat_vec_mul","value":"","parent":{"krate":0,"index":2661}},{"kind":"Use","ref_id":{"krate":0,"index":2748},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43425,"byte_end":43438,"line_start":1280,"line_end":1280,"column_start":19,"column_end":32},"alias_span":null,"name":"ScalarOperand","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":356,"byte_end":43867,"line_start":8,"line_end":1300,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":6411},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":6421},{"krate":0,"index":14},{"krate":0,"index":6423},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":51},{"krate":0,"index":56},{"krate":0,"index":156},{"krate":0,"index":282},{"krate":0,"index":331},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":959},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1092},{"krate":0,"index":1118},{"krate":0,"index":1177},{"krate":0,"index":1815},{"krate":0,"index":1839},{"krate":0,"index":1861},{"krate":0,"index":1872},{"krate":0,"index":1894},{"krate":0,"index":1933},{"krate":0,"index":1946},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2169},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2238},{"krate":0,"index":2241},{"krate":0,"index":2244},{"krate":0,"index":2247},{"krate":0,"index":2251},{"krate":0,"index":4376},{"krate":0,"index":4383},{"krate":0,"index":4380},{"krate":0,"index":2255},{"krate":0,"index":7137},{"krate":0,"index":4386},{"krate":0,"index":4390},{"krate":0,"index":2256},{"krate":0,"index":4393},{"krate":0,"index":4399},{"krate":0,"index":4396},{"krate":0,"index":2259},{"krate":0,"index":2262},{"krate":0,"index":2273},{"krate":0,"index":2329},{"krate":0,"index":2572},{"krate":0,"index":2581},{"krate":0,"index":2599},{"krate":0,"index":2606},{"krate":0,"index":2618},{"krate":0,"index":2625},{"krate":0,"index":2661},{"krate":0,"index":2746},{"krate":0,"index":2807},{"krate":0,"index":2808},{"krate":0,"index":6386},{"krate":0,"index":6396},{"krate":0,"index":6393},{"krate":0,"index":6390},{"krate":0,"index":6398},{"krate":0,"index":6409},{"krate":0,"index":6406},{"krate":0,"index":6403}],"decl_id":null,"docs":" The `ndarray` crate provides an *n*-dimensional container for general elements\n and for numerics.","sig":null,"attributes":[{"value":"crate_name = \"ndarray\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":356,"byte_end":380,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ The `ndarray` crate provides an *n*-dimensional container for general elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":439,"byte_end":521,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ and for numerics.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":522,"byte_end":543,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":544,"byte_end":547,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ In *n*-dimensional we include for example 1-dimensional rows or columns,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":548,"byte_end":624,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ 2-dimensional matrices, and higher dimensional arrays. If the array has *n*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":625,"byte_end":704,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ dimensions, then an element in the array is accessed by using that many indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":705,"byte_end":789,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ Each dimension is also called an *axis*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":790,"byte_end":834,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":835,"byte_end":838,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ - **[`ArrayBase`](struct.ArrayBase.html)**:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":839,"byte_end":886,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/   The *n*-dimensional array type itself.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":887,"byte_end":935,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/   It is used to implement both the owned arrays and the views; see its docs","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":936,"byte_end":1015,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/   for an overview of all array features.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1016,"byte_end":1064,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ - The main specific array type is **[`Array`](type.Array.html)**, which owns","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1065,"byte_end":1145,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ its elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1146,"byte_end":1163,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1164,"byte_end":1167,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## Highlights","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1168,"byte_end":1185,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1186,"byte_end":1189,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Generic *n*-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1190,"byte_end":1225,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/ - Slicing, also with arbitrary step size, and negative indices to mean","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1226,"byte_end":1300,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/   elements from the end of the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1301,"byte_end":1341,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ - Views and subviews of arrays; iterators that yield subviews.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1342,"byte_end":1408,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"/ - Higher order operations and arithmetic are performant","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1409,"byte_end":1468,"line_start":32,"line_end":32,"column_start":1,"column_end":60}},{"value":"/ - Array views can be used to slice and mutate any `[T]` data using","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1469,"byte_end":1539,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/   `ArrayView::from` and `ArrayViewMut::from`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1540,"byte_end":1589,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ - `Zip` for lock step function application across two or more arrays or other","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1590,"byte_end":1671,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/   item producers (`NdProducer` trait).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1672,"byte_end":1714,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## Crate Status","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1719,"byte_end":1738,"line_start":38,"line_end":38,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1739,"byte_end":1742,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - Still iterating on and evolving the crate","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1743,"byte_end":1790,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/   + The crate is continuously developing, and breaking changes are expected","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1791,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/     during evolution from version to version. We adopt the newest stable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1871,"byte_end":1947,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/     rust features if we need them.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1948,"byte_end":1986,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/   + Note that functions/methods/traits/etc. hidden from the docs are not","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":1987,"byte_end":2063,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/     considered part of the public API, so changes to them are not","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2064,"byte_end":2133,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/     considered breaking changes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2134,"byte_end":2170,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/ - Performance:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2171,"byte_end":2189,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/   + Prefer higher order methods and arithmetic operations on arrays first,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2190,"byte_end":2268,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/     then iteration, and as a last priority using indexed algorithms.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2269,"byte_end":2341,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/   + The higher order functions like ``.map()``, ``.map_inplace()``,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2342,"byte_end":2413,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/     ``.zip_mut_with()``, ``Zip`` and ``azip!()`` are the most efficient ways","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2414,"byte_end":2494,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/     to perform single traversal and lock step traversal respectively.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2495,"byte_end":2568,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/   + Performance of an operation depends on the memory layout of the array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2569,"byte_end":2646,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/     or array view. Especially if it's a binary operation, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2647,"byte_end":2714,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/     needs matching memory layout to be efficient (with some exceptions).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2715,"byte_end":2791,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/   + Efficient floating point matrix multiplication even for very large","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2792,"byte_end":2866,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/     matrices; can optionally use BLAS to improve it further.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2867,"byte_end":2931,"line_start":57,"line_end":57,"column_start":1,"column_end":65}},{"value":"/   + See also the [`ndarray-parallel`] crate for integration with rayon.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":2932,"byte_end":3007,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ - **Requires Rust 1.27**","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3008,"byte_end":3036,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3037,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [`ndarray-parallel`]: https://docs.rs/ndarray-parallel","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3041,"byte_end":3099,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3100,"byte_end":3103,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Crate Feature Flags","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3104,"byte_end":3130,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3131,"byte_end":3134,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ The following crate feature flags are available. They are configured in your","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3135,"byte_end":3215,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/ `Cargo.toml`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3216,"byte_end":3233,"line_start":66,"line_end":66,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3234,"byte_end":3237,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ - `rustc-serialize`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3238,"byte_end":3261,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/   - Optional, compatible with Rust stable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3262,"byte_end":3307,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/   - Enables serialization support for rustc-serialize 0.3","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3308,"byte_end":3369,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/ - `serde-1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3370,"byte_end":3385,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/   - Optional, compatible with Rust stable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3386,"byte_end":3431,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   - Enables serialization support for serde 1.0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3432,"byte_end":3483,"line_start":73,"line_end":73,"column_start":1,"column_end":52}},{"value":"/ - `blas`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3484,"byte_end":3496,"line_start":74,"line_end":74,"column_start":1,"column_end":13}},{"value":"/   - Optional and experimental, compatible with Rust stable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3497,"byte_end":3559,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/   - Enable transparent BLAS support for matrix multiplication.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3560,"byte_end":3626,"line_start":76,"line_end":76,"column_start":1,"column_end":67}},{"value":"/     Uses ``blas-src`` for pluggable backend, which needs to be configured","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3627,"byte_end":3704,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/     separately.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3705,"byte_end":3724,"line_start":78,"line_end":78,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3725,"byte_end":3728,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Documentation","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3729,"byte_end":3749,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3750,"byte_end":3753,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * The docs for [`ArrayBase`](struct.ArrayBase.html) provide an overview of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3754,"byte_end":3832,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/   the *n*-dimensional array type. Other good pages to look at are the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3833,"byte_end":3906,"line_start":83,"line_end":83,"column_start":1,"column_end":74}},{"value":"/   documentation for the [`s![]`](macro.s.html) and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3907,"byte_end":3961,"line_start":84,"line_end":84,"column_start":1,"column_end":55}},{"value":"/   [`azip!()`](macro.azip.html) macros.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":3962,"byte_end":4004,"line_start":85,"line_end":85,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4005,"byte_end":4008,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ * If you have experience with NumPy, you may also be interested in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4009,"byte_end":4079,"line_start":87,"line_end":87,"column_start":1,"column_end":71}},{"value":"/   [`ndarray_for_numpy_users`](doc/ndarray_for_numpy_users/index.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":4080,"byte_end":4154,"line_start":88,"line_end":88,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":52},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/private.rs","byte_start":46254,"byte_end":46267,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/private.rs","byte_start":46122,"byte_end":46187,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/private.rs","byte_start":46188,"byte_end":46242,"line_start":8,"line_end":8,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":46935,"byte_end":46938,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"Ix0","qualname":"::aliases::Ix0","value":"pub fn Ix0() -> Ix0","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a zero-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":46849,"byte_end":46884,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":46885,"byte_end":46909,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":46910,"byte_end":46927,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47050,"byte_end":47053,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"Ix1","qualname":"::aliases::Ix1","value":"pub fn Ix1(Ix) -> Ix1","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a one-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":46965,"byte_end":46999,"line_start":18,"line_end":18,"column_start":1,"column_end":35}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47000,"byte_end":47024,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47025,"byte_end":47042,"line_start":20,"line_end":20,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47173,"byte_end":47176,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"Ix2","qualname":"::aliases::Ix2","value":"pub fn Ix2(Ix, Ix) -> Ix2","parent":null,"children":[],"decl_id":null,"docs":" Create a two-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a two-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47088,"byte_end":47122,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47123,"byte_end":47147,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47148,"byte_end":47165,"line_start":24,"line_end":24,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47310,"byte_end":47313,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"Ix3","qualname":"::aliases::Ix3","value":"pub fn Ix3(Ix, Ix, Ix) -> Ix3","parent":null,"children":[],"decl_id":null,"docs":" Create a three-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a three-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47223,"byte_end":47259,"line_start":26,"line_end":26,"column_start":1,"column_end":37}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47260,"byte_end":47284,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47285,"byte_end":47302,"line_start":28,"line_end":28,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47458,"byte_end":47461,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"Ix4","qualname":"::aliases::Ix4","value":"pub fn Ix4(Ix, Ix, Ix, Ix) -> Ix4","parent":null,"children":[],"decl_id":null,"docs":" Create a four-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a four-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47372,"byte_end":47407,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47408,"byte_end":47432,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47433,"byte_end":47450,"line_start":32,"line_end":32,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47618,"byte_end":47621,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"Ix5","qualname":"::aliases::Ix5","value":"pub fn Ix5(Ix, Ix, Ix, Ix, Ix) -> Ix5","parent":null,"children":[],"decl_id":null,"docs":" Create a five-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a five-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47532,"byte_end":47567,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47568,"byte_end":47592,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47593,"byte_end":47610,"line_start":36,"line_end":36,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47793,"byte_end":47796,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"Ix6","qualname":"::aliases::Ix6","value":"pub fn Ix6(Ix, Ix, Ix, Ix, Ix, Ix) -> Ix6","parent":null,"children":[],"decl_id":null,"docs":" Create a six-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a six-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47708,"byte_end":47742,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47743,"byte_end":47767,"line_start":41,"line_end":41,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47768,"byte_end":47785,"line_start":42,"line_end":42,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47985,"byte_end":47990,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"IxDyn","qualname":"::aliases::IxDyn","value":"pub fn IxDyn(&[Ix]) -> IxDyn","parent":null,"children":[],"decl_id":null,"docs":" Create a dynamic-dimensional index\n","sig":null,"attributes":[{"value":"/ Create a dynamic-dimensional index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47896,"byte_end":47934,"line_start":47,"line_end":47,"column_start":1,"column_end":39}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47935,"byte_end":47959,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":47960,"byte_end":47977,"line_start":49,"line_end":49,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48059,"byte_end":48062,"line_start":55,"line_end":55,"column_start":10,"column_end":13},"name":"Ix0","qualname":"::aliases::Ix0","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" zero-dimensionial\n","sig":null,"attributes":[{"value":"/ zero-dimensionial","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48028,"byte_end":48049,"line_start":54,"line_end":54,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48108,"byte_end":48111,"line_start":57,"line_end":57,"column_start":10,"column_end":13},"name":"Ix1","qualname":"::aliases::Ix1","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" one-dimensional\n","sig":null,"attributes":[{"value":"/ one-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48079,"byte_end":48098,"line_start":56,"line_end":56,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48157,"byte_end":48160,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Ix2","qualname":"::aliases::Ix2","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" two-dimensional\n","sig":null,"attributes":[{"value":"/ two-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48128,"byte_end":48147,"line_start":58,"line_end":58,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":79},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48208,"byte_end":48211,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"name":"Ix3","qualname":"::aliases::Ix3","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" three-dimensional\n","sig":null,"attributes":[{"value":"/ three-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48177,"byte_end":48198,"line_start":60,"line_end":60,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":81},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48258,"byte_end":48261,"line_start":63,"line_end":63,"column_start":10,"column_end":13},"name":"Ix4","qualname":"::aliases::Ix4","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" four-dimensional\n","sig":null,"attributes":[{"value":"/ four-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48228,"byte_end":48248,"line_start":62,"line_end":62,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":83},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48308,"byte_end":48311,"line_start":65,"line_end":65,"column_start":10,"column_end":13},"name":"Ix5","qualname":"::aliases::Ix5","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" five-dimensional\n","sig":null,"attributes":[{"value":"/ five-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48278,"byte_end":48298,"line_start":64,"line_end":64,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":85},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48357,"byte_end":48360,"line_start":67,"line_end":67,"column_start":10,"column_end":13},"name":"Ix6","qualname":"::aliases::Ix6","value":"Dim<[Ix; ]>","parent":null,"children":[],"decl_id":null,"docs":" six-dimensional\n","sig":null,"attributes":[{"value":"/ six-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48328,"byte_end":48347,"line_start":66,"line_end":66,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":87},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49429,"byte_end":49434,"line_start":96,"line_end":96,"column_start":10,"column_end":15},"name":"IxDyn","qualname":"::aliases::IxDyn","value":"Dim<IxDynImpl>","parent":null,"children":[],"decl_id":null,"docs":" dynamic-dimensional","sig":null,"attributes":[{"value":"/ dynamic-dimensional","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48377,"byte_end":48400,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48401,"byte_end":48404,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ You can use the `IxDyn` function to create a dimension for an array with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48405,"byte_end":48481,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ dynamic number of dimensions.  (`Vec<usize>` and `&[usize]` also implement","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48482,"byte_end":48560,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ `IntoDimension` to produce `IxDyn`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48561,"byte_end":48601,"line_start":72,"line_end":72,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48602,"byte_end":48605,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48606,"byte_end":48613,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use ndarray::ArrayD;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48614,"byte_end":48638,"line_start":75,"line_end":75,"column_start":1,"column_end":25}},{"value":"/ use ndarray::IxDyn;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48639,"byte_end":48662,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48663,"byte_end":48666,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Create a 5 × 6 × 3 × 4 array using the dynamic dimension type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48667,"byte_end":48738,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"/ let mut a = ArrayD::<f64>::zeros(IxDyn(&[5, 6, 3, 4]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48739,"byte_end":48798,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/ // Create a 1 × 3 × 4 array using the dynamic dimension type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48799,"byte_end":48865,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"/ let mut b = ArrayD::<f64>::zeros(IxDyn(&[1, 3, 4]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48866,"byte_end":48922,"line_start":81,"line_end":81,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48923,"byte_end":48926,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // We can use broadcasting to add arrays of compatible shapes together:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":48927,"byte_end":49002,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ a += &b;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49003,"byte_end":49015,"line_start":84,"line_end":84,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49016,"byte_end":49019,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // We can index into a, b using fixed size arrays:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49020,"byte_end":49074,"line_start":86,"line_end":86,"column_start":1,"column_end":55}},{"value":"/ a[[0, 0, 0, 0]] = 0.;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49075,"byte_end":49100,"line_start":87,"line_end":87,"column_start":1,"column_end":26}},{"value":"/ b[[0, 2, 3]] = a[[0, 0, 2, 3]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49101,"byte_end":49136,"line_start":88,"line_end":88,"column_start":1,"column_end":36}},{"value":"/ // Note: indexing will panic at runtime if the number of indices given does","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49137,"byte_end":49216,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ // not match the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49217,"byte_end":49244,"line_start":90,"line_end":90,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49245,"byte_end":49248,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // We can keep them in the same vector because both the arrays have","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49249,"byte_end":49320,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/ // the same type `Array<f64, IxDyn>` a.k.a `ArrayD<f64>`:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49321,"byte_end":49382,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/ let arrays = vec![a, b];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49383,"byte_end":49411,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49412,"byte_end":49419,"line_start":95,"line_end":95,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":88},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49490,"byte_end":49496,"line_start":99,"line_end":99,"column_start":10,"column_end":16},"name":"Array0","qualname":"::aliases::Array0","value":"Array<A, Ix0>","parent":null,"children":[],"decl_id":null,"docs":" zero-dimensional array\n","sig":null,"attributes":[{"value":"/ zero-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49454,"byte_end":49480,"line_start":98,"line_end":98,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":90},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49552,"byte_end":49558,"line_start":101,"line_end":101,"column_start":10,"column_end":16},"name":"Array1","qualname":"::aliases::Array1","value":"Array<A, Ix1>","parent":null,"children":[],"decl_id":null,"docs":" one-dimensional array\n","sig":null,"attributes":[{"value":"/ one-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49517,"byte_end":49542,"line_start":100,"line_end":100,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49614,"byte_end":49620,"line_start":103,"line_end":103,"column_start":10,"column_end":16},"name":"Array2","qualname":"::aliases::Array2","value":"Array<A, Ix2>","parent":null,"children":[],"decl_id":null,"docs":" two-dimensional array\n","sig":null,"attributes":[{"value":"/ two-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49579,"byte_end":49604,"line_start":102,"line_end":102,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49678,"byte_end":49684,"line_start":105,"line_end":105,"column_start":10,"column_end":16},"name":"Array3","qualname":"::aliases::Array3","value":"Array<A, Ix3>","parent":null,"children":[],"decl_id":null,"docs":" three-dimensional array\n","sig":null,"attributes":[{"value":"/ three-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49641,"byte_end":49668,"line_start":104,"line_end":104,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49741,"byte_end":49747,"line_start":107,"line_end":107,"column_start":10,"column_end":16},"name":"Array4","qualname":"::aliases::Array4","value":"Array<A, Ix4>","parent":null,"children":[],"decl_id":null,"docs":" four-dimensional array\n","sig":null,"attributes":[{"value":"/ four-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49705,"byte_end":49731,"line_start":106,"line_end":106,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49804,"byte_end":49810,"line_start":109,"line_end":109,"column_start":10,"column_end":16},"name":"Array5","qualname":"::aliases::Array5","value":"Array<A, Ix5>","parent":null,"children":[],"decl_id":null,"docs":" five-dimensional array\n","sig":null,"attributes":[{"value":"/ five-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49768,"byte_end":49794,"line_start":108,"line_end":108,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49866,"byte_end":49872,"line_start":111,"line_end":111,"column_start":10,"column_end":16},"name":"Array6","qualname":"::aliases::Array6","value":"Array<A, Ix6>","parent":null,"children":[],"decl_id":null,"docs":" six-dimensional array\n","sig":null,"attributes":[{"value":"/ six-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49831,"byte_end":49856,"line_start":110,"line_end":110,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":102},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49932,"byte_end":49938,"line_start":113,"line_end":113,"column_start":10,"column_end":16},"name":"ArrayD","qualname":"::aliases::ArrayD","value":"Array<A, IxDyn>","parent":null,"children":[],"decl_id":null,"docs":" dynamic-dimensional array\n","sig":null,"attributes":[{"value":"/ dynamic-dimensional array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49893,"byte_end":49922,"line_start":112,"line_end":112,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50003,"byte_end":50013,"line_start":116,"line_end":116,"column_start":10,"column_end":20},"name":"ArrayView0","qualname":"::aliases::ArrayView0","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" zero-dimensional array view\n","sig":null,"attributes":[{"value":"/ zero-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":49962,"byte_end":49993,"line_start":115,"line_end":115,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":107},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50086,"byte_end":50096,"line_start":118,"line_end":118,"column_start":10,"column_end":20},"name":"ArrayView1","qualname":"::aliases::ArrayView1","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" one-dimensional array view\n","sig":null,"attributes":[{"value":"/ one-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50046,"byte_end":50076,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":110},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50169,"byte_end":50179,"line_start":120,"line_end":120,"column_start":10,"column_end":20},"name":"ArrayView2","qualname":"::aliases::ArrayView2","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" two-dimensional array view\n","sig":null,"attributes":[{"value":"/ two-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50129,"byte_end":50159,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":113},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50254,"byte_end":50264,"line_start":122,"line_end":122,"column_start":10,"column_end":20},"name":"ArrayView3","qualname":"::aliases::ArrayView3","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" three-dimensional array view\n","sig":null,"attributes":[{"value":"/ three-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50212,"byte_end":50244,"line_start":121,"line_end":121,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":116},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50338,"byte_end":50348,"line_start":124,"line_end":124,"column_start":10,"column_end":20},"name":"ArrayView4","qualname":"::aliases::ArrayView4","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" four-dimensional array view\n","sig":null,"attributes":[{"value":"/ four-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50297,"byte_end":50328,"line_start":123,"line_end":123,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":119},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50422,"byte_end":50432,"line_start":126,"line_end":126,"column_start":10,"column_end":20},"name":"ArrayView5","qualname":"::aliases::ArrayView5","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" five-dimensional array view\n","sig":null,"attributes":[{"value":"/ five-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50381,"byte_end":50412,"line_start":125,"line_end":125,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":122},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50505,"byte_end":50515,"line_start":128,"line_end":128,"column_start":10,"column_end":20},"name":"ArrayView6","qualname":"::aliases::ArrayView6","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" six-dimensional array view\n","sig":null,"attributes":[{"value":"/ six-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50465,"byte_end":50495,"line_start":127,"line_end":127,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":125},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50592,"byte_end":50602,"line_start":130,"line_end":130,"column_start":10,"column_end":20},"name":"ArrayViewD","qualname":"::aliases::ArrayViewD","value":"ArrayView","parent":null,"children":[],"decl_id":null,"docs":" dynamic-dimensional array view\n","sig":null,"attributes":[{"value":"/ dynamic-dimensional array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50548,"byte_end":50582,"line_start":129,"line_end":129,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":128},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50690,"byte_end":50703,"line_start":133,"line_end":133,"column_start":10,"column_end":23},"name":"ArrayViewMut0","qualname":"::aliases::ArrayViewMut0","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" zero-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ zero-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50638,"byte_end":50680,"line_start":132,"line_end":132,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":131},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50790,"byte_end":50803,"line_start":135,"line_end":135,"column_start":10,"column_end":23},"name":"ArrayViewMut1","qualname":"::aliases::ArrayViewMut1","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" one-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ one-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50739,"byte_end":50780,"line_start":134,"line_end":134,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50890,"byte_end":50903,"line_start":137,"line_end":137,"column_start":10,"column_end":23},"name":"ArrayViewMut2","qualname":"::aliases::ArrayViewMut2","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" two-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ two-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50839,"byte_end":50880,"line_start":136,"line_end":136,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":137},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50992,"byte_end":51005,"line_start":139,"line_end":139,"column_start":10,"column_end":23},"name":"ArrayViewMut3","qualname":"::aliases::ArrayViewMut3","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" three-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ three-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":50939,"byte_end":50982,"line_start":138,"line_end":138,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51093,"byte_end":51106,"line_start":141,"line_end":141,"column_start":10,"column_end":23},"name":"ArrayViewMut4","qualname":"::aliases::ArrayViewMut4","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" four-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ four-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51041,"byte_end":51083,"line_start":140,"line_end":140,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":143},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51194,"byte_end":51207,"line_start":143,"line_end":143,"column_start":10,"column_end":23},"name":"ArrayViewMut5","qualname":"::aliases::ArrayViewMut5","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" five-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ five-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51142,"byte_end":51184,"line_start":142,"line_end":142,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":146},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51294,"byte_end":51307,"line_start":145,"line_end":145,"column_start":10,"column_end":23},"name":"ArrayViewMut6","qualname":"::aliases::ArrayViewMut6","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" six-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ six-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51243,"byte_end":51284,"line_start":144,"line_end":144,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":149},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51398,"byte_end":51411,"line_start":147,"line_end":147,"column_start":10,"column_end":23},"name":"ArrayViewMutD","qualname":"::aliases::ArrayViewMutD","value":"ArrayViewMut","parent":null,"children":[],"decl_id":null,"docs":" dynamic-dimensional read-write array view\n","sig":null,"attributes":[{"value":"/ dynamic-dimensional read-write array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51343,"byte_end":51388,"line_start":146,"line_end":146,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":152},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51502,"byte_end":51510,"line_start":150,"line_end":150,"column_start":10,"column_end":18},"name":"RcArray1","qualname":"::aliases::RcArray1","value":"RcArray<A, Ix1>","parent":null,"children":[],"decl_id":null,"docs":" one-dimensional shared ownership array\n","sig":null,"attributes":[{"value":"/ one-dimensional shared ownership array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51450,"byte_end":51492,"line_start":149,"line_end":149,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":154},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51585,"byte_end":51593,"line_start":152,"line_end":152,"column_start":10,"column_end":18},"name":"RcArray2","qualname":"::aliases::RcArray2","value":"RcArray<A, Ix2>","parent":null,"children":[],"decl_id":null,"docs":" two-dimensional shared ownership array\n","sig":null,"attributes":[{"value":"/ two-dimensional shared ownership array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/aliases.rs","byte_start":51533,"byte_end":51575,"line_start":151,"line_end":151,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59678,"byte_end":59685,"line_start":306,"line_end":306,"column_start":11,"column_end":18},"name":"AsArray","qualname":"::arraytraits::AsArray","value":"AsArray<'a, A: 'a, D = Ix1>: Into<ArrayView>","parent":null,"children":[],"decl_id":null,"docs":" Argument conversion into an array view","sig":null,"attributes":[{"value":"/ Argument conversion into an array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59196,"byte_end":59238,"line_start":285,"line_end":285,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59239,"byte_end":59242,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The trait is parameterized over `A`, the element type, and `D`, the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59243,"byte_end":59314,"line_start":287,"line_end":287,"column_start":1,"column_end":72}},{"value":"/ dimensionality of the array. `D` defaults to one-dimensional.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59315,"byte_end":59380,"line_start":288,"line_end":288,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59381,"byte_end":59384,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Use `.into()` to do the conversion.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59385,"byte_end":59424,"line_start":290,"line_end":290,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59425,"byte_end":59428,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59429,"byte_end":59436,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/ use ndarray::AsArray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59437,"byte_end":59462,"line_start":293,"line_end":293,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59463,"byte_end":59466,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ fn sum<'a, V: AsArray<'a, f64>>(data: V) -> f64 {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59467,"byte_end":59520,"line_start":295,"line_end":295,"column_start":1,"column_end":54}},{"value":"/     let array_view = data.into();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59521,"byte_end":59558,"line_start":296,"line_end":296,"column_start":1,"column_end":38}},{"value":"/     array_view.sum()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59559,"byte_end":59583,"line_start":297,"line_end":297,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59584,"byte_end":59589,"line_start":298,"line_end":298,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59590,"byte_end":59593,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59594,"byte_end":59609,"line_start":300,"line_end":300,"column_start":1,"column_end":16}},{"value":"/     sum(&[1., 2., 3.]),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59610,"byte_end":59637,"line_start":301,"line_end":301,"column_start":1,"column_end":28}},{"value":"/     6.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59638,"byte_end":59648,"line_start":302,"line_end":302,"column_start":1,"column_end":11}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59649,"byte_end":59655,"line_start":303,"line_end":303,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59656,"byte_end":59659,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59660,"byte_end":59667,"line_start":305,"line_end":305,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":343},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66637,"byte_end":66641,"line_start":28,"line_end":28,"column_start":18,"column_end":22},"name":"Data","qualname":"::data_traits::Data","value":"Data: Sized","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":2903}],"decl_id":null,"docs":" Array representation trait.","sig":null,"attributes":[{"value":"/ Array representation trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66391,"byte_end":66422,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66423,"byte_end":66426,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ***Note:*** `Data` is not an extension interface at this point.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66427,"byte_end":66494,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ Traits in Rust can serve many different roles. This trait is public because","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66495,"byte_end":66574,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ it is used as a bound on public methods.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66575,"byte_end":66619,"line_start":27,"line_end":27,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":344},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66693,"byte_end":66697,"line_start":30,"line_end":30,"column_start":10,"column_end":14},"name":"Elem","qualname":"::data_traits::Data::Elem","value":"type Elem;","parent":{"krate":0,"index":343},"children":[],"decl_id":null,"docs":" The array element type.\n","sig":null,"attributes":[{"value":"/ The array element type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66656,"byte_end":66683,"line_start":29,"line_end":29,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66772,"byte_end":66783,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"_data_slice","qualname":"::data_traits::Data::_data_slice","value":"pub fn _data_slice(&Self) -> &[Self::Elem]","parent":{"krate":0,"index":343},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66921,"byte_end":66931,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"into_owned","qualname":"::data_traits::Data::into_owned","value":"pub fn into_owned<D>(ArrayBase<Self, D>)\n-> ArrayBase<OwnedRepr<Self::Elem>, D> where Self::Elem: Clone, D: Dimension","parent":{"krate":0,"index":343},"children":[],"decl_id":null,"docs":" Converts the array to a uniquely owned array, cloning elements if necessary.\n","sig":null,"attributes":[{"value":"/ Converts the array to a uniquely owned array, cloning elements if necessary.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66814,"byte_end":66894,"line_start":36,"line_end":36,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":348},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67220,"byte_end":67227,"line_start":51,"line_end":51,"column_start":18,"column_end":25},"name":"DataMut","qualname":"::data_traits::DataMut","value":"DataMut: Data","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":351}],"decl_id":null,"docs":" Array representation trait.","sig":null,"attributes":[{"value":"/ Array representation trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67084,"byte_end":67115,"line_start":46,"line_end":46,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67116,"byte_end":67119,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ For an array with writable elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67120,"byte_end":67160,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67161,"byte_end":67164,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ***Internal trait, see `Data`.***","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67165,"byte_end":67202,"line_start":50,"line_end":50,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67277,"byte_end":67290,"line_start":54,"line_end":54,"column_start":8,"column_end":21},"name":"ensure_unique","qualname":"::data_traits::DataMut::ensure_unique","value":"pub fn ensure_unique<D>(&mut ArrayBase<Self, D>) where Self: Sized,\nD: Dimension","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67260,"byte_end":67269,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67422,"byte_end":67431,"line_start":61,"line_end":61,"column_start":8,"column_end":17},"name":"is_unique","qualname":"::data_traits::DataMut::is_unique","value":"pub fn is_unique(&mut Self) -> bool","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67405,"byte_end":67414,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":352},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67618,"byte_end":67627,"line_start":71,"line_end":71,"column_start":18,"column_end":27},"name":"DataClone","qualname":"::data_traits::DataClone","value":"DataClone: Data","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"decl_id":null,"docs":" Array representation trait.","sig":null,"attributes":[{"value":"/ Array representation trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67475,"byte_end":67506,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67507,"byte_end":67510,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ An array representation that can be cloned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67511,"byte_end":67558,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67559,"byte_end":67562,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ***Internal trait, see `Data`.***","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67563,"byte_end":67600,"line_start":70,"line_end":70,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67739,"byte_end":67753,"line_start":74,"line_end":74,"column_start":15,"column_end":29},"name":"clone_with_ptr","qualname":"::data_traits::DataClone::clone_with_ptr","value":"pub unsafe fn clone_with_ptr(&Self, *mut Self::Elem)\n-> (Self, *mut Self::Elem)","parent":{"krate":0,"index":352},"children":[],"decl_id":null,"docs":" Unsafe because, `ptr` must point inside the current storage.\n","sig":null,"attributes":[{"value":"/ Unsafe because, `ptr` must point inside the current storage.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67660,"byte_end":67724,"line_start":73,"line_end":73,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67845,"byte_end":67864,"line_start":77,"line_end":77,"column_start":15,"column_end":34},"name":"clone_from_with_ptr","qualname":"::data_traits::DataClone::clone_from_with_ptr","value":"pub unsafe fn clone_from_with_ptr(&mut Self, &Self, *mut Self::Elem)\n-> *mut Self::Elem","parent":{"krate":0,"index":352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":402},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72307,"byte_end":72316,"line_start":238,"line_end":238,"column_start":18,"column_end":27},"name":"DataOwned","qualname":"::data_traits::DataOwned","value":"DataOwned: Data","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" Array representation trait.","sig":null,"attributes":[{"value":"/ Array representation trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72145,"byte_end":72176,"line_start":233,"line_end":233,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72177,"byte_end":72180,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ A representation that is a unique or shared owner of its data.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72181,"byte_end":72247,"line_start":235,"line_end":235,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72248,"byte_end":72251,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ***Internal trait, see `Data`.***","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72252,"byte_end":72289,"line_start":237,"line_end":237,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72352,"byte_end":72355,"line_start":240,"line_end":240,"column_start":8,"column_end":11},"name":"new","qualname":"::data_traits::DataOwned::new","value":"pub fn new(Vec<Self::Elem>) -> Self","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72533,"byte_end":72544,"line_start":245,"line_end":245,"column_start":8,"column_end":19},"name":"into_shared","qualname":"::data_traits::DataOwned::into_shared","value":"pub fn into_shared(Self) -> OwnedRcRepr<Self::Elem>","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":" Converts the data representation to a shared (copy on write)\n representation, without any copying.\n","sig":null,"attributes":[{"value":"/ Converts the data representation to a shared (copy on write)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72397,"byte_end":72461,"line_start":242,"line_end":242,"column_start":5,"column_end":69}},{"value":"/ representation, without any copying.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72466,"byte_end":72506,"line_start":243,"line_end":243,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":405},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72726,"byte_end":72736,"line_start":253,"line_end":253,"column_start":18,"column_end":28},"name":"DataShared","qualname":"::data_traits::DataShared","value":"DataShared: Clone + DataClone","parent":null,"children":[],"decl_id":null,"docs":" Array representation trait.","sig":null,"attributes":[{"value":"/ Array representation trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72582,"byte_end":72613,"line_start":248,"line_end":248,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72614,"byte_end":72617,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ A representation that is a lightweight view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72618,"byte_end":72666,"line_start":250,"line_end":250,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72667,"byte_end":72670,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ***Internal trait, see `Data`.***","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72671,"byte_end":72708,"line_start":252,"line_end":252,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2908},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94118,"byte_end":94122,"line_start":19,"line_end":19,"column_start":12,"column_end":16},"name":"Axis","qualname":"::dimension::axis::Axis","value":"","parent":null,"children":[],"decl_id":null,"docs":" An axis index.","sig":null,"attributes":[{"value":"/ An axis index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93770,"byte_end":93788,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93789,"byte_end":93792,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ An axis one of an array’s “dimensions”; an *n*-dimensional array has *n* axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93793,"byte_end":93881,"line_start":13,"line_end":13,"column_start":1,"column_end":83}},{"value":"/ Axis *0* is the array’s outermost axis and *n*-1 is the innermost.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93882,"byte_end":93954,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93955,"byte_end":93958,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ All array axis arguments use this type to make the code easier to write","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":93959,"byte_end":94034,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ correctly and easier to understand.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94035,"byte_end":94074,"line_start":17,"line_end":17,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2910},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94123,"byte_end":94132,"line_start":19,"line_end":19,"column_start":17,"column_end":26},"name":"0","qualname":"::dimension::axis::Axis::0","value":"usize","parent":{"krate":0,"index":2908},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94219,"byte_end":94224,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"index","qualname":"<Axis>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the axis.\n","sig":null,"attributes":[{"value":"/ Return the index of the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94152,"byte_end":94185,"line_start":22,"line_end":22,"column_start":5,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94190,"byte_end":94207,"line_start":23,"line_end":23,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":469},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96183,"byte_end":96196,"line_start":41,"line_end":41,"column_start":11,"column_end":24},"name":"IntoDimension","qualname":"::dimension::conversion::IntoDimension","value":"IntoDimension","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" Argument conversion a dimension.\n","sig":null,"attributes":[{"value":"/ Argument conversion a dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96136,"byte_end":96172,"line_start":40,"line_end":40,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":470},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96208,"byte_end":96211,"line_start":42,"line_end":42,"column_start":10,"column_end":13},"name":"Dim","qualname":"::dimension::conversion::IntoDimension::Dim","value":"type Dim: Dimension;","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96231,"byte_end":96245,"line_start":43,"line_end":43,"column_start":8,"column_end":22},"name":"into_dimension","qualname":"::dimension::conversion::IntoDimension::into_dimension","value":"pub fn into_dimension(Self) -> Self::Dim","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96856,"byte_end":96858,"line_start":71,"line_end":71,"column_start":10,"column_end":12},"name":"To","qualname":"::dimension::conversion::Convert::To","value":"type To;","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3103},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100036,"byte_end":100039,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"Dim","qualname":"::dimension::dim::Dim","value":"Dim {  }","parent":null,"children":[{"krate":0,"index":3105}],"decl_id":null,"docs":" Dimension description.","sig":null,"attributes":[{"value":"/ Dimension description.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99355,"byte_end":99381,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99382,"byte_end":99385,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `Dim` describes the number of axes and the length of each axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99386,"byte_end":99452,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ in an array. It is also used as an index type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99453,"byte_end":99503,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99504,"byte_end":99507,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See also the [`Dimension` trait](Dimension.t.html) for its methods and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99508,"byte_end":99582,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ operations.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99583,"byte_end":99598,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99599,"byte_end":99602,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99603,"byte_end":99617,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99618,"byte_end":99621,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ To create an array with a particular dimension, you'd just pass","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99622,"byte_end":99689,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ a tuple (in this example (3, 2) is used), which is converted to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99690,"byte_end":99757,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ `Dim` by the array constructor.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99758,"byte_end":99793,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99794,"byte_end":99797,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99798,"byte_end":99805,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use ndarray::Array2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99806,"byte_end":99830,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/ use ndarray::Dim;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99831,"byte_end":99852,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99853,"byte_end":99856,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut array = Array2::zeros((3, 2));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99857,"byte_end":99899,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ array[[0, 0]] = 1.;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99900,"byte_end":99923,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(array.raw_dim(), Dim([3, 2]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99924,"byte_end":99969,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":99970,"byte_end":99977,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100463,"byte_end":100466,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"Dim","qualname":"::dimension::dim::Dim","value":"pub fn Dim<T>(T) -> T::Dim where T: IntoDimension","parent":null,"children":[],"decl_id":null,"docs":" Create a new dimension value.\n","sig":null,"attributes":[{"value":"/ Create a new dimension value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100397,"byte_end":100430,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100431,"byte_end":100455,"line_start":58,"line_end":58,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":571},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104378,"byte_end":104387,"line_start":34,"line_end":34,"column_start":11,"column_end":20},"name":"Dimension","qualname":"::dimension::dimension_trait::Dimension","value":"Dimension: Clone + Eq + Debug + Send + Sync + Default + IndexMut<usize, Output = usize> +\nAdd<Self, Output = Self> + AddAssign + for<'x> AddAssign<&'x Self> + Sub<Self,\nOutput = Self> + SubAssign + for<'x> SubAssign<&'x Self> + Mul<usize, Output =\nSelf> + Mul<Self, Output = Self> + MulAssign + for<'x> MulAssign<&'x Self> +\nMulAssign<usize>","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":3180}],"decl_id":null,"docs":" Array shape and index trait.","sig":null,"attributes":[{"value":"/ Array shape and index trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104153,"byte_end":104185,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104186,"byte_end":104189,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods and operations that can be used on","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104190,"byte_end":104267,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ dimensions and indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104268,"byte_end":104295,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104296,"byte_end":104299,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ **Note:** *This trait can not be implemented outside the crate*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104300,"byte_end":104367,"line_start":33,"line_end":33,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":575},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104947,"byte_end":104951,"line_start":47,"line_end":47,"column_start":11,"column_end":15},"name":"NDIM","qualname":"::dimension::dimension_trait::Dimension::NDIM","value":"Option<usize>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" For fixed-size dimension representations (e.g. `Ix2`), this should be\n `Some(ndim)`, and for variable-size dimension representations (e.g.\n `IxDyn`), this should be `None`.\n","sig":null,"attributes":[{"value":"/ For fixed-size dimension representations (e.g. `Ix2`), this should be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104746,"byte_end":104819,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ `Some(ndim)`, and for variable-size dimension representations (e.g.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104824,"byte_end":104895,"line_start":45,"line_end":45,"column_start":5,"column_end":76}},{"value":"/ `IxDyn`), this should be `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104900,"byte_end":104936,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":576},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105522,"byte_end":105530,"line_start":62,"line_end":62,"column_start":10,"column_end":18},"name":"SliceArg","qualname":"::dimension::dimension_trait::Dimension::SliceArg","value":"type SliceArg: ?Sized + AsRef<[SliceOrIndex]>;","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" `SliceArg` is the type which is used to specify slicing for this\n dimension.","sig":null,"attributes":[{"value":"/ `SliceArg` is the type which is used to specify slicing for this","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104972,"byte_end":105040,"line_start":48,"line_end":48,"column_start":5,"column_end":73}},{"value":"/ dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105045,"byte_end":105059,"line_start":49,"line_end":49,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105064,"byte_end":105067,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ For the fixed size dimensions it is a fixed size array of the correct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105072,"byte_end":105145,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ size, which you pass by reference. For the dynamic dimension it is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105150,"byte_end":105220,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ a slice.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105225,"byte_end":105237,"line_start":53,"line_end":53,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105242,"byte_end":105245,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ - For `Ix1`: `[SliceOrIndex; 1]`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105250,"byte_end":105286,"line_start":55,"line_end":55,"column_start":5,"column_end":41}},{"value":"/ - For `Ix2`: `[SliceOrIndex; 2]`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105291,"byte_end":105327,"line_start":56,"line_end":56,"column_start":5,"column_end":41}},{"value":"/ - and so on..","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105332,"byte_end":105349,"line_start":57,"line_end":57,"column_start":5,"column_end":22}},{"value":"/ - For `IxDyn`: `[SliceOrIndex]`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105354,"byte_end":105389,"line_start":58,"line_end":58,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105394,"byte_end":105397,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The easiest way to create a `&SliceInfo<SliceArg, Do>` is using the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105402,"byte_end":105473,"line_start":60,"line_end":60,"column_start":5,"column_end":76}},{"value":"/ [`s![]`](macro.s!.html) macro.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105478,"byte_end":105512,"line_start":61,"line_end":61,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":577},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105765,"byte_end":105772,"line_start":69,"line_end":69,"column_start":10,"column_end":17},"name":"Pattern","qualname":"::dimension::dimension_trait::Dimension::Pattern","value":"type Pattern: IntoDimension<Dim=Self>;","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Pattern matching friendly form of the dimension value.","sig":null,"attributes":[{"value":"/ Pattern matching friendly form of the dimension value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105568,"byte_end":105626,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105631,"byte_end":105634,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ - For `Ix1`: `usize`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105639,"byte_end":105664,"line_start":65,"line_end":65,"column_start":5,"column_end":30}},{"value":"/ - For `Ix2`: `(usize, usize)`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105669,"byte_end":105702,"line_start":66,"line_end":66,"column_start":5,"column_end":38}},{"value":"/ - and so on..","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105707,"byte_end":105724,"line_start":67,"line_end":67,"column_start":5,"column_end":22}},{"value":"/ - For `IxDyn`: `IxDyn`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105729,"byte_end":105755,"line_start":68,"line_end":68,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":578},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105855,"byte_end":105862,"line_start":71,"line_end":71,"column_start":10,"column_end":17},"name":"Smaller","qualname":"::dimension::dimension_trait::Dimension::Smaller","value":"type Smaller: Dimension;","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Next smaller dimension (if applicable)\n","sig":null,"attributes":[{"value":"/ Next smaller dimension (if applicable)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105803,"byte_end":105845,"line_start":70,"line_end":70,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":579},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105914,"byte_end":105920,"line_start":73,"line_end":73,"column_start":10,"column_end":16},"name":"Larger","qualname":"::dimension::dimension_trait::Dimension::Larger","value":"type Larger: Dimension;","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Next larger dimension\n","sig":null,"attributes":[{"value":"/ Next larger dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105879,"byte_end":105904,"line_start":72,"line_end":72,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106000,"byte_end":106004,"line_start":76,"line_end":76,"column_start":8,"column_end":12},"name":"ndim","qualname":"::dimension::dimension_trait::Dimension::ndim","value":"pub fn ndim(&Self) -> usize","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Returns the number of dimensions (number of axes).\n","sig":null,"attributes":[{"value":"/ Returns the number of dimensions (number of axes).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":105938,"byte_end":105992,"line_start":75,"line_end":75,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106100,"byte_end":106112,"line_start":79,"line_end":79,"column_start":8,"column_end":20},"name":"into_pattern","qualname":"::dimension::dimension_trait::Dimension::into_pattern","value":"pub fn into_pattern(Self) -> Self::Pattern","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Convert the dimension into a pattern matching friendly value.\n","sig":null,"attributes":[{"value":"/ Convert the dimension into a pattern matching friendly value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106027,"byte_end":106092,"line_start":78,"line_end":78,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106208,"byte_end":106212,"line_start":82,"line_end":82,"column_start":8,"column_end":12},"name":"size","qualname":"::dimension::dimension_trait::Dimension::size","value":"pub fn size(&Self) -> usize","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Compute the size of the dimension (number of elements)\n","sig":null,"attributes":[{"value":"/ Compute the size of the dimension (number of elements)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106142,"byte_end":106200,"line_start":81,"line_end":81,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106359,"byte_end":106371,"line_start":87,"line_end":87,"column_start":8,"column_end":20},"name":"size_checked","qualname":"::dimension::dimension_trait::Dimension::size_checked","value":"pub fn size_checked(&Self) -> Option<usize>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Compute the size while checking for overflow.\n","sig":null,"attributes":[{"value":"/ Compute the size while checking for overflow.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106302,"byte_end":106351,"line_start":86,"line_end":86,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106517,"byte_end":106522,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"slice","qualname":"::dimension::dimension_trait::Dimension::slice","value":"pub fn slice(&Self) -> &[Ix]","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106567,"byte_end":106576,"line_start":95,"line_end":95,"column_start":8,"column_end":17},"name":"slice_mut","qualname":"::dimension::dimension_trait::Dimension::slice_mut","value":"pub fn slice_mut(&mut Self) -> &mut [Ix]","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106652,"byte_end":106665,"line_start":98,"line_end":98,"column_start":8,"column_end":21},"name":"as_array_view","qualname":"::dimension::dimension_trait::Dimension::as_array_view","value":"pub fn as_array_view(&Self) -> ArrayView1<, Ix>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Borrow as a read-only array view.\n","sig":null,"attributes":[{"value":"/ Borrow as a read-only array view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106607,"byte_end":106644,"line_start":97,"line_end":97,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106789,"byte_end":106806,"line_start":103,"line_end":103,"column_start":8,"column_end":25},"name":"as_array_view_mut","qualname":"::dimension::dimension_trait::Dimension::as_array_view_mut","value":"pub fn as_array_view_mut(&mut Self) -> ArrayViewMut1<, Ix>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Borrow as a read-write array view.\n","sig":null,"attributes":[{"value":"/ Borrow as a read-write array view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106743,"byte_end":106781,"line_start":102,"line_end":102,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":106920,"byte_end":106925,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"equal","qualname":"::dimension::dimension_trait::Dimension::equal","value":"pub fn equal(&Self, &Self) -> bool","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107244,"byte_end":107259,"line_start":117,"line_end":117,"column_start":8,"column_end":23},"name":"default_strides","qualname":"::dimension::dimension_trait::Dimension::default_strides","value":"pub fn default_strides(&Self) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Returns the strides for a standard layout array with the given shape.","sig":null,"attributes":[{"value":"/ Returns the strides for a standard layout array with the given shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107002,"byte_end":107075,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107080,"byte_end":107083,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ If the array is non-empty, the strides result in contiguous layout; if","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107088,"byte_end":107162,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/ the array is empty, the strides are all zeros.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107167,"byte_end":107217,"line_start":115,"line_end":115,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108193,"byte_end":108208,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"fortran_strides","qualname":"::dimension::dimension_trait::Dimension::fortran_strides","value":"pub fn fortran_strides(&Self) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Returns the strides for a Fortran layout array with the given shape.","sig":null,"attributes":[{"value":"/ Returns the strides for a Fortran layout array with the given shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":107952,"byte_end":108024,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108029,"byte_end":108032,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If the array is non-empty, the strides result in contiguous layout; if","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108037,"byte_end":108111,"line_start":140,"line_end":140,"column_start":5,"column_end":79}},{"value":"/ the array is empty, the strides are all zeros.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108116,"byte_end":108166,"line_start":141,"line_end":141,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109149,"byte_end":109154,"line_start":170,"line_end":170,"column_start":8,"column_end":13},"name":"zeros","qualname":"::dimension::dimension_trait::Dimension::zeros","value":"pub fn zeros(usize) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Creates a dimension of all zeros with the specified ndim.","sig":null,"attributes":[{"value":"/ Creates a dimension of all zeros with the specified ndim.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108882,"byte_end":108943,"line_start":164,"line_end":164,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108948,"byte_end":108951,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This method is useful for generalizing over fixed-size and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":108956,"byte_end":109018,"line_start":166,"line_end":166,"column_start":5,"column_end":67}},{"value":"/ variable-size dimension representations.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109023,"byte_end":109067,"line_start":167,"line_end":167,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109072,"byte_end":109075,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `Self` has a fixed size that is not `ndim`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109080,"byte_end":109141,"line_start":169,"line_end":169,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109218,"byte_end":109229,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"first_index","qualname":"::dimension::dimension_trait::Dimension::first_index","value":"pub fn first_index(&Self) -> Option<Self>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109201,"byte_end":109210,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109621,"byte_end":109629,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"next_for","qualname":"::dimension::dimension_trait::Dimension::next_for","value":"pub fn next_for(&Self, Self) -> Option<Self>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Iteration -- Use self as size, and return next index after `index`\n or None if there are no more.\n","sig":null,"attributes":[{"value":"/ Iteration -- Use self as size, and return next index after `index`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109443,"byte_end":109513,"line_start":184,"line_end":184,"column_start":5,"column_end":75}},{"value":"/ or None if there are no more.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109518,"byte_end":109551,"line_start":185,"line_end":185,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":109604,"byte_end":109613,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110258,"byte_end":110268,"line_start":213,"line_end":213,"column_start":8,"column_end":18},"name":"next_for_f","qualname":"::dimension::dimension_trait::Dimension::next_for_f","value":"pub fn next_for_f(&Self, &mut Self) -> bool","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Iteration -- Use self as size, and create the next index after `index`\n Return false if iteration is done","sig":null,"attributes":[{"value":"/ Iteration -- Use self as size, and create the next index after `index`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110088,"byte_end":110162,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ Return false if iteration is done","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110167,"byte_end":110204,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110209,"byte_end":110212,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Next in f-order","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110217,"byte_end":110236,"line_start":211,"line_end":211,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110241,"byte_end":110250,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110686,"byte_end":110699,"line_start":230,"line_end":230,"column_start":8,"column_end":21},"name":"stride_offset","qualname":"::dimension::dimension_trait::Dimension::stride_offset","value":"pub fn stride_offset(&Self, &Self) -> isize","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Return stride offset for index.\n","sig":null,"attributes":[{"value":"/ Return stride offset for index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110643,"byte_end":110678,"line_start":229,"line_end":229,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110993,"byte_end":111014,"line_start":240,"line_end":240,"column_start":8,"column_end":29},"name":"stride_offset_checked","qualname":"::dimension::dimension_trait::Dimension::stride_offset_checked","value":"pub fn stride_offset_checked(&Self, &Self, &Self) -> Option<isize>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Return stride offset for this dimension and index.\n","sig":null,"attributes":[{"value":"/ Return stride offset for this dimension and index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":110931,"byte_end":110985,"line_start":239,"line_end":239,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":111180,"byte_end":111189,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"last_elem","qualname":"::dimension::dimension_trait::Dimension::last_elem","value":"pub fn last_elem(&Self) -> usize","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":111314,"byte_end":111327,"line_start":250,"line_end":250,"column_start":8,"column_end":21},"name":"set_last_elem","qualname":"::dimension::dimension_trait::Dimension::set_last_elem","value":"pub fn set_last_elem(&mut Self, usize)","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":111452,"byte_end":111465,"line_start":256,"line_end":256,"column_start":8,"column_end":21},"name":"is_contiguous","qualname":"::dimension::dimension_trait::Dimension::is_contiguous","value":"pub fn is_contiguous(&Self, &Self) -> bool","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112402,"byte_end":112431,"line_start":284,"line_end":284,"column_start":8,"column_end":37},"name":"_fastest_varying_stride_order","qualname":"::dimension::dimension_trait::Dimension::_fastest_varying_stride_order","value":"pub fn _fastest_varying_stride_order(&Self) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Return the axis ordering corresponding to the fastest variation\n (in ascending order).","sig":null,"attributes":[{"value":"/ Return the axis ordering corresponding to the fastest variation","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112143,"byte_end":112210,"line_start":278,"line_end":278,"column_start":5,"column_end":72}},{"value":"/ (in ascending order).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112215,"byte_end":112240,"line_start":279,"line_end":279,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112245,"byte_end":112248,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Assumes that no stride value appears twice. This cannot yield the correct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112253,"byte_end":112330,"line_start":281,"line_end":281,"column_start":5,"column_end":82}},{"value":"/ result the strides are not positive.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112335,"byte_end":112375,"line_start":282,"line_end":282,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112844,"byte_end":112859,"line_start":297,"line_end":297,"column_start":8,"column_end":23},"name":"min_stride_axis","qualname":"::dimension::dimension_trait::Dimension::min_stride_axis","value":"pub fn min_stride_axis(&Self, &Self) -> Axis","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Compute the minimum stride axis (absolute value), under the constraint\n that the length of the axis is > 1;\n","sig":null,"attributes":[{"value":"/ Compute the minimum stride axis (absolute value), under the constraint","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112699,"byte_end":112773,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ that the length of the axis is > 1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":112778,"byte_end":112817,"line_start":295,"line_end":295,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113366,"byte_end":113381,"line_start":312,"line_end":312,"column_start":8,"column_end":23},"name":"max_stride_axis","qualname":"::dimension::dimension_trait::Dimension::max_stride_axis","value":"pub fn max_stride_axis(&Self, &Self) -> Axis","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Compute the maximum stride axis (absolute value), under the constraint\n that the length of the axis is > 1;\n","sig":null,"attributes":[{"value":"/ Compute the maximum stride axis (absolute value), under the constraint","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113221,"byte_end":113295,"line_start":309,"line_end":309,"column_start":5,"column_end":79}},{"value":"/ that the length of the axis is > 1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113300,"byte_end":113339,"line_start":310,"line_end":310,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113822,"byte_end":113830,"line_start":325,"line_end":325,"column_start":8,"column_end":16},"name":"into_dyn","qualname":"::dimension::dimension_trait::Dimension::into_dyn","value":"pub fn into_dyn(Self) -> IxDyn","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Convert the dimensional into a dynamic dimensional (IxDyn).\n","sig":null,"attributes":[{"value":"/ Convert the dimensional into a dynamic dimensional (IxDyn).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113751,"byte_end":113814,"line_start":324,"line_end":324,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":113909,"byte_end":113923,"line_start":330,"line_end":330,"column_start":8,"column_end":22},"name":"from_dimension","qualname":"::dimension::dimension_trait::Dimension::from_dimension","value":"pub fn from_dimension<D2: Dimension>(&D2) -> Option<Self>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":114211,"byte_end":114222,"line_start":343,"line_end":343,"column_start":8,"column_end":19},"name":"insert_axis","qualname":"::dimension::dimension_trait::Dimension::insert_axis","value":"pub fn insert_axis(&Self, Axis) -> Self::Larger","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":114286,"byte_end":114301,"line_start":346,"line_end":346,"column_start":8,"column_end":23},"name":"try_remove_axis","qualname":"::dimension::dimension_trait::Dimension::try_remove_axis","value":"pub fn try_remove_axis(&Self, Axis) -> Self::Smaller","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3260},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130993,"byte_end":131002,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"IxDynImpl","qualname":"::dimension::dynindeximpl::IxDynImpl","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dynamic dimension or index type.","sig":null,"attributes":[{"value":"/ Dynamic dimension or index type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130714,"byte_end":130750,"line_start":119,"line_end":119,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130751,"byte_end":130754,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ Use `IxDyn` directly. This type implements a dynamic number of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130755,"byte_end":130821,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"/ dimensions or indices. Short dimensions are stored inline and don't need","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130822,"byte_end":130898,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/ any dynamic memory allocation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130899,"byte_end":130933,"line_start":123,"line_end":123,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133846,"byte_end":133851,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"zeros","qualname":"<IxDyn>::zeros","value":"pub fn zeros(usize) -> IxDyn","parent":null,"children":[],"decl_id":null,"docs":" Create a new dimension value with `n` axes, all zeros\n","sig":null,"attributes":[{"value":"/ Create a new dimension value with `n` axes, all zeros","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133763,"byte_end":133820,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133825,"byte_end":133834,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":826},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134553,"byte_end":134560,"line_start":24,"line_end":24,"column_start":18,"column_end":25},"name":"NdIndex","qualname":"::dimension::ndindex::NdIndex","value":"NdIndex<E>: Debug","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"decl_id":null,"docs":" Tuple or fixed size arrays that can be used to index an array.","sig":null,"attributes":[{"value":"/ Tuple or fixed size arrays that can be used to index an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134248,"byte_end":134314,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134315,"byte_end":134318,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134319,"byte_end":134326,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134327,"byte_end":134349,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134350,"byte_end":134353,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut a = arr2(&[[0, 1],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134354,"byte_end":134384,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"/                    [2, 3]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134385,"byte_end":134417,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a[[0, 1]], 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134418,"byte_end":134447,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a[[1, 1]], 3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134448,"byte_end":134477,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/ a[[1, 1]] += 1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134478,"byte_end":134497,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(a[(1, 1)], 4);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134498,"byte_end":134527,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134528,"byte_end":134535,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134600,"byte_end":134613,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"index_checked","qualname":"::dimension::ndindex::NdIndex::index_checked","value":"pub fn index_checked(&Self, &E, &E) -> Option<isize>","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134687,"byte_end":134702,"line_start":28,"line_end":28,"column_start":8,"column_end":23},"name":"index_unchecked","qualname":"::dimension::ndindex::NdIndex::index_unchecked","value":"pub fn index_unchecked(&Self, &E) -> isize","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":879},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141637,"byte_end":141647,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"name":"RemoveAxis","qualname":"::dimension::remove_axis::RemoveAxis","value":"RemoveAxis: Dimension","parent":null,"children":[{"krate":0,"index":880}],"decl_id":null,"docs":" Array shape with a next smaller dimension.","sig":null,"attributes":[{"value":"/ Array shape with a next smaller dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141441,"byte_end":141487,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141488,"byte_end":141491,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ `RemoveAxis` defines a larger-than relation for array shapes:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141492,"byte_end":141557,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ removing one axis from *Self* gives smaller dimension *Smaller*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141558,"byte_end":141626,"line_start":15,"line_end":15,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141669,"byte_end":141680,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"remove_axis","qualname":"::dimension::remove_axis::RemoveAxis::remove_axis","value":"pub fn remove_axis(&Self, Axis) -> Self::Smaller","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3376},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143799,"byte_end":143803,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Axes","qualname":"::dimension::axes::Axes","value":"Axes {  }","parent":null,"children":[{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382}],"decl_id":null,"docs":" An iterator over the length and stride of each axis of an array.","sig":null,"attributes":[{"value":"/ An iterator over the length and stride of each axis of an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143262,"byte_end":143330,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143331,"byte_end":143334,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`.axes()`](../struct.ArrayBase.html#method.axes) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143335,"byte_end":143414,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143415,"byte_end":143418,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `AxisDescription`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143419,"byte_end":143466,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143467,"byte_end":143470,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143471,"byte_end":143485,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143486,"byte_end":143489,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143490,"byte_end":143497,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use ndarray::Array3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143498,"byte_end":143522,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/ use ndarray::Axis;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143523,"byte_end":143545,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143546,"byte_end":143549,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let a = Array3::<f32>::zeros((3, 5, 4));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143550,"byte_end":143594,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143595,"byte_end":143598,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let largest_axis = a.axes()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143599,"byte_end":143630,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/                     .max_by_key(|ax| ax.len())","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143631,"byte_end":143681,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/                     .unwrap().axis();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143682,"byte_end":143723,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(largest_axis, Axis(1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143724,"byte_end":143762,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143763,"byte_end":143770,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3387},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143974,"byte_end":143989,"line_start":45,"line_end":45,"column_start":12,"column_end":27},"name":"AxisDescription","qualname":"::dimension::axes::AxisDescription","value":"","parent":null,"children":[],"decl_id":null,"docs":" Description of the axis, its length and its stride.\n","sig":null,"attributes":[{"value":"/ Description of the axis, its length and its stride.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143890,"byte_end":143945,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3389},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":143990,"byte_end":143998,"line_start":45,"line_end":45,"column_start":28,"column_end":36},"name":"0","qualname":"::dimension::axes::AxisDescription::0","value":"dimension::axis::Axis","parent":{"krate":0,"index":3387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3390},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144000,"byte_end":144006,"line_start":45,"line_end":45,"column_start":38,"column_end":44},"name":"1","qualname":"::dimension::axes::AxisDescription::1","value":"usize","parent":{"krate":0,"index":3387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3391},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144008,"byte_end":144015,"line_start":45,"line_end":45,"column_start":46,"column_end":53},"name":"2","qualname":"::dimension::axes::AxisDescription::2","value":"isize","parent":{"krate":0,"index":3387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144130,"byte_end":144134,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"axis","qualname":"<AxisDescription>::axis","value":"pub fn axis(Self) -> Axis","parent":null,"children":[],"decl_id":null,"docs":" Return axis\n","sig":null,"attributes":[{"value":"/ Return axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144081,"byte_end":144096,"line_start":50,"line_end":50,"column_start":5,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144101,"byte_end":144118,"line_start":51,"line_end":51,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144215,"byte_end":144218,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"len","qualname":"<AxisDescription>::len","value":"pub fn len(Self) -> Ix","parent":null,"children":[],"decl_id":null,"docs":" Return length\n","sig":null,"attributes":[{"value":"/ Return length","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144164,"byte_end":144181,"line_start":53,"line_end":53,"column_start":5,"column_end":22}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144186,"byte_end":144203,"line_start":54,"line_end":54,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144297,"byte_end":144303,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"stride","qualname":"<AxisDescription>::stride","value":"pub fn stride(Self) -> Ixs","parent":null,"children":[],"decl_id":null,"docs":" Return stride\n","sig":null,"attributes":[{"value":"/ Return stride","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144246,"byte_end":144263,"line_start":56,"line_end":56,"column_start":5,"column_end":22}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144268,"byte_end":144285,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":967},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147288,"byte_end":147292,"line_start":55,"line_end":55,"column_start":8,"column_end":12},"name":"arr0","qualname":"::free_functions::arr0","value":"pub fn arr0<A>(A) -> Array0<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-dimensional array with the element `x`.\n","sig":null,"attributes":[{"value":"/ Create a zero-dimensional array with the element `x`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147223,"byte_end":147280,"line_start":54,"line_end":54,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":969},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147451,"byte_end":147455,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"arr1","qualname":"::free_functions::arr1","value":"pub fn arr1<A: Clone>(&[A]) -> Array1<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array with elements from `xs`.\n","sig":null,"attributes":[{"value":"/ Create a one-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147384,"byte_end":147443,"line_start":60,"line_end":60,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":971},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147598,"byte_end":147604,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"rcarr1","qualname":"::free_functions::rcarr1","value":"pub fn rcarr1<A: Clone>(&[A]) -> ArcArray<A, Ix1>","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array with elements from `xs`.\n","sig":null,"attributes":[{"value":"/ Create a one-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147531,"byte_end":147590,"line_start":65,"line_end":65,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":973},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147740,"byte_end":147746,"line_start":71,"line_end":71,"column_start":8,"column_end":14},"name":"aview0","qualname":"::free_functions::aview0","value":"pub fn aview0<A>(&A) -> ArrayView0<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-dimensional array view borrowing `x`.\n","sig":null,"attributes":[{"value":"/ Create a zero-dimensional array view borrowing `x`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147677,"byte_end":147732,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148135,"byte_end":148141,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"aview1","qualname":"::free_functions::aview1","value":"pub fn aview1<A>(&[A]) -> ArrayView1<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array view with elements borrowing `xs`.","sig":null,"attributes":[{"value":"/ Create a one-dimensional array view with elements borrowing `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147830,"byte_end":147899,"line_start":75,"line_end":75,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147900,"byte_end":147903,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147904,"byte_end":147911,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use ndarray::aview1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147912,"byte_end":147936,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147937,"byte_end":147940,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let data = [1.0; 1024];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147941,"byte_end":147968,"line_start":80,"line_end":80,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147969,"byte_end":147972,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Create a 2D array view from borrowed data","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":147973,"byte_end":148021,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"/ let a2d = aview1(&data).into_shape((32, 32)).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148022,"byte_end":148080,"line_start":83,"line_end":83,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148081,"byte_end":148084,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a2d.sum(), 1024.0);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148085,"byte_end":148119,"line_start":85,"line_end":85,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148120,"byte_end":148127,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":977},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148406,"byte_end":148412,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"aview2","qualname":"::free_functions::aview2","value":"pub fn aview2<A, V: FixedInitializer<Elem = A>>(&[V]) -> ArrayView2<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a two-dimensional array view with elements borrowing `xs`.","sig":null,"attributes":[{"value":"/ Create a two-dimensional array view with elements borrowing `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148201,"byte_end":148270,"line_start":91,"line_end":91,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148271,"byte_end":148274,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`. (This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148275,"byte_end":148354,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ can only occur when `V` is zero-sized.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":148355,"byte_end":148398,"line_start":94,"line_end":94,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":980},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149818,"byte_end":149828,"line_start":133,"line_end":133,"column_start":8,"column_end":18},"name":"aview_mut1","qualname":"::free_functions::aview_mut1","value":"pub fn aview_mut1<A>(&mut [A]) -> ArrayViewMut1<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional read-write array view with elements borrowing `xs`.","sig":null,"attributes":[{"value":"/ Create a one-dimensional read-write array view with elements borrowing `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149289,"byte_end":149369,"line_start":115,"line_end":115,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149370,"byte_end":149373,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149374,"byte_end":149381,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ #[macro_use(s)]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149382,"byte_end":149401,"line_start":118,"line_end":118,"column_start":1,"column_end":20}},{"value":"/ extern crate ndarray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149402,"byte_end":149427,"line_start":119,"line_end":119,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149428,"byte_end":149431,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ use ndarray::aview_mut1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149432,"byte_end":149460,"line_start":121,"line_end":121,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149461,"byte_end":149464,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ // Create an array view over some data, then slice it and modify it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149465,"byte_end":149537,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ fn main() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149538,"byte_end":149553,"line_start":124,"line_end":124,"column_start":1,"column_end":16}},{"value":"/     let mut data = [0; 1024];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149554,"byte_end":149587,"line_start":125,"line_end":125,"column_start":1,"column_end":34}},{"value":"/     {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149588,"byte_end":149597,"line_start":126,"line_end":126,"column_start":1,"column_end":10}},{"value":"/         let mut a = aview_mut1(&mut data).into_shape((32, 32)).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149598,"byte_end":149674,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/         a.slice_mut(s![.., ..;3]).fill(5);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149675,"byte_end":149721,"line_start":128,"line_end":128,"column_start":1,"column_end":47}},{"value":"/     }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149722,"byte_end":149731,"line_start":129,"line_end":129,"column_start":1,"column_end":10}},{"value":"/     assert_eq!(&data[..10], [5, 0, 0, 5, 0, 0, 5, 0, 0, 5]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149732,"byte_end":149796,"line_start":130,"line_end":130,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149797,"byte_end":149802,"line_start":131,"line_end":131,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149803,"byte_end":149810,"line_start":132,"line_end":132,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":982},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150757,"byte_end":150767,"line_start":162,"line_end":162,"column_start":8,"column_end":18},"name":"aview_mut2","qualname":"::free_functions::aview_mut2","value":"pub fn aview_mut2<A, V: FixedInitializer<Elem = A>>(&mut [V])\n-> ArrayViewMut2<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a two-dimensional read-write array view with elements borrowing `xs`.","sig":null,"attributes":[{"value":"/ Create a two-dimensional read-write array view with elements borrowing `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149898,"byte_end":149978,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149979,"byte_end":149982,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`. (This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":149983,"byte_end":150062,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ can only occur when `V` is zero-sized.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150063,"byte_end":150106,"line_start":140,"line_end":140,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150107,"byte_end":150110,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150111,"byte_end":150124,"line_start":142,"line_end":142,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150125,"byte_end":150128,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150129,"byte_end":150136,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use ndarray::aview_mut2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150137,"byte_end":150165,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150166,"byte_end":150169,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150170,"byte_end":150185,"line_start":147,"line_end":147,"column_start":1,"column_end":16}},{"value":"/     // The inner (nested) array must be of length 1 to 16, but the outer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150186,"byte_end":150262,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/     // can be of any length.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150263,"byte_end":150295,"line_start":149,"line_end":149,"column_start":1,"column_end":33}},{"value":"/     let mut data = [[0.; 2]; 128];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150296,"byte_end":150334,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/     {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150335,"byte_end":150344,"line_start":151,"line_end":151,"column_start":1,"column_end":10}},{"value":"/         // Make a 128 x 2 mut array view then turn it into 2 x 128","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150345,"byte_end":150415,"line_start":152,"line_end":152,"column_start":1,"column_end":71}},{"value":"/         let mut a = aview_mut2(&mut data).reversed_axes();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150416,"byte_end":150478,"line_start":153,"line_end":153,"column_start":1,"column_end":63}},{"value":"/         // Make the first row ones and second row minus ones.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150479,"byte_end":150544,"line_start":154,"line_end":154,"column_start":1,"column_end":66}},{"value":"/         a.row_mut(0).fill(1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150545,"byte_end":150579,"line_start":155,"line_end":155,"column_start":1,"column_end":35}},{"value":"/         a.row_mut(1).fill(-1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150580,"byte_end":150615,"line_start":156,"line_end":156,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150616,"byte_end":150625,"line_start":157,"line_end":157,"column_start":1,"column_end":10}},{"value":"/     // look at the start of the result","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150626,"byte_end":150668,"line_start":158,"line_end":158,"column_start":1,"column_end":43}},{"value":"/     assert_eq!(&data[..3], [[1., -1.], [1., -1.], [1., -1.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150669,"byte_end":150735,"line_start":159,"line_end":159,"column_start":1,"column_end":67}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150736,"byte_end":150741,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":150742,"byte_end":150749,"line_start":161,"line_end":161,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":985},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":151732,"byte_end":151748,"line_start":183,"line_end":183,"column_start":18,"column_end":34},"name":"FixedInitializer","qualname":"::free_functions::FixedInitializer","value":"FixedInitializer","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988}],"decl_id":null,"docs":" Fixed-size array used for array initialization\n","sig":null,"attributes":[{"value":"/ Fixed-size array used for array initialization","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":151664,"byte_end":151714,"line_start":182,"line_end":182,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":986},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":151760,"byte_end":151764,"line_start":184,"line_end":184,"column_start":10,"column_end":14},"name":"Elem","qualname":"::free_functions::FixedInitializer::Elem","value":"type Elem;","parent":{"krate":0,"index":985},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":151773,"byte_end":151786,"line_start":185,"line_end":185,"column_start":8,"column_end":21},"name":"as_init_slice","qualname":"::free_functions::FixedInitializer::as_init_slice","value":"pub fn as_init_slice(&Self) -> &[Self::Elem]","parent":{"krate":0,"index":985},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":151819,"byte_end":151822,"line_start":186,"line_end":186,"column_start":8,"column_end":11},"name":"len","qualname":"::free_functions::FixedInitializer::len","value":"pub fn len() -> usize","parent":{"krate":0,"index":985},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":990},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152882,"byte_end":152886,"line_start":223,"line_end":223,"column_start":8,"column_end":12},"name":"arr2","qualname":"::free_functions::arr2","value":"pub fn arr2<A: Clone, V: FixedInitializer<Elem = A>>(&[V]) -> Array2<A> where\nV: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a two-dimensional array with elements from `xs`.","sig":null,"attributes":[{"value":"/ Create a two-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152658,"byte_end":152717,"line_start":212,"line_end":212,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152718,"byte_end":152721,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152722,"byte_end":152729,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152730,"byte_end":152752,"line_start":215,"line_end":215,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152753,"byte_end":152756,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ let a = arr2(&[[1, 2, 3],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152757,"byte_end":152786,"line_start":217,"line_end":217,"column_start":1,"column_end":30}},{"value":"/                [4, 5, 6]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152787,"byte_end":152818,"line_start":218,"line_end":218,"column_start":1,"column_end":32}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152819,"byte_end":152831,"line_start":219,"line_end":219,"column_start":1,"column_end":13}},{"value":"/     a.shape() == [2, 3]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152832,"byte_end":152859,"line_start":220,"line_end":220,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152860,"byte_end":152866,"line_start":221,"line_end":221,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":152867,"byte_end":152874,"line_start":222,"line_end":222,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155508,"byte_end":155514,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"rcarr2","qualname":"::free_functions::rcarr2","value":"pub fn rcarr2<A: Clone, V: Clone + FixedInitializer<Elem = A>>(&[V])\n-> ArcArray<A, Ix2>","parent":null,"children":[],"decl_id":null,"docs":" Create a two-dimensional array with elements from `xs`.","sig":null,"attributes":[{"value":"/ Create a two-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155437,"byte_end":155496,"line_start":294,"line_end":294,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155497,"byte_end":155500,"line_start":295,"line_end":295,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":156031,"byte_end":156035,"line_start":317,"line_end":317,"column_start":8,"column_end":12},"name":"arr3","qualname":"::free_functions::arr3","value":"pub fn arr3<A: Clone, V: FixedInitializer<Elem = U>, U: FixedInitializer<Elem\n            = A>>(&[V]) -> Array3<A> where V: Clone, U: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a three-dimensional array with elements from `xs`.","sig":null,"attributes":[{"value":"/ Create a three-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155626,"byte_end":155687,"line_start":300,"line_end":300,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155688,"byte_end":155691,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the slices are not all of the same length.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155692,"byte_end":155752,"line_start":302,"line_end":302,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155753,"byte_end":155756,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155757,"byte_end":155764,"line_start":304,"line_end":304,"column_start":1,"column_end":8}},{"value":"/ use ndarray::arr3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155765,"byte_end":155787,"line_start":305,"line_end":305,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155788,"byte_end":155791,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ let a = arr3(&[[[1, 2],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155792,"byte_end":155819,"line_start":307,"line_end":307,"column_start":1,"column_end":28}},{"value":"/                 [3, 4]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155820,"byte_end":155848,"line_start":308,"line_end":308,"column_start":1,"column_end":29}},{"value":"/                [[5, 6],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155849,"byte_end":155876,"line_start":309,"line_end":309,"column_start":1,"column_end":28}},{"value":"/                 [7, 8]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155877,"byte_end":155905,"line_start":310,"line_end":310,"column_start":1,"column_end":29}},{"value":"/                [[9, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155906,"byte_end":155933,"line_start":311,"line_end":311,"column_start":1,"column_end":28}},{"value":"/                 [1, 2]]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155934,"byte_end":155964,"line_start":312,"line_end":312,"column_start":1,"column_end":31}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155965,"byte_end":155977,"line_start":313,"line_end":313,"column_start":1,"column_end":13}},{"value":"/     a.shape() == [3, 2, 2]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":155978,"byte_end":156008,"line_start":314,"line_end":314,"column_start":1,"column_end":31}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":156009,"byte_end":156015,"line_start":315,"line_end":315,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":156016,"byte_end":156023,"line_start":316,"line_end":316,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":156275,"byte_end":156281,"line_start":326,"line_end":326,"column_start":8,"column_end":14},"name":"rcarr3","qualname":"::free_functions::rcarr3","value":"pub fn rcarr3<A: Clone, V: FixedInitializer<Elem = U>,\n              U: FixedInitializer<Elem = A>>(&[V]) -> ArcArray<A, Ix3> where\nV: Clone, U: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create a three-dimensional array with elements from `xs`.\n","sig":null,"attributes":[{"value":"/ Create a three-dimensional array with elements from `xs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":156206,"byte_end":156267,"line_start":325,"line_end":325,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3509},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157871,"byte_end":157876,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Slice","qualname":"::slice::Slice","value":"Slice { start, end, step }","parent":null,"children":[{"krate":0,"index":3510},{"krate":0,"index":3511},{"krate":0,"index":3512}],"decl_id":null,"docs":" A slice (range with step size).","sig":null,"attributes":[{"value":"/ A slice (range with step size).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157000,"byte_end":157035,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157036,"byte_end":157039,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `end` is an exclusive index. Negative `begin` or `end` indexes are counted","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157040,"byte_end":157118,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ from the back of the axis. If `end` is `None`, the slice extends to the end","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157119,"byte_end":157198,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ of the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157199,"byte_end":157215,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157216,"byte_end":157219,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ See also the [`s![]`](macro.s.html) macro.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157220,"byte_end":157266,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157267,"byte_end":157270,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157271,"byte_end":157286,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157287,"byte_end":157290,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `Slice::new(0, None, 1)` is the full range of an axis. It can also be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157291,"byte_end":157364,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ created with `Slice::from(..)`. The Python equivalent is `[:]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157365,"byte_end":157432,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157433,"byte_end":157436,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ `Slice::new(a, b, 2)` is every second element from `a` until `b`. It can","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157437,"byte_end":157513,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ also be created with `Slice::from(a..b).step_by(2)`. The Python equivalent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157514,"byte_end":157592,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ is `[a:b:2]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157593,"byte_end":157610,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157611,"byte_end":157614,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ `Slice::new(a, None, -1)` is every element, from `a` until the end, in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157615,"byte_end":157689,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/ reverse order. It can also be created with `Slice::from(a..).step_by(-1)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157690,"byte_end":157768,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ The Python equivalent is `[a::-1]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157769,"byte_end":157808,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3510},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157887,"byte_end":157892,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"start","qualname":"::slice::Slice::start","value":"isize","parent":{"krate":0,"index":3509},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3511},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157909,"byte_end":157912,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"end","qualname":"::slice::Slice::end","value":"std::option::Option<isize>","parent":{"krate":0,"index":3509},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3512},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157937,"byte_end":157941,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"name":"step","qualname":"::slice::Slice::step","value":"isize","parent":{"krate":0,"index":3509},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158277,"byte_end":158280,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Slice>::new","value":"pub fn new(isize, Option<isize>, isize) -> Slice","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` with the given extents.","sig":null,"attributes":[{"value":"/ Create a new `Slice` with the given extents.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157970,"byte_end":158018,"line_start":42,"line_end":42,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158023,"byte_end":158026,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ See also the `From` impls, converting from ranges; for example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158031,"byte_end":158097,"line_start":44,"line_end":44,"column_start":5,"column_end":71}},{"value":"/ `Slice::from(i..)` or `Slice::from(j..k)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158102,"byte_end":158148,"line_start":45,"line_end":45,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158153,"byte_end":158156,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ `step` must be nonzero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158161,"byte_end":158188,"line_start":47,"line_end":47,"column_start":5,"column_end":32}},{"value":"/ (This method checks with a debug assertion that `step` is not zero.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158193,"byte_end":158265,"line_start":48,"line_end":48,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158743,"byte_end":158750,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"step_by","qualname":"<Slice>::step_by","value":"pub fn step_by(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` with the given step size (multiplied with the\n previous step size).","sig":null,"attributes":[{"value":"/ Create a new `Slice` with the given step size (multiplied with the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158501,"byte_end":158571,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ previous step size).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158576,"byte_end":158600,"line_start":59,"line_end":59,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158605,"byte_end":158608,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ `step` must be nonzero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158613,"byte_end":158640,"line_start":61,"line_end":61,"column_start":5,"column_end":32}},{"value":"/ (This method checks with a debug assertion that `step` is not zero.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158645,"byte_end":158717,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158722,"byte_end":158731,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"StructVariant","id":{"krate":0,"index":3529},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160316,"byte_end":160321,"line_start":99,"line_end":99,"column_start":5,"column_end":10},"name":"Slice","qualname":"::slice::SliceOrIndex::Slice","value":"SliceOrIndex::Slice { start, end, step }","parent":{"krate":0,"index":3528},"children":[],"decl_id":null,"docs":" A range with step size. `end` is an exclusive index. Negative `begin`\n or `end` indexes are counted from the back of the axis. If `end` is\n `None`, the slice extends to the end of the axis.\n","sig":null,"attributes":[{"value":"/ A range with step size. `end` is an exclusive index. Negative `begin`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160104,"byte_end":160177,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ or `end` indexes are counted from the back of the axis. If `end` is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160182,"byte_end":160253,"line_start":97,"line_end":97,"column_start":5,"column_end":76}},{"value":"/ `None`, the slice extends to the end of the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160258,"byte_end":160311,"line_start":98,"line_end":98,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3533},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160430,"byte_end":160435,"line_start":105,"line_end":105,"column_start":5,"column_end":10},"name":"Index","qualname":"::slice::SliceOrIndex::Index","value":"SliceOrIndex::Index(isize)","parent":{"krate":0,"index":3528},"children":[],"decl_id":null,"docs":" A single index.\n","sig":null,"attributes":[{"value":"/ A single index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160406,"byte_end":160425,"line_start":104,"line_end":104,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":3528},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160085,"byte_end":160097,"line_start":95,"line_end":95,"column_start":10,"column_end":22},"name":"SliceOrIndex","qualname":"::slice::SliceOrIndex","value":"pub enum SliceOrIndex {\n\n    /// A range with step size. `end` is an exclusive index. Negative `begin`\n    /// or `end` indexes are counted from the back of the axis. If `end` is\n    /// `None`, the slice extends to the end of the axis.\n    Slice {\n        start: isize,\n        end: Option<isize>,\n        step: isize,\n    },\n\n    /// A single index.\n    Index(isize),\n}","parent":null,"children":[{"krate":0,"index":3529},{"krate":0,"index":3533}],"decl_id":null,"docs":" A slice (range with step) or an index.","sig":null,"attributes":[{"value":"/ A slice (range with step) or an index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158913,"byte_end":158955,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158956,"byte_end":158959,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ See also the [`s![]`](macro.s!.html) macro for a convenient way to create a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":158960,"byte_end":159039,"line_start":72,"line_end":72,"column_start":1,"column_end":80}},{"value":"/ `&SliceInfo<[SliceOrIndex; n], D>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159040,"byte_end":159079,"line_start":73,"line_end":73,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159080,"byte_end":159083,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159084,"byte_end":159099,"line_start":75,"line_end":75,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159100,"byte_end":159103,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ `SliceOrIndex::Index(a)` is the index `a`. It can also be created with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159104,"byte_end":159178,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ `SliceOrIndex::from(a)`. The Python equivalent is `[a]`. The macro","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159179,"byte_end":159249,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/ equivalent is `s![a]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159250,"byte_end":159276,"line_start":79,"line_end":79,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159277,"byte_end":159280,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ `SliceOrIndex::Slice { start: 0, end: None, step: 1 }` is the full range of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159281,"byte_end":159360,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ an axis. It can also be created with `SliceOrIndex::from(..)`. The Python","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159361,"byte_end":159438,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ equivalent is `[:]`. The macro equivalent is `s![..]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159439,"byte_end":159497,"line_start":83,"line_end":83,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159498,"byte_end":159501,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ `SliceOrIndex::Slice { start: a, end: Some(b), step: 2 }` is every second","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159502,"byte_end":159579,"line_start":85,"line_end":85,"column_start":1,"column_end":78}},{"value":"/ element from `a` until `b`. It can also be created with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159580,"byte_end":159639,"line_start":86,"line_end":86,"column_start":1,"column_end":60}},{"value":"/ `SliceOrIndex::from(a..b).step_by(2)`. The Python equivalent is `[a:b:2]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159640,"byte_end":159718,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/ The macro equivalent is `s![a..b;2]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159719,"byte_end":159760,"line_start":88,"line_end":88,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159761,"byte_end":159764,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ `SliceOrIndex::Slice { start: a, end: None, step: -1 }` is every element,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159765,"byte_end":159842,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ from `a` until the end, in reverse order. It can also be created with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159843,"byte_end":159916,"line_start":91,"line_end":91,"column_start":1,"column_end":74}},{"value":"/ `SliceOrIndex::from(a..).step_by(-1)`. The Python equivalent is `[a::-1]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159917,"byte_end":159995,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/ The macro equivalent is `s![a..;-1]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":159996,"byte_end":160037,"line_start":93,"line_end":93,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160562,"byte_end":160570,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"is_slice","qualname":"<SliceOrIndex>::is_slice","value":"pub fn is_slice(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` is a `Slice` value.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is a `Slice` value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160502,"byte_end":160550,"line_start":111,"line_end":111,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160764,"byte_end":160772,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"is_index","qualname":"<SliceOrIndex>::is_index","value":"pub fn is_index(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` is an `Index` value.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is an `Index` value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160703,"byte_end":160752,"line_start":119,"line_end":119,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161151,"byte_end":161158,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"step_by","qualname":"<SliceOrIndex>::step_by","value":"pub fn step_by(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `SliceOrIndex` with the given step size (multiplied with\n the previous step size).","sig":null,"attributes":[{"value":"/ Returns a new `SliceOrIndex` with the given step size (multiplied with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160901,"byte_end":160975,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/ the previous step size).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160980,"byte_end":161008,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161013,"byte_end":161016,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ `step` must be nonzero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161021,"byte_end":161048,"line_start":130,"line_end":130,"column_start":5,"column_end":32}},{"value":"/ (This method checks with a debug assertion that `step` is not zero.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161053,"byte_end":161125,"line_start":131,"line_end":131,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161130,"byte_end":161139,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3617},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165737,"byte_end":165746,"line_start":294,"line_end":294,"column_start":12,"column_end":21},"name":"SliceInfo","qualname":"::slice::SliceInfo","value":"SliceInfo {  }","parent":null,"children":[{"krate":0,"index":3620},{"krate":0,"index":3621}],"decl_id":null,"docs":" Represents all of the necessary information to perform a slice.","sig":null,"attributes":[{"value":"/ Represents all of the necessary information to perform a slice.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165403,"byte_end":165470,"line_start":285,"line_end":285,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165471,"byte_end":165474,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The type `T` is typically `[SliceOrIndex; n]`, `[SliceOrIndex]`, or","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165475,"byte_end":165546,"line_start":287,"line_end":287,"column_start":1,"column_end":72}},{"value":"/ `Vec<SliceOrIndex>`. The type `D` is the output dimension after calling","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165547,"byte_end":165622,"line_start":288,"line_end":288,"column_start":1,"column_end":76}},{"value":"/ [`.slice()`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165623,"byte_end":165640,"line_start":289,"line_end":289,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165641,"byte_end":165644,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ [`.slice()`]: struct.ArrayBase.html#method.slice","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165645,"byte_end":165697,"line_start":291,"line_end":291,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165715,"byte_end":165725,"line_start":293,"line_end":293,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166233,"byte_end":166246,"line_start":318,"line_end":318,"column_start":19,"column_end":32},"name":"new_unchecked","qualname":"<SliceInfo<T, D>>::new_unchecked","value":"pub unsafe fn new_unchecked(T, PhantomData<D>) -> SliceInfo<T, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `SliceInfo` instance.","sig":null,"attributes":[{"value":"/ Returns a new `SliceInfo` instance.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166041,"byte_end":166080,"line_start":313,"line_end":313,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166085,"byte_end":166088,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ If you call this method, you are guaranteeing that `out_dim` is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166093,"byte_end":166160,"line_start":315,"line_end":315,"column_start":5,"column_end":72}},{"value":"/ consistent with `indices`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166165,"byte_end":166195,"line_start":316,"line_end":316,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166606,"byte_end":166609,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceInfo<T, D>>::new","value":"pub fn new(T) -> Result<SliceInfo<T, D>, ShapeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `SliceInfo` instance.","sig":null,"attributes":[{"value":"/ Returns a new `SliceInfo` instance.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166491,"byte_end":166530,"line_start":331,"line_end":331,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166535,"byte_end":166538,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Errors if `D` is not consistent with `indices`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166543,"byte_end":166594,"line_start":333,"line_end":333,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167437,"byte_end":167445,"line_start":359,"line_end":359,"column_start":12,"column_end":20},"name":"out_ndim","qualname":"<SliceInfo<T, D>>::out_ndim","value":"pub fn out_ndim(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of dimensions after calling\n [`.slice()`](struct.ArrayBase.html#method.slice) (including taking\n subviews).","sig":null,"attributes":[{"value":"/ Returns the number of dimensions after calling","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167090,"byte_end":167140,"line_start":352,"line_end":352,"column_start":5,"column_end":55}},{"value":"/ [`.slice()`](struct.ArrayBase.html#method.slice) (including taking","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167145,"byte_end":167215,"line_start":353,"line_end":353,"column_start":5,"column_end":75}},{"value":"/ subviews).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167220,"byte_end":167234,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167239,"byte_end":167242,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If `D` is a fixed-size dimension type, then this is equivalent to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167247,"byte_end":167316,"line_start":356,"line_end":356,"column_start":5,"column_end":74}},{"value":"/ `D::NDIM.unwrap()`. Otherwise, the value is calculated by iterating","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167321,"byte_end":167392,"line_start":357,"line_end":357,"column_start":5,"column_end":76}},{"value":"/ over the ranges/indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167397,"byte_end":167425,"line_start":358,"line_end":358,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168754,"byte_end":168766,"line_start":419,"line_end":419,"column_start":11,"column_end":23},"name":"SliceNextDim","qualname":"::slice::SliceNextDim","value":"SliceNextDim<D1, D2>","parent":null,"children":[{"krate":0,"index":1088}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168784,"byte_end":168792,"line_start":420,"line_end":420,"column_start":8,"column_end":16},"name":"next_dim","qualname":"::slice::SliceNextDim::next_dim","value":"pub fn next_dim(&Self, PhantomData<D1>) -> PhantomData<D2>","parent":{"krate":0,"index":1085},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3663},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":176466,"byte_end":176472,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Layout","qualname":"::layout::Layout","value":"","parent":null,"children":[],"decl_id":null,"docs":" Memory layout description\n","sig":null,"attributes":[{"value":"/ Memory layout description","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":176402,"byte_end":176431,"line_start":6,"line_end":6,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177070,"byte_end":177085,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"one_dimensional","qualname":"<Layout>::one_dimensional","value":"pub fn one_dimensional() -> Layout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177041,"byte_end":177058,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177190,"byte_end":177191,"line_start":44,"line_end":44,"column_start":12,"column_end":13},"name":"c","qualname":"<Layout>::c","value":"pub fn c() -> Layout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177161,"byte_end":177178,"line_start":43,"line_end":43,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177287,"byte_end":177288,"line_start":49,"line_end":49,"column_start":12,"column_end":13},"name":"f","qualname":"<Layout>::f","value":"pub fn f() -> Layout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177258,"byte_end":177275,"line_start":48,"line_end":48,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177384,"byte_end":177388,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"none","qualname":"<Layout>::none","value":"pub fn none() -> Layout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177336,"byte_end":177353,"line_start":52,"line_end":52,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":3669},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179166,"byte_end":179177,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"IndicesIter","qualname":"::indexes::IndicesIter","value":"IndicesIter {  }","parent":null,"children":[{"krate":0,"index":3671},{"krate":0,"index":3672}],"decl_id":null,"docs":" An iterator over the indexes of an array shape.","sig":null,"attributes":[{"value":"/ An iterator over the indexes of an array shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179048,"byte_end":179099,"line_start":16,"line_end":16,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179100,"byte_end":179103,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `D`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179104,"byte_end":179137,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179397,"byte_end":179404,"line_start":29,"line_end":29,"column_start":8,"column_end":15},"name":"indices","qualname":"::indexes::indices","value":"pub fn indices<E>(E) -> Indices<E::Dim> where E: IntoDimension","parent":null,"children":[],"decl_id":null,"docs":" Create an iterable of the array shape `shape`.","sig":null,"attributes":[{"value":"/ Create an iterable of the array shape `shape`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179220,"byte_end":179270,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179271,"byte_end":179274,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ *Note:* prefer higher order methods, arithmetic operations and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179275,"byte_end":179341,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ non-indexed iteration before using indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179342,"byte_end":179389,"line_start":28,"line_end":28,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179776,"byte_end":179786,"line_start":43,"line_end":43,"column_start":8,"column_end":18},"name":"indices_of","qualname":"::indexes::indices_of","value":"pub fn indices_of<S, D>(&ArrayBase<S, D>) -> Indices<D> where S: Data,\nD: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Return an iterable of the indices of the passed-in array.","sig":null,"attributes":[{"value":"/ Return an iterable of the indices of the passed-in array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179588,"byte_end":179649,"line_start":39,"line_end":39,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179650,"byte_end":179653,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ *Note:* prefer higher order methods, arithmetic operations and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179654,"byte_end":179720,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/ non-indexed iteration before using indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179721,"byte_end":179768,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":3676},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181397,"byte_end":181404,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"Indices","qualname":"::indexes::Indices","value":"Indices {  }","parent":null,"children":[{"krate":0,"index":3678},{"krate":0,"index":3679}],"decl_id":null,"docs":" Indices producer and iterable.","sig":null,"attributes":[{"value":"/ Indices producer and iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181239,"byte_end":181273,"line_start":99,"line_end":99,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181274,"byte_end":181277,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Indices` is an `NdProducer` that produces the indices of an array shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181278,"byte_end":181355,"line_start":101,"line_end":101,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":3688},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181503,"byte_end":181511,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"IndexPtr","qualname":"::indexes::IndexPtr","value":"IndexPtr {  }","parent":null,"children":[{"krate":0,"index":3690}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224166,"byte_end":224177,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"ExactChunks","qualname":"::iterators::chunks::ExactChunks","value":"ExactChunks {  }","parent":null,"children":[{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205}],"decl_id":null,"docs":" Exact chunks producer and iterable.","sig":null,"attributes":[{"value":"/ Exact chunks producer and iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":223992,"byte_end":224031,"line_start":30,"line_end":30,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224032,"byte_end":224035,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ See [`.exact_chunks()`](../struct.ArrayBase.html#method.exact_chunks) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224036,"byte_end":224118,"line_start":32,"line_end":32,"column_start":1,"column_end":83}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224119,"byte_end":224135,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225661,"byte_end":225676,"line_start":87,"line_end":87,"column_start":12,"column_end":27},"name":"ExactChunksIter","qualname":"::iterators::chunks::ExactChunksIter","value":"ExactChunksIter {  }","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225}],"decl_id":null,"docs":" Exact chunks iterator.","sig":null,"attributes":[{"value":"/ Exact chunks iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225519,"byte_end":225545,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225546,"byte_end":225549,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ See [`.exact_chunks()`](../struct.ArrayBase.html#method.exact_chunks) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225550,"byte_end":225632,"line_start":85,"line_end":85,"column_start":1,"column_end":83}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225633,"byte_end":225649,"line_start":86,"line_end":86,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1226},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226388,"byte_end":226402,"line_start":118,"line_end":118,"column_start":12,"column_end":26},"name":"ExactChunksMut","qualname":"::iterators::chunks::ExactChunksMut","value":"ExactChunksMut {  }","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"decl_id":null,"docs":" Exact chunks producer and iterable.","sig":null,"attributes":[{"value":"/ Exact chunks producer and iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226206,"byte_end":226245,"line_start":113,"line_end":113,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226246,"byte_end":226249,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ See [`.exact_chunks_mut()`](../struct.ArrayBase.html#method.exact_chunks_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226250,"byte_end":226331,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226332,"byte_end":226357,"line_start":116,"line_end":116,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1246},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":228832,"byte_end":228850,"line_start":215,"line_end":215,"column_start":12,"column_end":30},"name":"ExactChunksIterMut","qualname":"::iterators::chunks::ExactChunksIterMut","value":"ExactChunksIterMut {  }","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252}],"decl_id":null,"docs":" Exact chunks iterator.","sig":null,"attributes":[{"value":"/ Exact chunks iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":228682,"byte_end":228708,"line_start":211,"line_end":211,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":228709,"byte_end":228712,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ See [`.exact_chunks_mut()`](../struct.ArrayBase.html#method.exact_chunks_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":228713,"byte_end":228794,"line_start":213,"line_end":213,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":228795,"byte_end":228820,"line_start":214,"line_end":214,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229175,"byte_end":229182,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Windows","qualname":"::iterators::windows::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"decl_id":null,"docs":" Window producer and iterable","sig":null,"attributes":[{"value":"/ Window producer and iterable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229037,"byte_end":229069,"line_start":8,"line_end":8,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229070,"byte_end":229073,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.windows()`](../struct.ArrayBase.html#method.windows) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229074,"byte_end":229146,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229147,"byte_end":229163,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":231211,"byte_end":231222,"line_start":85,"line_end":85,"column_start":12,"column_end":23},"name":"WindowsIter","qualname":"::iterators::windows::WindowsIter","value":"WindowsIter {  }","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285}],"decl_id":null,"docs":" Window iterator.","sig":null,"attributes":[{"value":"/ Window iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":231085,"byte_end":231105,"line_start":81,"line_end":81,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":231106,"byte_end":231109,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ See [`.windows()`](../struct.ArrayBase.html#method.windows) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":231110,"byte_end":231182,"line_start":83,"line_end":83,"column_start":1,"column_end":73}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":231183,"byte_end":231199,"line_start":84,"line_end":84,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":232350,"byte_end":232355,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Lanes","qualname":"::iterators::lanes::Lanes","value":"Lanes {  }","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300}],"decl_id":null,"docs":" See [`.lanes()`](../struct.ArrayBase.html#method.lanes)\n for more information.\n","sig":null,"attributes":[{"value":"/ See [`.lanes()`](../struct.ArrayBase.html#method.lanes)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":232253,"byte_end":232312,"line_start":26,"line_end":26,"column_start":1,"column_end":60}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":232313,"byte_end":232338,"line_start":27,"line_end":27,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1314},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":234006,"byte_end":234014,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"LanesMut","qualname":"::iterators::lanes::LanesMut","value":"LanesMut {  }","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320}],"decl_id":null,"docs":" See [`.lanes_mut()`](../struct.ArrayBase.html#method.lanes_mut)\n for more information.\n","sig":null,"attributes":[{"value":"/ See [`.lanes_mut()`](../struct.ArrayBase.html#method.lanes_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":233901,"byte_end":233968,"line_start":94,"line_end":94,"column_start":1,"column_end":68}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":233969,"byte_end":233994,"line_start":95,"line_end":95,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1334},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iterators::iter","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":6853},{"krate":0,"index":1344},{"krate":0,"index":6855},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"decl_id":null,"docs":" Producers, iterables and iterators.","sig":null,"attributes":[{"value":"/ Producers, iterables and iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235209,"byte_end":235248,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235249,"byte_end":235252,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ This module collects all concrete producer, iterable and iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235253,"byte_end":235322,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/ implementation structs.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235323,"byte_end":235350,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235351,"byte_end":235354,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235355,"byte_end":235358,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See also [`NdProducer`](../trait.NdProducer.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/iter.rs","byte_start":235359,"byte_end":235413,"line_start":8,"line_end":8,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193361,"byte_end":193365,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1465}],"decl_id":null,"docs":" An iterator over the elements of an array.","sig":null,"attributes":[{"value":"/ An iterator over the elements of an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193177,"byte_end":193223,"line_start":307,"line_end":307,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193224,"byte_end":193227,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `&'a A`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193228,"byte_end":193265,"line_start":309,"line_end":309,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193266,"byte_end":193269,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ See [`.iter()`](../struct.ArrayBase.html#method.iter) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193270,"byte_end":193349,"line_start":311,"line_end":311,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193789,"byte_end":193796,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::iterators::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1476}],"decl_id":null,"docs":" An iterator over the elements of an array (mutable).","sig":null,"attributes":[{"value":"/ An iterator over the elements of an array (mutable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193583,"byte_end":193639,"line_start":322,"line_end":322,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193640,"byte_end":193643,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `&'a mut A`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193644,"byte_end":193685,"line_start":324,"line_end":324,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193686,"byte_end":193689,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ See [`.iter_mut()`](../struct.ArrayBase.html#method.iter_mut) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":193690,"byte_end":193777,"line_start":326,"line_end":326,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":3870},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194497,"byte_end":194508,"line_start":352,"line_end":352,"column_start":12,"column_end":23},"name":"IndexedIter","qualname":"::iterators::IndexedIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the indexes and elements of an array.","sig":null,"attributes":[{"value":"/ An iterator over the indexes and elements of an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194310,"byte_end":194368,"line_start":348,"line_end":348,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194369,"byte_end":194372,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ See [`.indexed_iter()`](../struct.ArrayBase.html#method.indexed_iter) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194373,"byte_end":194468,"line_start":350,"line_end":350,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194736,"byte_end":194750,"line_start":356,"line_end":356,"column_start":12,"column_end":26},"name":"IndexedIterMut","qualname":"::iterators::IndexedIterMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the indexes and elements of an array (mutable).","sig":null,"attributes":[{"value":"/ An iterator over the indexes and elements of an array (mutable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194548,"byte_end":194616,"line_start":353,"line_end":353,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194617,"byte_end":194620,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ See [`.indexed_iter_mut()`](../struct.ArrayBase.html#method.indexed_iter_mut) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194621,"byte_end":194724,"line_start":355,"line_end":355,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1598},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199750,"byte_end":199759,"line_start":556,"line_end":556,"column_start":12,"column_end":21},"name":"LanesIter","qualname":"::iterators::LanesIter","value":"LanesIter {  }","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605}],"decl_id":null,"docs":" An iterator that traverses over all axes but one, and yields a view for\n each lane along that axis.","sig":null,"attributes":[{"value":"/ An iterator that traverses over all axes but one, and yields a view for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199546,"byte_end":199621,"line_start":552,"line_end":552,"column_start":1,"column_end":76}},{"value":"/ each lane along that axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199622,"byte_end":199652,"line_start":553,"line_end":553,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199653,"byte_end":199656,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ See [`.lanes()`](../struct.ArrayBase.html#method.lanes) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199657,"byte_end":199738,"line_start":555,"line_end":555,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1619},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200983,"byte_end":200995,"line_start":606,"line_end":606,"column_start":12,"column_end":24},"name":"LanesIterMut","qualname":"::iterators::LanesIterMut","value":"LanesIterMut {  }","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626}],"decl_id":null,"docs":" An iterator that traverses over all dimensions but the innermost,\n and yields each inner row (mutable).","sig":null,"attributes":[{"value":"/ An iterator that traverses over all dimensions but the innermost,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200763,"byte_end":200832,"line_start":601,"line_end":601,"column_start":1,"column_end":70}},{"value":"/ and yields each inner row (mutable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200833,"byte_end":200873,"line_start":602,"line_end":602,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200874,"byte_end":200877,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ See [`.lanes_mut()`](../struct.ArrayBase.html#method.lanes_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200878,"byte_end":200945,"line_start":604,"line_end":604,"column_start":1,"column_end":68}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200946,"byte_end":200971,"line_start":605,"line_end":605,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3903},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205209,"byte_end":205217,"line_start":767,"line_end":767,"column_start":12,"column_end":20},"name":"AxisIter","qualname":"::iterators::AxisIter","value":"AxisIter {  }","parent":null,"children":[{"krate":0,"index":3907},{"krate":0,"index":3908}],"decl_id":null,"docs":" An iterator that traverses over an axis and\n and yields each subview.","sig":null,"attributes":[{"value":"/ An iterator that traverses over an axis and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204589,"byte_end":204636,"line_start":752,"line_end":752,"column_start":1,"column_end":48}},{"value":"/ and yields each subview.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204637,"byte_end":204665,"line_start":753,"line_end":753,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204666,"byte_end":204669,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ The outermost dimension is `Axis(0)`, created with `.outer_iter()`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204670,"byte_end":204741,"line_start":755,"line_end":755,"column_start":1,"column_end":72}},{"value":"/ but you can traverse arbitrary dimension with `.axis_iter()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204742,"byte_end":204807,"line_start":756,"line_end":756,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204808,"byte_end":204811,"line_start":757,"line_end":757,"column_start":1,"column_end":4}},{"value":"/ For example, in a 3 × 5 × 5 array, with `axis` equal to `Axis(2)`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204812,"byte_end":204884,"line_start":758,"line_end":758,"column_start":1,"column_end":71}},{"value":"/ the iterator element is a 3 × 5 subview (and there are 5 in total).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204885,"byte_end":204957,"line_start":759,"line_end":759,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204958,"byte_end":204961,"line_start":760,"line_end":760,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `ArrayView<'a, A, D>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204962,"byte_end":205013,"line_start":761,"line_end":761,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205014,"byte_end":205017,"line_start":762,"line_end":762,"column_start":1,"column_end":4}},{"value":"/ See [`.outer_iter()`](../struct.ArrayBase.html#method.outer_iter)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205018,"byte_end":205087,"line_start":763,"line_end":763,"column_start":1,"column_end":70}},{"value":"/ or [`.axis_iter()`](../struct.ArrayBase.html#method.axis_iter)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205088,"byte_end":205154,"line_start":764,"line_end":764,"column_start":1,"column_end":67}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205155,"byte_end":205180,"line_start":765,"line_end":765,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205933,"byte_end":205941,"line_start":797,"line_end":797,"column_start":12,"column_end":20},"name":"split_at","qualname":"<AxisIter>::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the iterator at index, yielding two disjoint iterators.","sig":null,"attributes":[{"value":"/ Split the iterator at index, yielding two disjoint iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205771,"byte_end":205836,"line_start":794,"line_end":794,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205841,"byte_end":205844,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is strictly greater than the iterator's length","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205849,"byte_end":205921,"line_start":796,"line_end":796,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1684},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207676,"byte_end":207687,"line_start":864,"line_end":864,"column_start":12,"column_end":23},"name":"AxisIterMut","qualname":"::iterators::AxisIterMut","value":"AxisIterMut {  }","parent":null,"children":[{"krate":0,"index":1688},{"krate":0,"index":1689}],"decl_id":null,"docs":" An iterator that traverses over an axis and\n and yields each subview (mutable)","sig":null,"attributes":[{"value":"/ An iterator that traverses over an axis and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207045,"byte_end":207092,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ and yields each subview (mutable)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207093,"byte_end":207130,"line_start":851,"line_end":851,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207131,"byte_end":207134,"line_start":852,"line_end":852,"column_start":1,"column_end":4}},{"value":"/ The outermost dimension is `Axis(0)`, created with `.outer_iter()`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207135,"byte_end":207206,"line_start":853,"line_end":853,"column_start":1,"column_end":72}},{"value":"/ but you can traverse arbitrary dimension with `.axis_iter()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207207,"byte_end":207272,"line_start":854,"line_end":854,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207273,"byte_end":207276,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ For example, in a 3 × 5 × 5 array, with `axis` equal to `Axis(2)`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207277,"byte_end":207349,"line_start":856,"line_end":856,"column_start":1,"column_end":71}},{"value":"/ the iterator element is a 3 × 5 subview (and there are 5 in total).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207350,"byte_end":207422,"line_start":857,"line_end":857,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207423,"byte_end":207426,"line_start":858,"line_end":858,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `ArrayViewMut<'a, A, D>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207427,"byte_end":207481,"line_start":859,"line_end":859,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207482,"byte_end":207485,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ See [`.outer_iter_mut()`](../struct.ArrayBase.html#method.outer_iter_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207486,"byte_end":207563,"line_start":861,"line_end":861,"column_start":1,"column_end":78}},{"value":"/ or [`.axis_iter_mut()`](../struct.ArrayBase.html#method.axis_iter_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207564,"byte_end":207638,"line_start":862,"line_end":862,"column_start":1,"column_end":75}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207639,"byte_end":207664,"line_start":863,"line_end":863,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208286,"byte_end":208294,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"split_at","qualname":"<AxisIterMut>::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the iterator at index, yielding two disjoint iterators.","sig":null,"attributes":[{"value":"/ Split the iterator at index, yielding two disjoint iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208124,"byte_end":208189,"line_start":881,"line_end":881,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208194,"byte_end":208197,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is strictly greater than the iterator's length","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208202,"byte_end":208274,"line_start":883,"line_end":883,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":212170,"byte_end":212184,"line_start":1041,"line_end":1041,"column_start":12,"column_end":26},"name":"AxisChunksIter","qualname":"::iterators::AxisChunksIter","value":"AxisChunksIter {  }","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755}],"decl_id":null,"docs":" An iterator that traverses over the specified axis\n and yields views of the specified size on this axis.","sig":null,"attributes":[{"value":"/ An iterator that traverses over the specified axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211704,"byte_end":211758,"line_start":1031,"line_end":1031,"column_start":1,"column_end":55}},{"value":"/ and yields views of the specified size on this axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211759,"byte_end":211815,"line_start":1032,"line_end":1032,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211816,"byte_end":211819,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ For example, in a 2 × 8 × 3 array, if the axis of iteration","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211820,"byte_end":211885,"line_start":1034,"line_end":1034,"column_start":1,"column_end":64}},{"value":"/ is 1 and the chunk size is 2, the yielded elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211886,"byte_end":211940,"line_start":1035,"line_end":1035,"column_start":1,"column_end":55}},{"value":"/ are 2 × 2 × 3 views (and there are 4 in total).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211941,"byte_end":211994,"line_start":1036,"line_end":1036,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211995,"byte_end":211998,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `ArrayView<'a, A, D>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":211999,"byte_end":212050,"line_start":1038,"line_end":1038,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":212051,"byte_end":212054,"line_start":1039,"line_end":1039,"column_start":1,"column_end":4}},{"value":"/ See [`.axis_chunks_iter()`](../struct.ArrayBase.html#method.axis_chunks_iter) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":212055,"byte_end":212158,"line_start":1040,"line_end":1040,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216557,"byte_end":216574,"line_start":1178,"line_end":1178,"column_start":12,"column_end":29},"name":"AxisChunksIterMut","qualname":"::iterators::AxisChunksIterMut","value":"AxisChunksIterMut {  }","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" An iterator that traverses over the specified axis\n and yields mutable views of the specified size on this axis.","sig":null,"attributes":[{"value":"/ An iterator that traverses over the specified axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216068,"byte_end":216122,"line_start":1167,"line_end":1167,"column_start":1,"column_end":55}},{"value":"/ and yields mutable views of the specified size on this axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216123,"byte_end":216187,"line_start":1168,"line_end":1168,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216188,"byte_end":216191,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ For example, in a 2 × 8 × 3 array, if the axis of iteration","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216192,"byte_end":216257,"line_start":1170,"line_end":1170,"column_start":1,"column_end":64}},{"value":"/ is 1 and the chunk size is 2, the yielded elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216258,"byte_end":216312,"line_start":1171,"line_end":1171,"column_start":1,"column_end":55}},{"value":"/ are 2 × 2 × 3 views (and there are 4 in total).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216313,"byte_end":216366,"line_start":1172,"line_end":1172,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216367,"byte_end":216370,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `ArrayViewMut<'a, A, D>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216371,"byte_end":216425,"line_start":1174,"line_end":1174,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216426,"byte_end":216429,"line_start":1175,"line_end":1175,"column_start":1,"column_end":4}},{"value":"/ See [`.axis_chunks_iter_mut()`](../struct.ArrayBase.html#method.axis_chunks_iter_mut)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216430,"byte_end":216519,"line_start":1176,"line_end":1176,"column_start":1,"column_end":90}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216520,"byte_end":216545,"line_start":1177,"line_end":1177,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236578,"byte_end":236590,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"LinalgScalar","qualname":"::linalg_traits::LinalgScalar","value":"LinalgScalar: 'static + Copy + Zero + One + Add<Output = Self> + Sub<Output = Self> +\nMul<Output = Self> + Div<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Elements that support linear algebra operations.","sig":null,"attributes":[{"value":"/ Elements that support linear algebra operations.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236365,"byte_end":236417,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236418,"byte_end":236421,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ `'static` for type-based specialization, `Copy` so that they don't need move","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236422,"byte_end":236502,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ semantics or destructors, and the rest are numerical traits.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236503,"byte_end":236567,"line_start":23,"line_end":23,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237278,"byte_end":237285,"line_start":53,"line_end":53,"column_start":11,"column_end":18},"name":"NdFloat","qualname":"::linalg_traits::NdFloat","value":"NdFloat: Float + AddAssign + SubAssign + MulAssign + DivAssign + RemAssign +\nfmt::Display + fmt::Debug + fmt::LowerExp + fmt::UpperExp + ScalarOperand +\nLinalgScalar + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" Floating-point element types `f32` and `f64`.","sig":null,"attributes":[{"value":"/ Floating-point element types `f32` and `f64`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236895,"byte_end":236944,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236945,"byte_end":236948,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Trait `NdFloat` is only implemented for `f32` and `f64` but encompasses as","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236949,"byte_end":237027,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ much float-relevant ndarray functionality as possible, including the traits","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237028,"byte_end":237107,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ needed for linear algebra and for *right hand side* scalar","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237108,"byte_end":237170,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"/ operations (`ScalarOperand`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237171,"byte_end":237204,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237205,"byte_end":237208,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This trait can only be implemented by `f32` and `f64`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237209,"byte_end":237267,"line_start":52,"line_end":52,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4066},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244374,"byte_end":244384,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ShapeError","qualname":"::error::ShapeError","value":"ShapeError {  }","parent":null,"children":[{"krate":0,"index":4067}],"decl_id":null,"docs":" An error related to array shape or layout.\n","sig":null,"attributes":[{"value":"/ An error related to array shape or layout.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244299,"byte_end":244345,"line_start":14,"line_end":14,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244562,"byte_end":244566,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"kind","qualname":"<ShapeError>::kind","value":"pub fn kind(&Self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the `ErrorKind` of this error.\n","sig":null,"attributes":[{"value":"/ Return the `ErrorKind` of this error.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244495,"byte_end":244536,"line_start":22,"line_end":22,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244541,"byte_end":244550,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244659,"byte_end":244668,"line_start":29,"line_end":29,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ShapeError>::from_kind","value":"pub fn from_kind(ErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ShapeError`\n","sig":null,"attributes":[{"value":"/ Create a new `ShapeError`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244618,"byte_end":244647,"line_start":28,"line_end":28,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4071},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244973,"byte_end":244990,"line_start":41,"line_end":41,"column_start":5,"column_end":22},"name":"IncompatibleShape","qualname":"::error::ErrorKind::IncompatibleShape","value":"ErrorKind::IncompatibleShape","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" incompatible shape\n","sig":null,"attributes":[{"value":"/ incompatible shape","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244946,"byte_end":244968,"line_start":40,"line_end":40,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4074},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245035,"byte_end":245053,"line_start":43,"line_end":43,"column_start":5,"column_end":23},"name":"IncompatibleLayout","qualname":"::error::ErrorKind::IncompatibleLayout","value":"ErrorKind::IncompatibleLayout","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" incompatible memory layout\n","sig":null,"attributes":[{"value":"/ incompatible memory layout","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245000,"byte_end":245030,"line_start":42,"line_end":42,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4076},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245109,"byte_end":245121,"line_start":45,"line_end":45,"column_start":5,"column_end":17},"name":"RangeLimited","qualname":"::error::ErrorKind::RangeLimited","value":"ErrorKind::RangeLimited","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" the shape does not fit inside type limits\n","sig":null,"attributes":[{"value":"/ the shape does not fit inside type limits","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245059,"byte_end":245104,"line_start":44,"line_end":44,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4078},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245158,"byte_end":245169,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::error::ErrorKind::OutOfBounds","value":"ErrorKind::OutOfBounds","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" out of bounds indexing\n","sig":null,"attributes":[{"value":"/ out of bounds indexing","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245127,"byte_end":245153,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4080},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245207,"byte_end":245218,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ErrorKind::Unsupported","value":"ErrorKind::Unsupported","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" aliasing array elements\n","sig":null,"attributes":[{"value":"/ aliasing array elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245175,"byte_end":245202,"line_start":48,"line_end":48,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4082},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245277,"byte_end":245285,"line_start":51,"line_end":51,"column_start":5,"column_end":13},"name":"Overflow","qualname":"::error::ErrorKind::Overflow","value":"ErrorKind::Overflow","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":" overflow when computing offset, length, etc.\n","sig":null,"attributes":[{"value":"/ overflow when computing offset, length, etc.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245224,"byte_end":245272,"line_start":50,"line_end":50,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4084},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245310,"byte_end":245322,"line_start":53,"line_end":53,"column_start":5,"column_end":17},"name":"__Incomplete","qualname":"::error::ErrorKind::__Incomplete","value":"ErrorKind::__Incomplete","parent":{"krate":0,"index":4070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4070},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244930,"byte_end":244939,"line_start":39,"line_end":39,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n\n    /// incompatible shape\n    IncompatibleShape = ,\n\n    /// incompatible memory layout\n    IncompatibleLayout,\n\n    /// the shape does not fit inside type limits\n    RangeLimited,\n\n    /// out of bounds indexing\n    OutOfBounds,\n\n    /// aliasing array elements\n    Unsupported,\n\n    /// overflow when computing offset, length, etc.\n    Overflow,\n\n    #[doc(hidden)]\n    __Incomplete,\n}","parent":null,"children":[{"krate":0,"index":4071},{"krate":0,"index":4074},{"krate":0,"index":4076},{"krate":0,"index":4078},{"krate":0,"index":4080},{"krate":0,"index":4082},{"krate":0,"index":4084}],"decl_id":null,"docs":" Error code for an error related to array shape or layout.","sig":null,"attributes":[{"value":"/ Error code for an error related to array shape or layout.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244731,"byte_end":244792,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244793,"byte_end":244796,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This enumeration is not exhaustive. The representation of the enum","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244797,"byte_end":244867,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ is not guaranteed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244868,"byte_end":244890,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1900},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247115,"byte_end":247127,"line_start":11,"line_end":11,"column_start":11,"column_end":23},"name":"ShapeBuilder","qualname":"::shape_builder::ShapeBuilder","value":"ShapeBuilder","parent":null,"children":[{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906}],"decl_id":null,"docs":" A trait for `Shape` and `D where D: Dimension` that allows\n customizing the memory layout (strides) of an array shape.","sig":null,"attributes":[{"value":"/ A trait for `Shape` and `D where D: Dimension` that allows","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":246878,"byte_end":246940,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/ customizing the memory layout (strides) of an array shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":246941,"byte_end":247003,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247004,"byte_end":247007,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This trait is used together with array constructor methods like","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247008,"byte_end":247075,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ `Array::from_shape_vec`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247076,"byte_end":247104,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":1901},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247139,"byte_end":247142,"line_start":12,"line_end":12,"column_start":10,"column_end":13},"name":"Dim","qualname":"::shape_builder::ShapeBuilder::Dim","value":"type Dim: Dimension;","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1902},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247164,"byte_end":247171,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"Strides","qualname":"::shape_builder::ShapeBuilder::Strides","value":"type Strides;","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247181,"byte_end":247191,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"into_shape","qualname":"::shape_builder::ShapeBuilder::into_shape","value":"pub fn into_shape(Self) -> Shape<Self::Dim>","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247226,"byte_end":247227,"line_start":16,"line_end":16,"column_start":8,"column_end":9},"name":"f","qualname":"::shape_builder::ShapeBuilder::f","value":"pub fn f(Self) -> Shape<Self::Dim>","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247262,"byte_end":247267,"line_start":17,"line_end":17,"column_start":8,"column_end":13},"name":"set_f","qualname":"::shape_builder::ShapeBuilder::set_f","value":"pub fn set_f(Self, bool) -> Shape<Self::Dim>","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247314,"byte_end":247321,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"strides","qualname":"::shape_builder::ShapeBuilder::strides","value":"pub fn strides(Self, Self::Strides) -> StrideShape<Self::Dim>","parent":{"krate":0,"index":1900},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":249494,"byte_end":249498,"line_start":109,"line_end":109,"column_start":12,"column_end":16},"name":"size","qualname":"<Shape<D>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the shape in number of elements\n","sig":null,"attributes":[{"value":"/ Return the size of the shape in number of elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":249428,"byte_end":249482,"line_start":108,"line_end":108,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1939},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250585,"byte_end":250590,"line_start":32,"line_end":32,"column_start":8,"column_end":13},"name":"stack","qualname":"::stacking::stack","value":"pub fn stack<'a, A, D>(Axis, &[ArrayView]) -> Result<Array<A, D>, ShapeError>\nwhere A: Copy, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Stack arrays along the given axis.","sig":null,"attributes":[{"value":"/ Stack arrays along the given axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":249963,"byte_end":250001,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250002,"byte_end":250005,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ***Errors*** if the arrays have mismatching shapes, apart from along `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250006,"byte_end":250086,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ (may be made more flexible in the future).<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250087,"byte_end":250137,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ ***Errors*** if `arrays` is empty, if `axis` is out of bounds,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250138,"byte_end":250204,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/ if the result is larger than is possible to represent.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250205,"byte_end":250263,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250264,"byte_end":250267,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250268,"byte_end":250275,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use ndarray::{arr2, Axis, stack};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250276,"byte_end":250313,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250314,"byte_end":250317,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let a = arr2(&[[2., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250318,"byte_end":250346,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/                [3., 3.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250347,"byte_end":250377,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250378,"byte_end":250390,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/     stack(Axis(0), &[a.view(), a.view()])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250391,"byte_end":250436,"line_start":25,"line_end":25,"column_start":1,"column_end":46}},{"value":"/     == Ok(arr2(&[[2., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250437,"byte_end":250467,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/                  [3., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250468,"byte_end":250498,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/                  [2., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250499,"byte_end":250529,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/                  [3., 3.]]))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250530,"byte_end":250562,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250563,"byte_end":250569,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/stacking.rs","byte_start":250570,"byte_end":250577,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":1963},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":253585,"byte_end":253591,"line_start":40,"line_end":40,"column_start":10,"column_end":16},"name":"Output","qualname":"::zip::Broadcast::Output","value":"type Output: NdProducer<Dim=E::Dim>;","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255275,"byte_end":255289,"line_start":104,"line_end":104,"column_start":11,"column_end":25},"name":"IntoNdProducer","qualname":"::zip::IntoNdProducer","value":"IntoNdProducer","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985}],"decl_id":null,"docs":" Argument conversion into a producer.","sig":null,"attributes":[{"value":"/ Argument conversion into a producer.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255060,"byte_end":255100,"line_start":99,"line_end":99,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255101,"byte_end":255104,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Slices and vectors can be used (equivalent to 1-dimensional array views).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255105,"byte_end":255182,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255183,"byte_end":255186,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ This trait is like `IntoIterator` for `NdProducers` instead of iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255187,"byte_end":255264,"line_start":103,"line_end":103,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255345,"byte_end":255349,"line_start":106,"line_end":106,"column_start":10,"column_end":14},"name":"Item","qualname":"::zip::IntoNdProducer::Item","value":"type Item;","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" The element produced per iteration.\n","sig":null,"attributes":[{"value":"/ The element produced per iteration.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255296,"byte_end":255335,"line_start":105,"line_end":105,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255399,"byte_end":255402,"line_start":108,"line_end":108,"column_start":10,"column_end":13},"name":"Dim","qualname":"::zip::IntoNdProducer::Dim","value":"type Dim: Dimension;","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" Dimension type of the producer\n","sig":null,"attributes":[{"value":"/ Dimension type of the producer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255355,"byte_end":255389,"line_start":107,"line_end":107,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255424,"byte_end":255430,"line_start":109,"line_end":109,"column_start":10,"column_end":16},"name":"Output","qualname":"::zip::IntoNdProducer::Output","value":"type Output: NdProducer<Dim=Self::Dim, Item=Self::Item>;","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255531,"byte_end":255544,"line_start":111,"line_end":111,"column_start":8,"column_end":21},"name":"into_producer","qualname":"::zip::IntoNdProducer::into_producer","value":"pub fn into_producer(Self) -> Self::Output","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" Convert the value into an `NdProducer`.\n","sig":null,"attributes":[{"value":"/ Convert the value into an `NdProducer`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255480,"byte_end":255523,"line_start":110,"line_end":110,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1992},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256612,"byte_end":256622,"line_start":140,"line_end":140,"column_start":11,"column_end":21},"name":"NdProducer","qualname":"::zip::NdProducer","value":"NdProducer","parent":null,"children":[{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":4093}],"decl_id":null,"docs":" A producer of an n-dimensional set of elements;\n for example an array view, mutable array view or an iterator\n that yields chunks.","sig":null,"attributes":[{"value":"/ A producer of an n-dimensional set of elements;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255749,"byte_end":255800,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ for example an array view, mutable array view or an iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255801,"byte_end":255865,"line_start":122,"line_end":122,"column_start":1,"column_end":65}},{"value":"/ that yields chunks.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255866,"byte_end":255889,"line_start":123,"line_end":123,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255890,"byte_end":255893,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ Producers are used as a arguments to `Zip` and `azip!()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255894,"byte_end":255955,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255956,"byte_end":255959,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Comparison to `IntoIterator`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255960,"byte_end":255994,"line_start":127,"line_end":127,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255995,"byte_end":255998,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ Most `NdProducers` are *iterable* (implement `IntoIterator`) but not directly","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255999,"byte_end":256080,"line_start":129,"line_end":129,"column_start":1,"column_end":82}},{"value":"/ iterators. This separation is needed because the producer represents","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256081,"byte_end":256153,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ a multidimensional set of items, it can be split along a particular axis for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256154,"byte_end":256234,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/ parallelization, and it has no fixed correspondance to a sequence.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256235,"byte_end":256305,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256306,"byte_end":256309,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ The natural exception is one dimensional producers, like `AxisIter`, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256310,"byte_end":256388,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ implement `Iterator` directly","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256389,"byte_end":256422,"line_start":135,"line_end":135,"column_start":1,"column_end":34}},{"value":"/ (`AxisIter` traverses a one dimensional sequence, along an axis, while","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256423,"byte_end":256497,"line_start":136,"line_end":136,"column_start":1,"column_end":75}},{"value":"/ *producing* multidimensional items).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256498,"byte_end":256538,"line_start":137,"line_end":137,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256539,"byte_end":256542,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See also [`IntoNdProducer`](trait.IntoNdProducer.html)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256543,"byte_end":256601,"line_start":139,"line_end":139,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256678,"byte_end":256682,"line_start":142,"line_end":142,"column_start":10,"column_end":14},"name":"Item","qualname":"::zip::NdProducer::Item","value":"type Item;","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" The element produced per iteration.\n","sig":null,"attributes":[{"value":"/ The element produced per iteration.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256629,"byte_end":256668,"line_start":141,"line_end":141,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1994},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256751,"byte_end":256754,"line_start":145,"line_end":145,"column_start":10,"column_end":13},"name":"Dim","qualname":"::zip::NdProducer::Dim","value":"type Dim: Dimension;","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Dimension type\n","sig":null,"attributes":[{"value":"/ Dimension type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":256723,"byte_end":256741,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1995},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257093,"byte_end":257096,"line_start":153,"line_end":153,"column_start":10,"column_end":13},"name":"Ptr","qualname":"::zip::NdProducer::Ptr","value":"type Ptr: Offset<Stride=Self::Stride>;","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Pointer or stand-in for pointer\n","sig":null,"attributes":[{"value":"/ Pointer or stand-in for pointer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257048,"byte_end":257083,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257178,"byte_end":257184,"line_start":156,"line_end":156,"column_start":10,"column_end":16},"name":"Stride","qualname":"::zip::NdProducer::Stride","value":"type Stride: Copy;","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":" Pointer stride\n","sig":null,"attributes":[{"value":"/ Pointer stride","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257150,"byte_end":257168,"line_start":155,"line_end":155,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257219,"byte_end":257225,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"layout","qualname":"::zip::NdProducer::layout","value":"pub fn layout(&Self) -> Layout","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257270,"byte_end":257277,"line_start":161,"line_end":161,"column_start":8,"column_end":15},"name":"raw_dim","qualname":"::zip::NdProducer::raw_dim","value":"pub fn raw_dim(&Self) -> Self::Dim","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257325,"byte_end":257334,"line_start":163,"line_end":163,"column_start":8,"column_end":17},"name":"equal_dim","qualname":"::zip::NdProducer::equal_dim","value":"pub fn equal_dim(&Self, &Self::Dim) -> bool","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257432,"byte_end":257438,"line_start":167,"line_end":167,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::zip::NdProducer::as_ptr","value":"pub fn as_ptr(&Self) -> Self::Ptr","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257493,"byte_end":257499,"line_start":169,"line_end":169,"column_start":15,"column_end":21},"name":"as_ref","qualname":"::zip::NdProducer::as_ref","value":"pub unsafe fn as_ref(&Self, Self::Ptr) -> Self::Item","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257566,"byte_end":257574,"line_start":171,"line_end":171,"column_start":15,"column_end":23},"name":"uget_ptr","qualname":"::zip::NdProducer::uget_ptr","value":"pub unsafe fn uget_ptr(&Self, &Self::Dim) -> Self::Ptr","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257637,"byte_end":257646,"line_start":173,"line_end":173,"column_start":8,"column_end":17},"name":"stride_of","qualname":"::zip::NdProducer::stride_of","value":"pub fn stride_of(&Self, Axis) -> <Self::Ptr as Offset>::Stride","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257748,"byte_end":257765,"line_start":176,"line_end":176,"column_start":8,"column_end":25},"name":"contiguous_stride","qualname":"::zip::NdProducer::contiguous_stride","value":"pub fn contiguous_stride(&Self) -> Self::Stride","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257723,"byte_end":257740,"line_start":175,"line_end":175,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257816,"byte_end":257824,"line_start":178,"line_end":178,"column_start":8,"column_end":16},"name":"split_at","qualname":"::zip::NdProducer::split_at","value":"pub fn split_at(Self, Axis, usize) -> (Self, Self) where Self: Sized","parent":{"krate":0,"index":1992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2006},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257925,"byte_end":257931,"line_start":182,"line_end":182,"column_start":11,"column_end":17},"name":"Offset","qualname":"::zip::Offset","value":"Offset: Copy","parent":null,"children":[{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":4094}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2007},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257950,"byte_end":257956,"line_start":183,"line_end":183,"column_start":10,"column_end":16},"name":"Stride","qualname":"::zip::Offset::Stride","value":"type Stride: Copy;","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257978,"byte_end":257991,"line_start":184,"line_end":184,"column_start":15,"column_end":28},"name":"stride_offset","qualname":"::zip::Offset::stride_offset","value":"pub unsafe fn stride_offset(Self, Self::Stride, usize) -> Self","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":258299,"byte_end":258303,"line_start":197,"line_end":197,"column_start":10,"column_end":14},"name":"Item","qualname":"::zip::ZippableTuple::Item","value":"type Item;","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":258314,"byte_end":258317,"line_start":198,"line_end":198,"column_start":10,"column_end":13},"name":"Ptr","qualname":"::zip::ZippableTuple::Ptr","value":"type Ptr: OffsetTuple<Args=Self::Stride> + Copy;","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2016},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":258367,"byte_end":258370,"line_start":199,"line_end":199,"column_start":10,"column_end":13},"name":"Dim","qualname":"::zip::ZippableTuple::Dim","value":"type Dim: Dimension;","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":258392,"byte_end":258398,"line_start":200,"line_end":200,"column_start":10,"column_end":16},"name":"Stride","qualname":"::zip::ZippableTuple::Stride","value":"type Stride: Copy;","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4098},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265317,"byte_end":265320,"line_start":450,"line_end":450,"column_start":12,"column_end":15},"name":"Zip","qualname":"::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4101},{"krate":0,"index":4102},{"krate":0,"index":4103}],"decl_id":null,"docs":" Lock step function application across several arrays or other producers.","sig":null,"attributes":[{"value":"/ Lock step function application across several arrays or other producers.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":262810,"byte_end":262886,"line_start":381,"line_end":381,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":262887,"byte_end":262890,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Zip allows matching several producers to each other elementwise and applying","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":262891,"byte_end":262971,"line_start":383,"line_end":383,"column_start":1,"column_end":81}},{"value":"/ a function over all tuples of elements (one item from each input at","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":262972,"byte_end":263043,"line_start":384,"line_end":384,"column_start":1,"column_end":72}},{"value":"/ a time).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263044,"byte_end":263056,"line_start":385,"line_end":385,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263057,"byte_end":263060,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ In general, the zip uses a tuple of producers","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263061,"byte_end":263110,"line_start":387,"line_end":387,"column_start":1,"column_end":50}},{"value":"/ ([`NdProducer`](trait.NdProducer.html) trait) that all have to be of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263111,"byte_end":263187,"line_start":388,"line_end":388,"column_start":1,"column_end":77}},{"value":"/ same shape. The NdProducer implementation defines what its item type is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263188,"byte_end":263263,"line_start":389,"line_end":389,"column_start":1,"column_end":76}},{"value":"/ (for example if it's a shared reference, mutable reference or an array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263264,"byte_end":263338,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ view etc).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263339,"byte_end":263353,"line_start":391,"line_end":391,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263354,"byte_end":263357,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ If all the input arrays are of the same memory layout the zip performs much","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263358,"byte_end":263437,"line_start":393,"line_end":393,"column_start":1,"column_end":80}},{"value":"/ better and the compiler can usually vectorize the loop (if applicable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263438,"byte_end":263513,"line_start":394,"line_end":394,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263514,"byte_end":263517,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ The order elements are visited is not specified. The producers don’t have to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263518,"byte_end":263600,"line_start":396,"line_end":396,"column_start":1,"column_end":81}},{"value":"/ have the same item type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263601,"byte_end":263629,"line_start":397,"line_end":397,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263630,"byte_end":263633,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ The `Zip` has two methods for function application: `apply` and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263634,"byte_end":263701,"line_start":399,"line_end":399,"column_start":1,"column_end":68}},{"value":"/ `fold_while`. The zip object can be split, which allows parallelization.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263702,"byte_end":263778,"line_start":400,"line_end":400,"column_start":1,"column_end":77}},{"value":"/ A read-only zip object (no mutable producers) can be cloned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263779,"byte_end":263843,"line_start":401,"line_end":401,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263844,"byte_end":263847,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ See also the [`azip!()` macro][az] which offers a convenient shorthand","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263848,"byte_end":263922,"line_start":403,"line_end":403,"column_start":1,"column_end":75}},{"value":"/ to common ways to use `Zip`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263923,"byte_end":263955,"line_start":404,"line_end":404,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263956,"byte_end":263959,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ [az]: macro.azip.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263960,"byte_end":263985,"line_start":406,"line_end":406,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263986,"byte_end":263989,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263990,"byte_end":263997,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ use ndarray::Zip;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":263998,"byte_end":264019,"line_start":409,"line_end":409,"column_start":1,"column_end":22}},{"value":"/ use ndarray::Array2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264020,"byte_end":264044,"line_start":410,"line_end":410,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264045,"byte_end":264048,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ type M = Array2<f64>;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264049,"byte_end":264074,"line_start":412,"line_end":412,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264075,"byte_end":264078,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ // Create four 2d arrays of the same size","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264079,"byte_end":264124,"line_start":414,"line_end":414,"column_start":1,"column_end":46}},{"value":"/ let mut a = M::zeros((64, 32));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264125,"byte_end":264160,"line_start":415,"line_end":415,"column_start":1,"column_end":36}},{"value":"/ let b = M::from_elem(a.dim(), 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264161,"byte_end":264199,"line_start":416,"line_end":416,"column_start":1,"column_end":39}},{"value":"/ let c = M::from_elem(a.dim(), 2.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264200,"byte_end":264238,"line_start":417,"line_end":417,"column_start":1,"column_end":39}},{"value":"/ let d = M::from_elem(a.dim(), 3.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264239,"byte_end":264277,"line_start":418,"line_end":418,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264278,"byte_end":264281,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ // Example 1: Perform an elementwise arithmetic operation across","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264282,"byte_end":264350,"line_start":420,"line_end":420,"column_start":1,"column_end":69}},{"value":"/ // the four arrays a, b, c, d.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264351,"byte_end":264385,"line_start":421,"line_end":421,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264386,"byte_end":264389,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ Zip::from(&mut a)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264390,"byte_end":264411,"line_start":423,"line_end":423,"column_start":1,"column_end":22}},{"value":"/     .and(&b)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264412,"byte_end":264428,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/     .and(&c)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264429,"byte_end":264445,"line_start":425,"line_end":425,"column_start":1,"column_end":17}},{"value":"/     .and(&d)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264446,"byte_end":264462,"line_start":426,"line_end":426,"column_start":1,"column_end":17}},{"value":"/     .apply(|w, &x, &y, &z| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264463,"byte_end":264495,"line_start":427,"line_end":427,"column_start":1,"column_end":33}},{"value":"/         *w += x + y * z;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264496,"byte_end":264524,"line_start":428,"line_end":428,"column_start":1,"column_end":29}},{"value":"/     });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264525,"byte_end":264536,"line_start":429,"line_end":429,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264537,"byte_end":264540,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ // Example 2: Create a new array `totals` with one entry per row of `a`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264541,"byte_end":264617,"line_start":431,"line_end":431,"column_start":1,"column_end":77}},{"value":"/ //  Use Zip to traverse the rows of `a` and assign to the corresponding","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264618,"byte_end":264693,"line_start":432,"line_end":432,"column_start":1,"column_end":76}},{"value":"/ //  entry in `totals` with the sum across each row.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264694,"byte_end":264749,"line_start":433,"line_end":433,"column_start":1,"column_end":56}},{"value":"/ //  This is possible because the producer for `totals` and the row producer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264750,"byte_end":264829,"line_start":434,"line_end":434,"column_start":1,"column_end":80}},{"value":"/ //  for `a` have the same shape and dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264830,"byte_end":264885,"line_start":435,"line_end":435,"column_start":1,"column_end":56}},{"value":"/ //  The rows producer yields one array view (`row`) per iteration.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264886,"byte_end":264956,"line_start":436,"line_end":436,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264957,"byte_end":264960,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/ use ndarray::{Array1, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264961,"byte_end":264993,"line_start":438,"line_end":438,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264994,"byte_end":264997,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ let mut totals = Array1::zeros(a.rows());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":264998,"byte_end":265043,"line_start":440,"line_end":440,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265044,"byte_end":265047,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ Zip::from(&mut totals)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265048,"byte_end":265074,"line_start":442,"line_end":442,"column_start":1,"column_end":27}},{"value":"/     .and(a.genrows())","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265075,"byte_end":265100,"line_start":443,"line_end":443,"column_start":1,"column_end":26}},{"value":"/     .apply(|totals, row| *totals = row.sum());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265101,"byte_end":265151,"line_start":444,"line_end":444,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265152,"byte_end":265155,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ // Check the result against the built in `.sum_axis()` along axis 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265156,"byte_end":265228,"line_start":446,"line_end":446,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(totals, a.sum_axis(Axis(1)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265229,"byte_end":265273,"line_start":447,"line_end":447,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265274,"byte_end":265281,"line_start":448,"line_end":448,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265697,"byte_end":265701,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"from","qualname":"<Zip<(P,), D>>::from","value":"pub fn from<IP>(IP) -> Self where IP: IntoNdProducer<Dim = D, Output = D, Item\n= D>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Zip` from the input array or other producer `p`.","sig":null,"attributes":[{"value":"/ Create a new `Zip` from the input array or other producer `p`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265478,"byte_end":265544,"line_start":460,"line_end":460,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265549,"byte_end":265552,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ The Zip will take the exact dimension of `p` and all inputs","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265557,"byte_end":265620,"line_start":462,"line_end":462,"column_start":5,"column_end":68}},{"value":"/ must have the same dimensions (or be broadcast to them).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265625,"byte_end":265685,"line_start":463,"line_end":463,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266365,"byte_end":266372,"line_start":486,"line_end":486,"column_start":12,"column_end":19},"name":"indexed","qualname":"<Zip<(Indices<D>, P), D>>::indexed","value":"pub fn indexed<IP>(IP) -> Self where IP: IntoNdProducer<Dim = D, Output = D,\nItem = D>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Zip` with an index producer and the producer `p`.","sig":null,"attributes":[{"value":"/ Create a new `Zip` with an index producer and the producer `p`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266095,"byte_end":266162,"line_start":480,"line_end":480,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266167,"byte_end":266170,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ The Zip will take the exact dimension of `p` and all inputs","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266175,"byte_end":266238,"line_start":482,"line_end":482,"column_start":5,"column_end":68}},{"value":"/ must have the same dimensions (or be broadcast to them).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266243,"byte_end":266303,"line_start":483,"line_end":483,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266308,"byte_end":266311,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ *Note:* Indexed zip has overhead.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266316,"byte_end":266353,"line_start":485,"line_end":485,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266964,"byte_end":266968,"line_start":508,"line_end":508,"column_start":12,"column_end":16},"name":"size","qualname":"<Zip<Parts, D>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a the number of element tuples in the Zip\n","sig":null,"attributes":[{"value":"/ Return a the number of element tuples in the Zip","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266900,"byte_end":266952,"line_start":507,"line_end":507,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":270291,"byte_end":270295,"line_start":612,"line_end":612,"column_start":10,"column_end":14},"name":"Args","qualname":"::zip::OffsetTuple::Args","value":"type Args;","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4362},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277127,"byte_end":277135,"line_start":818,"line_end":818,"column_start":5,"column_end":13},"name":"Continue","qualname":"::zip::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":4360},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277086,"byte_end":277122,"line_start":817,"line_end":817,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4365},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277196,"byte_end":277200,"line_start":820,"line_end":820,"column_start":5,"column_end":9},"name":"Done","qualname":"::zip::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":4360},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277144,"byte_end":277191,"line_start":819,"line_end":819,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":4360},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277067,"byte_end":277076,"line_start":816,"line_end":816,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::zip::FoldWhile","value":"pub enum FoldWhile<T> {\n\n    /// Continue folding with this value\n    Continue(T),\n\n    /// Fold is complete and will return this value\n    Done(T),\n}","parent":null,"children":[{"krate":0,"index":4362},{"krate":0,"index":4365}],"decl_id":null,"docs":" Value controlling the execution of `.fold_while` on `Zip`.\n","sig":null,"attributes":[{"value":"/ Value controlling the execution of `.fold_while` on `Zip`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":276965,"byte_end":277027,"line_start":814,"line_end":814,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277273,"byte_end":277283,"line_start":825,"line_end":825,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value\n","sig":null,"attributes":[{"value":"/ Return the inner value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277235,"byte_end":277261,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277464,"byte_end":277471,"line_start":832,"line_end":832,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if it is `Done`, false if `Continue`\n","sig":null,"attributes":[{"value":"/ Return true if it is `Done`, false if `Continue`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277400,"byte_end":277452,"line_start":831,"line_end":831,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":7047},{"krate":0,"index":2178},{"krate":0,"index":7049},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":7101},{"krate":0,"index":2209},{"krate":0,"index":7103},{"krate":0,"index":2210},{"krate":0,"index":7105},{"krate":0,"index":2211},{"krate":0,"index":7107},{"krate":0,"index":2212},{"krate":0,"index":7109},{"krate":0,"index":2213},{"krate":0,"index":7111},{"krate":0,"index":2214},{"krate":0,"index":7113},{"krate":0,"index":2215},{"krate":0,"index":7115},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228}],"decl_id":null,"docs":" ndarray prelude.","sig":null,"attributes":[{"value":"/ ndarray prelude.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283698,"byte_end":283718,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283719,"byte_end":283722,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module contains the most used types, type aliases, traits and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283723,"byte_end":283793,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ functions that you can import easily as a group.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283794,"byte_end":283846,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283847,"byte_end":283850,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283851,"byte_end":283858,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ extern crate ndarray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283859,"byte_end":283884,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283885,"byte_end":283888,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ use ndarray::prelude::*;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283889,"byte_end":283917,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/ # fn main() { }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283918,"byte_end":283937,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/prelude.rs","byte_start":283938,"byte_end":283945,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":2229},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6346,"byte_end":6348,"line_start":209,"line_end":209,"column_start":10,"column_end":12},"name":"Ix","qualname":"::Ix","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Array index type\n","sig":null,"attributes":[{"value":"/ Array index type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6316,"byte_end":6336,"line_start":208,"line_end":208,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":2230},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6397,"byte_end":6400,"line_start":211,"line_end":211,"column_start":10,"column_end":13},"name":"Ixs","qualname":"::Ixs","value":"isize","parent":null,"children":[],"decl_id":null,"docs":" Array index type (signed)\n","sig":null,"attributes":[{"value":"/ Array index type (signed)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6358,"byte_end":6387,"line_start":210,"line_end":210,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2231},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":35429,"byte_end":35438,"line_start":1026,"line_end":1026,"column_start":12,"column_end":21},"name":"ArrayBase","qualname":"::ArrayBase","value":"ArrayBase {  }","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237}],"decl_id":null,"docs":" An *n*-dimensional array.","sig":null,"attributes":[{"value":"/ An *n*-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6411,"byte_end":6440,"line_start":213,"line_end":213,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6441,"byte_end":6444,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ The array is a general container of elements. It cannot grow or shrink, but","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6445,"byte_end":6524,"line_start":215,"line_end":215,"column_start":1,"column_end":80}},{"value":"/ can be sliced into subsets of its data.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6525,"byte_end":6568,"line_start":216,"line_end":216,"column_start":1,"column_end":44}},{"value":"/ The array supports arithmetic operations by applying them elementwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6569,"byte_end":6643,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6644,"byte_end":6647,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ In *n*-dimensional we include for example 1-dimensional rows or columns,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6648,"byte_end":6724,"line_start":219,"line_end":219,"column_start":1,"column_end":77}},{"value":"/ 2-dimensional matrices, and higher dimensional arrays. If the array has *n*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6725,"byte_end":6804,"line_start":220,"line_end":220,"column_start":1,"column_end":80}},{"value":"/ dimensions, then an element is accessed by using that many indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6805,"byte_end":6876,"line_start":221,"line_end":221,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6877,"byte_end":6880,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ The `ArrayBase<S, D>` is parameterized by `S` for the data container and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6881,"byte_end":6957,"line_start":223,"line_end":223,"column_start":1,"column_end":77}},{"value":"/ `D` for the dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6958,"byte_end":6989,"line_start":224,"line_end":224,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6990,"byte_end":6993,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Type aliases [`Array`], [`ArcArray`], [`ArrayView`], and [`ArrayViewMut`] refer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6994,"byte_end":7077,"line_start":226,"line_end":226,"column_start":1,"column_end":84}},{"value":"/ to `ArrayBase` with different types for the data container.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7078,"byte_end":7141,"line_start":227,"line_end":227,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7142,"byte_end":7145,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ [`Array`]: type.Array.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7146,"byte_end":7176,"line_start":229,"line_end":229,"column_start":1,"column_end":31}},{"value":"/ [`ArcArray`]: type.ArcArray.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7177,"byte_end":7213,"line_start":230,"line_end":230,"column_start":1,"column_end":37}},{"value":"/ [`ArrayView`]: type.ArrayView.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7214,"byte_end":7252,"line_start":231,"line_end":231,"column_start":1,"column_end":39}},{"value":"/ [`ArrayViewMut`]: type.ArrayViewMut.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7253,"byte_end":7297,"line_start":232,"line_end":232,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7298,"byte_end":7301,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ## Contents","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7302,"byte_end":7317,"line_start":234,"line_end":234,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7318,"byte_end":7321,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ + [Array](#array)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7322,"byte_end":7343,"line_start":236,"line_end":236,"column_start":1,"column_end":22}},{"value":"/ + [ArcArray](#arcarray)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7344,"byte_end":7371,"line_start":237,"line_end":237,"column_start":1,"column_end":28}},{"value":"/ + [Array Views](#array-views)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7372,"byte_end":7405,"line_start":238,"line_end":238,"column_start":1,"column_end":34}},{"value":"/ + [Indexing and Dimension](#indexing-and-dimension)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7406,"byte_end":7461,"line_start":239,"line_end":239,"column_start":1,"column_end":56}},{"value":"/ + [Loops, Producers and Iterators](#loops-producers-and-iterators)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7462,"byte_end":7532,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"/ + [Slicing](#slicing)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7533,"byte_end":7558,"line_start":241,"line_end":241,"column_start":1,"column_end":26}},{"value":"/ + [Subviews](#subviews)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7559,"byte_end":7586,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/ + [Arithmetic Operations](#arithmetic-operations)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7587,"byte_end":7640,"line_start":243,"line_end":243,"column_start":1,"column_end":54}},{"value":"/ + [Broadcasting](#broadcasting)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7641,"byte_end":7676,"line_start":244,"line_end":244,"column_start":1,"column_end":36}},{"value":"/ + [Conversions](#conversions)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7677,"byte_end":7710,"line_start":245,"line_end":245,"column_start":1,"column_end":34}},{"value":"/ + [Constructor Methods for Owned Arrays](#constructor-methods-for-owned-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7711,"byte_end":7794,"line_start":246,"line_end":246,"column_start":1,"column_end":84}},{"value":"/ + [Methods For All Array Types](#methods-for-all-array-types)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7795,"byte_end":7860,"line_start":247,"line_end":247,"column_start":1,"column_end":66}},{"value":"/ + [Methods For 1-D Arrays](#methods-for-1-d-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7861,"byte_end":7916,"line_start":248,"line_end":248,"column_start":1,"column_end":56}},{"value":"/ + [Methods For 2-D Arrays](#methods-for-2-d-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7917,"byte_end":7972,"line_start":249,"line_end":249,"column_start":1,"column_end":56}},{"value":"/ + [Methods for Dynamic-Dimensional Arrays](#methods-for-dynamic-dimensional-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":7973,"byte_end":8060,"line_start":250,"line_end":250,"column_start":1,"column_end":88}},{"value":"/ + [Numerical Methods for Arrays](#numerical-methods-for-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8061,"byte_end":8128,"line_start":251,"line_end":251,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8129,"byte_end":8132,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ## `Array`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8133,"byte_end":8147,"line_start":253,"line_end":253,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8148,"byte_end":8151,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`Array`](type.Array.html) is an owned array that owns the underlying array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8152,"byte_end":8231,"line_start":255,"line_end":255,"column_start":1,"column_end":80}},{"value":"/ elements directly (just like a `Vec`) and it is the default way to create and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8232,"byte_end":8313,"line_start":256,"line_end":256,"column_start":1,"column_end":82}},{"value":"/ store n-dimensional data. `Array<A, D>` has two type parameters: `A` for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8314,"byte_end":8390,"line_start":257,"line_end":257,"column_start":1,"column_end":77}},{"value":"/ the element type, and `D` for the dimensionality. A particular","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8391,"byte_end":8457,"line_start":258,"line_end":258,"column_start":1,"column_end":67}},{"value":"/ dimensionality's type alias like `Array3<A>` just has the type parameter","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8458,"byte_end":8534,"line_start":259,"line_end":259,"column_start":1,"column_end":77}},{"value":"/ `A` for element type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8535,"byte_end":8560,"line_start":260,"line_end":260,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8561,"byte_end":8564,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ An example:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8565,"byte_end":8580,"line_start":262,"line_end":262,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8581,"byte_end":8584,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8585,"byte_end":8592,"line_start":264,"line_end":264,"column_start":1,"column_end":8}},{"value":"/ // Create a three-dimensional f64 array, initialized with zeros","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8593,"byte_end":8660,"line_start":265,"line_end":265,"column_start":1,"column_end":68}},{"value":"/ use ndarray::Array3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8661,"byte_end":8685,"line_start":266,"line_end":266,"column_start":1,"column_end":25}},{"value":"/ let mut temperature = Array3::<f64>::zeros((3, 4, 5));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8686,"byte_end":8744,"line_start":267,"line_end":267,"column_start":1,"column_end":59}},{"value":"/ // Increase the temperature in this location","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8745,"byte_end":8793,"line_start":268,"line_end":268,"column_start":1,"column_end":49}},{"value":"/ temperature[[2, 2, 2]] += 0.5;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8794,"byte_end":8828,"line_start":269,"line_end":269,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8829,"byte_end":8836,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8837,"byte_end":8840,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ ## `ArcArray`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8841,"byte_end":8858,"line_start":272,"line_end":272,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8859,"byte_end":8862,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ [`ArcArray`](type.ArcArray.html) is an owned array with reference counted","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8863,"byte_end":8940,"line_start":274,"line_end":274,"column_start":1,"column_end":78}},{"value":"/ data (shared ownership).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8941,"byte_end":8969,"line_start":275,"line_end":275,"column_start":1,"column_end":29}},{"value":"/ Sharing requires that it uses copy-on-write for mutable operations.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":8970,"byte_end":9041,"line_start":276,"line_end":276,"column_start":1,"column_end":72}},{"value":"/ Calling a method for mutating elements on `ArcArray`, for example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9042,"byte_end":9111,"line_start":277,"line_end":277,"column_start":1,"column_end":70}},{"value":"/ [`view_mut()`](#method.view_mut) or [`get_mut()`](#method.get_mut),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9112,"byte_end":9183,"line_start":278,"line_end":278,"column_start":1,"column_end":72}},{"value":"/ will break sharing and require a clone of the data (if it is not uniquely held).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9184,"byte_end":9268,"line_start":279,"line_end":279,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9269,"byte_end":9272,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ ## Array Views","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9273,"byte_end":9291,"line_start":281,"line_end":281,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9292,"byte_end":9295,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ [`ArrayView`] and [`ArrayViewMut`] are read-only and read-write array views","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9296,"byte_end":9375,"line_start":283,"line_end":283,"column_start":1,"column_end":80}},{"value":"/ respectively. They use dimensionality, indexing, and almost all other","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9376,"byte_end":9449,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/ methods the same was as the other array types.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9450,"byte_end":9500,"line_start":285,"line_end":285,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9501,"byte_end":9504,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ Methods for `ArrayBase` apply to array views too, when the trait bounds","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9505,"byte_end":9580,"line_start":287,"line_end":287,"column_start":1,"column_end":76}},{"value":"/ allow.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9581,"byte_end":9591,"line_start":288,"line_end":288,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9592,"byte_end":9595,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Please see the documentation for the respective array view for an overview","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9596,"byte_end":9674,"line_start":290,"line_end":290,"column_start":1,"column_end":79}},{"value":"/ of methods specific to array views: [`ArrayView`], [`ArrayViewMut`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9675,"byte_end":9747,"line_start":291,"line_end":291,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9748,"byte_end":9751,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ A view is created from an array using `.view()`, `.view_mut()`, using","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9752,"byte_end":9825,"line_start":293,"line_end":293,"column_start":1,"column_end":74}},{"value":"/ slicing (`.slice()`, `.slice_mut()`) or from one of the many iterators","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9826,"byte_end":9900,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ that yield array views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9901,"byte_end":9928,"line_start":295,"line_end":295,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9929,"byte_end":9932,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ You can also create an array view from a regular slice of data not","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":9933,"byte_end":10003,"line_start":297,"line_end":297,"column_start":1,"column_end":71}},{"value":"/ allocated with `Array` — see array view methods or their `From` impls.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10004,"byte_end":10080,"line_start":298,"line_end":298,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10081,"byte_end":10084,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ Note that all `ArrayBase` variants can change their view (slicing) of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10085,"byte_end":10162,"line_start":300,"line_end":300,"column_start":1,"column_end":78}},{"value":"/ data freely, even when their data can’t be mutated.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10163,"byte_end":10220,"line_start":301,"line_end":301,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10221,"byte_end":10224,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ ## Indexing and Dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10225,"byte_end":10254,"line_start":303,"line_end":303,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10255,"byte_end":10258,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ The dimensionality of the array determines the number of *axes*, for example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10259,"byte_end":10339,"line_start":305,"line_end":305,"column_start":1,"column_end":81}},{"value":"/ a 2D array has two axes. These are listed in “big endian” order, so that","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10340,"byte_end":10420,"line_start":306,"line_end":306,"column_start":1,"column_end":77}},{"value":"/ the greatest dimension is listed first, the lowest dimension with the most","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10421,"byte_end":10499,"line_start":307,"line_end":307,"column_start":1,"column_end":79}},{"value":"/ rapidly varying index is the last.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10500,"byte_end":10538,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10539,"byte_end":10542,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ In a 2D array the index of each element is `[row, column]` as seen in this","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10543,"byte_end":10621,"line_start":310,"line_end":310,"column_start":1,"column_end":79}},{"value":"/ 4 × 3 example:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10622,"byte_end":10641,"line_start":311,"line_end":311,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10642,"byte_end":10645,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10646,"byte_end":10659,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/ [[ [0, 0], [0, 1], [0, 2] ],  // row 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10660,"byte_end":10702,"line_start":314,"line_end":314,"column_start":1,"column_end":43}},{"value":"/  [ [1, 0], [1, 1], [1, 2] ],  // row 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10703,"byte_end":10745,"line_start":315,"line_end":315,"column_start":1,"column_end":43}},{"value":"/  [ [2, 0], [2, 1], [2, 2] ],  // row 2","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10746,"byte_end":10788,"line_start":316,"line_end":316,"column_start":1,"column_end":43}},{"value":"/  [ [3, 0], [3, 1], [3, 2] ]]  // row 3","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10789,"byte_end":10831,"line_start":317,"line_end":317,"column_start":1,"column_end":43}},{"value":"/ //    \\       \\       \\","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10832,"byte_end":10859,"line_start":318,"line_end":318,"column_start":1,"column_end":28}},{"value":"/ //   column 0  \\     column 2","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10860,"byte_end":10893,"line_start":319,"line_end":319,"column_start":1,"column_end":34}},{"value":"/ //            column 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10894,"byte_end":10920,"line_start":320,"line_end":320,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10921,"byte_end":10928,"line_start":321,"line_end":321,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10929,"byte_end":10932,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ The number of axes for an array is fixed by its `D` type parameter: `Ix1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":10933,"byte_end":11010,"line_start":323,"line_end":323,"column_start":1,"column_end":78}},{"value":"/ for a 1D array, `Ix2` for a 2D array etc. The dimension type `IxDyn` allows","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11011,"byte_end":11090,"line_start":324,"line_end":324,"column_start":1,"column_end":80}},{"value":"/ a dynamic number of axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11091,"byte_end":11120,"line_start":325,"line_end":325,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11121,"byte_end":11124,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ A fixed size array (`[usize; N]`) of the corresponding dimensionality is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11125,"byte_end":11201,"line_start":327,"line_end":327,"column_start":1,"column_end":77}},{"value":"/ used to index the `Array`, making the syntax `array[[` i, j,  ...`]]`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11202,"byte_end":11275,"line_start":328,"line_end":328,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11276,"byte_end":11279,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11280,"byte_end":11287,"line_start":330,"line_end":330,"column_start":1,"column_end":8}},{"value":"/ use ndarray::Array2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11288,"byte_end":11312,"line_start":331,"line_end":331,"column_start":1,"column_end":25}},{"value":"/ let mut array = Array2::zeros((4, 3));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11313,"byte_end":11355,"line_start":332,"line_end":332,"column_start":1,"column_end":43}},{"value":"/ array[[1, 1]] = 7;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11356,"byte_end":11378,"line_start":333,"line_end":333,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11379,"byte_end":11386,"line_start":334,"line_end":334,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11387,"byte_end":11390,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Important traits and types for dimension and indexing:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11391,"byte_end":11449,"line_start":336,"line_end":336,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11450,"byte_end":11453,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ - A [`Dim`](Dim.t.html) value represents a dimensionality or index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11454,"byte_end":11525,"line_start":338,"line_end":338,"column_start":1,"column_end":72}},{"value":"/ - Trait [`Dimension`](Dimension.t.html) is implemented by all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11526,"byte_end":11591,"line_start":339,"line_end":339,"column_start":1,"column_end":66}},{"value":"/ dimensionalities. It defines many operations for dimensions and indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11592,"byte_end":11668,"line_start":340,"line_end":340,"column_start":1,"column_end":77}},{"value":"/ - Trait [`IntoDimension`](IntoDimension.t.html) is used to convert into a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11669,"byte_end":11746,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ `Dim` value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11747,"byte_end":11763,"line_start":342,"line_end":342,"column_start":1,"column_end":17}},{"value":"/ - Trait [`ShapeBuilder`](ShapeBuilder.t.html) is an extension of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11764,"byte_end":11832,"line_start":343,"line_end":343,"column_start":1,"column_end":69}},{"value":"/ `IntoDimension` and is used when constructing an array. A shape describes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11833,"byte_end":11910,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/ not just the extent of each axis but also their strides.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11911,"byte_end":11971,"line_start":345,"line_end":345,"column_start":1,"column_end":61}},{"value":"/ - Trait [`NdIndex`](NdIndex.t.html) is an extension of `Dimension` and is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":11972,"byte_end":12049,"line_start":346,"line_end":346,"column_start":1,"column_end":78}},{"value":"/ for values that can be used with indexing syntax.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12050,"byte_end":12103,"line_start":347,"line_end":347,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12104,"byte_end":12107,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12108,"byte_end":12111,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ The default memory order of an array is *row major* order (a.k.a “c” order),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12112,"byte_end":12196,"line_start":350,"line_end":350,"column_start":1,"column_end":81}},{"value":"/ where each row is contiguous in memory.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12197,"byte_end":12240,"line_start":351,"line_end":351,"column_start":1,"column_end":44}},{"value":"/ A *column major* (a.k.a. “f” or fortran) memory order array has","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12241,"byte_end":12312,"line_start":352,"line_end":352,"column_start":1,"column_end":68}},{"value":"/ columns (or, in general, the outermost axis) with contiguous elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12313,"byte_end":12387,"line_start":353,"line_end":353,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12388,"byte_end":12391,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ The logical order of any array’s elements is the row major order","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12392,"byte_end":12462,"line_start":355,"line_end":355,"column_start":1,"column_end":69}},{"value":"/ (the rightmost index is varying the fastest).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12463,"byte_end":12512,"line_start":356,"line_end":356,"column_start":1,"column_end":50}},{"value":"/ The iterators `.iter(), .iter_mut()` always adhere to this order, for example.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12513,"byte_end":12595,"line_start":357,"line_end":357,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12596,"byte_end":12599,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ ## Loops, Producers and Iterators","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12600,"byte_end":12637,"line_start":359,"line_end":359,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12638,"byte_end":12641,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ Using [`Zip`](struct.Zip.html) is the most general way to apply a procedure","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12642,"byte_end":12721,"line_start":361,"line_end":361,"column_start":1,"column_end":80}},{"value":"/ across one or several arrays or *producers*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12722,"byte_end":12770,"line_start":362,"line_end":362,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12771,"byte_end":12774,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ [`NdProducer`](trait.NdProducer.html) is like an iterable but for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12775,"byte_end":12844,"line_start":364,"line_end":364,"column_start":1,"column_end":70}},{"value":"/ multidimensional data. All producers have dimensions and axes, like an","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12845,"byte_end":12919,"line_start":365,"line_end":365,"column_start":1,"column_end":75}},{"value":"/ array view, and they can be split and used with parallelization using `Zip`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":12920,"byte_end":13000,"line_start":366,"line_end":366,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13001,"byte_end":13004,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ For example, `ArrayView<A, D>` is a producer, it has the same dimensions","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13005,"byte_end":13081,"line_start":368,"line_end":368,"column_start":1,"column_end":77}},{"value":"/ as the array view and for each iteration it produces a reference to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13082,"byte_end":13153,"line_start":369,"line_end":369,"column_start":1,"column_end":72}},{"value":"/ the array element (`&A` in this case).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13154,"byte_end":13196,"line_start":370,"line_end":370,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13197,"byte_end":13200,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ Another example, if we have a 10 × 10 array and use `.exact_chunks((2, 2))`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13201,"byte_end":13281,"line_start":372,"line_end":372,"column_start":1,"column_end":80}},{"value":"/ we get a producer of chunks which has the dimensions 5 × 5 (because","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13282,"byte_end":13354,"line_start":373,"line_end":373,"column_start":1,"column_end":72}},{"value":"/ there are *10 / 2 = 5* chunks in either direction). The 5 × 5 chunks producer","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13355,"byte_end":13437,"line_start":374,"line_end":374,"column_start":1,"column_end":82}},{"value":"/ can be paired with any other producers of the same dimension with `Zip`, for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13438,"byte_end":13518,"line_start":375,"line_end":375,"column_start":1,"column_end":81}},{"value":"/ example 5 × 5 arrays.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13519,"byte_end":13545,"line_start":376,"line_end":376,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13546,"byte_end":13549,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ ### `.iter()` and `.iter_mut()`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13550,"byte_end":13585,"line_start":378,"line_end":378,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13586,"byte_end":13589,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ These are the element iterators of arrays and they produce an element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13590,"byte_end":13663,"line_start":380,"line_end":380,"column_start":1,"column_end":74}},{"value":"/ sequence in the logical order of the array, that means that the elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13664,"byte_end":13740,"line_start":381,"line_end":381,"column_start":1,"column_end":77}},{"value":"/ will be visited in the sequence that corresponds to increasing the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13741,"byte_end":13811,"line_start":382,"line_end":382,"column_start":1,"column_end":71}},{"value":"/ last index first: *0, ..., 0,  0*; *0, ..., 0, 1*; *0, ...0, 2* and so on.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13812,"byte_end":13890,"line_start":383,"line_end":383,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13891,"byte_end":13894,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ ### `.outer_iter()` and `.axis_iter()`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13895,"byte_end":13937,"line_start":385,"line_end":385,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13938,"byte_end":13941,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ These iterators produce array views of one smaller dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":13942,"byte_end":14007,"line_start":387,"line_end":387,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14008,"byte_end":14011,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ For example, for a 2D array, `.outer_iter()` will produce the 1D rows.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14012,"byte_end":14086,"line_start":389,"line_end":389,"column_start":1,"column_end":75}},{"value":"/ For a 3D array, `.outer_iter()` produces 2D subviews.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14087,"byte_end":14144,"line_start":390,"line_end":390,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14145,"byte_end":14148,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ `.axis_iter()` is like `outer_iter()` but allows you to pick which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14149,"byte_end":14219,"line_start":392,"line_end":392,"column_start":1,"column_end":71}},{"value":"/ axis to traverse.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14220,"byte_end":14241,"line_start":393,"line_end":393,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14242,"byte_end":14245,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ The `outer_iter` and `axis_iter` are one dimensional producers.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14246,"byte_end":14313,"line_start":395,"line_end":395,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14314,"byte_end":14317,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ ## `.genrows()`, `.gencolumns()` and `.lanes()`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14318,"byte_end":14369,"line_start":397,"line_end":397,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14370,"byte_end":14373,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ [`.genrows()`][gr] is a producer (and iterable) of all rows in an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14374,"byte_end":14450,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14451,"byte_end":14454,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14455,"byte_end":14462,"line_start":401,"line_end":401,"column_start":1,"column_end":8}},{"value":"/ use ndarray::Array;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14463,"byte_end":14486,"line_start":402,"line_end":402,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14487,"byte_end":14490,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ // 1. Loop over the rows of a 2D array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14491,"byte_end":14533,"line_start":404,"line_end":404,"column_start":1,"column_end":43}},{"value":"/ let mut a = Array::zeros((10, 10));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14534,"byte_end":14573,"line_start":405,"line_end":405,"column_start":1,"column_end":40}},{"value":"/ for mut row in a.genrows_mut() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14574,"byte_end":14610,"line_start":406,"line_end":406,"column_start":1,"column_end":37}},{"value":"/     row.fill(1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14611,"byte_end":14632,"line_start":407,"line_end":407,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14633,"byte_end":14638,"line_start":408,"line_end":408,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14639,"byte_end":14642,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ // 2. Use Zip to pair each row in 2D `a` with elements in 1D `b`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14643,"byte_end":14711,"line_start":410,"line_end":410,"column_start":1,"column_end":69}},{"value":"/ use ndarray::Zip;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14712,"byte_end":14733,"line_start":411,"line_end":411,"column_start":1,"column_end":22}},{"value":"/ let mut b = Array::zeros(a.rows());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14734,"byte_end":14773,"line_start":412,"line_end":412,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14774,"byte_end":14777,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ Zip::from(a.genrows())","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14778,"byte_end":14804,"line_start":414,"line_end":414,"column_start":1,"column_end":27}},{"value":"/     .and(&mut b)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14805,"byte_end":14825,"line_start":415,"line_end":415,"column_start":1,"column_end":21}},{"value":"/     .apply(|a_row, b_elt| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14826,"byte_end":14857,"line_start":416,"line_end":416,"column_start":1,"column_end":32}},{"value":"/         *b_elt = a_row[a.cols() - 1] - a_row[0];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14858,"byte_end":14910,"line_start":417,"line_end":417,"column_start":1,"column_end":53}},{"value":"/     });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14911,"byte_end":14922,"line_start":418,"line_end":418,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14923,"byte_end":14930,"line_start":419,"line_end":419,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14931,"byte_end":14934,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ The *lanes* of an array are 1D segments along an axis and when pointed","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":14935,"byte_end":15009,"line_start":421,"line_end":421,"column_start":1,"column_end":75}},{"value":"/ along the last axis they are *rows*, when pointed along the first axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15010,"byte_end":15084,"line_start":422,"line_end":422,"column_start":1,"column_end":75}},{"value":"/ they are *columns*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15085,"byte_end":15108,"line_start":423,"line_end":423,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15109,"byte_end":15112,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ A *m* × *n* array has *m* rows each of length *n* and conversely","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15113,"byte_end":15182,"line_start":425,"line_end":425,"column_start":1,"column_end":69}},{"value":"/ *n* columns each of length *m*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15183,"byte_end":15218,"line_start":426,"line_end":426,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15219,"byte_end":15222,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ To generalize this, we say that an array of dimension *a* × *m* × *n*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15223,"byte_end":15298,"line_start":428,"line_end":428,"column_start":1,"column_end":74}},{"value":"/ has *a m* rows. It's composed of *a* times the previous array, so it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15299,"byte_end":15371,"line_start":429,"line_end":429,"column_start":1,"column_end":73}},{"value":"/ has *a* times as many rows.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15372,"byte_end":15403,"line_start":430,"line_end":430,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15404,"byte_end":15407,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ All methods: [`.genrows()`][gr], [`.genrows_mut()`][grm],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15408,"byte_end":15469,"line_start":432,"line_end":432,"column_start":1,"column_end":62}},{"value":"/ [`.gencolumns()`][gc], [`.gencolumns_mut()`][gcm],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15470,"byte_end":15524,"line_start":433,"line_end":433,"column_start":1,"column_end":55}},{"value":"/ [`.lanes(axis)`][l], [`.lanes_mut(axis)`][lm].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15525,"byte_end":15575,"line_start":434,"line_end":434,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15576,"byte_end":15579,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ [gr]: #method.genrows","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15580,"byte_end":15605,"line_start":436,"line_end":436,"column_start":1,"column_end":26}},{"value":"/ [grm]: #method.genrows_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15606,"byte_end":15636,"line_start":437,"line_end":437,"column_start":1,"column_end":31}},{"value":"/ [gc]: #method.gencolumns","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15637,"byte_end":15665,"line_start":438,"line_end":438,"column_start":1,"column_end":29}},{"value":"/ [gcm]: #method.gencolumns_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15666,"byte_end":15699,"line_start":439,"line_end":439,"column_start":1,"column_end":34}},{"value":"/ [l]: #method.lanes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15700,"byte_end":15722,"line_start":440,"line_end":440,"column_start":1,"column_end":23}},{"value":"/ [lm]: #method.lanes_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15723,"byte_end":15750,"line_start":441,"line_end":441,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15751,"byte_end":15754,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ Yes, for 2D arrays `.genrows()` and `.outer_iter()` have about the same","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15755,"byte_end":15830,"line_start":443,"line_end":443,"column_start":1,"column_end":76}},{"value":"/ effect:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15831,"byte_end":15842,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15843,"byte_end":15846,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/  + `genrows()` is a producer with *n* - 1 dimensions of 1 dimensional items","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15847,"byte_end":15926,"line_start":446,"line_end":446,"column_start":1,"column_end":80}},{"value":"/  + `outer_iter()` is a producer with 1 dimension of *n* - 1 dimensional items","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":15927,"byte_end":16008,"line_start":447,"line_end":447,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16009,"byte_end":16012,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ ## Slicing","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16013,"byte_end":16027,"line_start":449,"line_end":449,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16028,"byte_end":16031,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ You can use slicing to create a view of a subset of the data in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16032,"byte_end":16099,"line_start":451,"line_end":451,"column_start":1,"column_end":68}},{"value":"/ the array. Slicing methods include [`.slice()`], [`.slice_mut()`],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16100,"byte_end":16170,"line_start":452,"line_end":452,"column_start":1,"column_end":71}},{"value":"/ [`.slice_move()`], and [`.slice_collapse()`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16171,"byte_end":16220,"line_start":453,"line_end":453,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16221,"byte_end":16224,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ The slicing argument can be passed using the macro [`s![]`](macro.s!.html),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16225,"byte_end":16304,"line_start":455,"line_end":455,"column_start":1,"column_end":80}},{"value":"/ which will be used in all examples. (The explicit form is an instance of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16305,"byte_end":16381,"line_start":456,"line_end":456,"column_start":1,"column_end":77}},{"value":"/ [`&SliceInfo`]; see its docs for more information.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16382,"byte_end":16437,"line_start":457,"line_end":457,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16438,"byte_end":16441,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ [`&SliceInfo`]: struct.SliceInfo.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16442,"byte_end":16483,"line_start":459,"line_end":459,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16484,"byte_end":16487,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ If a range is used, the axis is preserved. If an index is used, that index","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16488,"byte_end":16566,"line_start":461,"line_end":461,"column_start":1,"column_end":79}},{"value":"/ is selected and the axis is removed; this selects a subview. See","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16567,"byte_end":16635,"line_start":462,"line_end":462,"column_start":1,"column_end":69}},{"value":"/ [*Subviews*](#subviews) for more information about subviews. Note that","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16636,"byte_end":16710,"line_start":463,"line_end":463,"column_start":1,"column_end":75}},{"value":"/ [`.slice_collapse()`] behaves like [`.collapse_axis()`] by preserving","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16711,"byte_end":16784,"line_start":464,"line_end":464,"column_start":1,"column_end":74}},{"value":"/ the number of dimensions.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16785,"byte_end":16814,"line_start":465,"line_end":465,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16815,"byte_end":16818,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ [`.slice()`]: #method.slice","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16819,"byte_end":16850,"line_start":467,"line_end":467,"column_start":1,"column_end":32}},{"value":"/ [`.slice_mut()`]: #method.slice_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16851,"byte_end":16890,"line_start":468,"line_end":468,"column_start":1,"column_end":40}},{"value":"/ [`.slice_move()`]: #method.slice_move","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16891,"byte_end":16932,"line_start":469,"line_end":469,"column_start":1,"column_end":42}},{"value":"/ [`.slice_collapse()`]: #method.slice_collapse","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16933,"byte_end":16982,"line_start":470,"line_end":470,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16983,"byte_end":16986,"line_start":471,"line_end":471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16987,"byte_end":16994,"line_start":472,"line_end":472,"column_start":1,"column_end":8}},{"value":"/ // import the s![] macro","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":16995,"byte_end":17023,"line_start":473,"line_end":473,"column_start":1,"column_end":29}},{"value":"/ #[macro_use(s)]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17024,"byte_end":17043,"line_start":474,"line_end":474,"column_start":1,"column_end":20}},{"value":"/ extern crate ndarray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17044,"byte_end":17069,"line_start":475,"line_end":475,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17070,"byte_end":17073,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ use ndarray::{arr2, arr3};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17074,"byte_end":17104,"line_start":477,"line_end":477,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17105,"byte_end":17108,"line_start":478,"line_end":478,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17109,"byte_end":17124,"line_start":479,"line_end":479,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17125,"byte_end":17128,"line_start":480,"line_end":480,"column_start":1,"column_end":4}},{"value":"/ // 2 submatrices of 2 rows with 3 elements per row, means a shape of `[2, 2, 3]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17129,"byte_end":17214,"line_start":481,"line_end":481,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17215,"byte_end":17218,"line_start":482,"line_end":482,"column_start":1,"column_end":4}},{"value":"/ let a = arr3(&[[[ 1,  2,  3],     // -- 2 rows  \\_","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17219,"byte_end":17273,"line_start":483,"line_end":483,"column_start":1,"column_end":55}},{"value":"/                 [ 4,  5,  6]],    // --         /","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17274,"byte_end":17327,"line_start":484,"line_end":484,"column_start":1,"column_end":54}},{"value":"/                [[ 7,  8,  9],     //            \\_ 2 submatrices","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17328,"byte_end":17396,"line_start":485,"line_end":485,"column_start":1,"column_end":69}},{"value":"/                 [10, 11, 12]]]);  //            /","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17397,"byte_end":17450,"line_start":486,"line_end":486,"column_start":1,"column_end":54}},{"value":"/ //  3 columns ..../.../.../","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17451,"byte_end":17482,"line_start":487,"line_end":487,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17483,"byte_end":17486,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a.shape(), &[2, 2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17487,"byte_end":17525,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17526,"byte_end":17529,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ // Let’s create a slice with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17530,"byte_end":17564,"line_start":491,"line_end":491,"column_start":1,"column_end":33}},{"value":"/ //","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17565,"byte_end":17571,"line_start":492,"line_end":492,"column_start":1,"column_end":7}},{"value":"/ // - Both of the submatrices of the greatest dimension: `..`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17572,"byte_end":17636,"line_start":493,"line_end":493,"column_start":1,"column_end":65}},{"value":"/ // - Only the first row in each submatrix: `0..1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17637,"byte_end":17690,"line_start":494,"line_end":494,"column_start":1,"column_end":54}},{"value":"/ // - Every element in each row: `..`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17691,"byte_end":17731,"line_start":495,"line_end":495,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17732,"byte_end":17735,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ let b = a.slice(s![.., 0..1, ..]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17736,"byte_end":17774,"line_start":497,"line_end":497,"column_start":1,"column_end":39}},{"value":"/ let c = arr3(&[[[ 1,  2,  3]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17775,"byte_end":17809,"line_start":498,"line_end":498,"column_start":1,"column_end":35}},{"value":"/                [[ 7,  8,  9]]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17810,"byte_end":17846,"line_start":499,"line_end":499,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, c);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17847,"byte_end":17868,"line_start":500,"line_end":500,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(b.shape(), &[2, 1, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17869,"byte_end":17907,"line_start":501,"line_end":501,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17908,"byte_end":17911,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ // Let’s create a slice with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17912,"byte_end":17946,"line_start":503,"line_end":503,"column_start":1,"column_end":33}},{"value":"/ //","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17947,"byte_end":17953,"line_start":504,"line_end":504,"column_start":1,"column_end":7}},{"value":"/ // - Both submatrices of the greatest dimension: `..`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":17954,"byte_end":18011,"line_start":505,"line_end":505,"column_start":1,"column_end":58}},{"value":"/ // - The last row in each submatrix: `-1..`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18012,"byte_end":18059,"line_start":506,"line_end":506,"column_start":1,"column_end":48}},{"value":"/ // - Row elements in reverse order: `..;-1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18060,"byte_end":18107,"line_start":507,"line_end":507,"column_start":1,"column_end":48}},{"value":"/ let d = a.slice(s![.., -1.., ..;-1]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18108,"byte_end":18149,"line_start":508,"line_end":508,"column_start":1,"column_end":42}},{"value":"/ let e = arr3(&[[[ 6,  5,  4]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18150,"byte_end":18184,"line_start":509,"line_end":509,"column_start":1,"column_end":35}},{"value":"/                [[12, 11, 10]]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18185,"byte_end":18221,"line_start":510,"line_end":510,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(d, e);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18222,"byte_end":18243,"line_start":511,"line_end":511,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(d.shape(), &[2, 1, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18244,"byte_end":18282,"line_start":512,"line_end":512,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18283,"byte_end":18286,"line_start":513,"line_end":513,"column_start":1,"column_end":4}},{"value":"/ // Let’s create a slice while selecting a subview with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18287,"byte_end":18347,"line_start":514,"line_end":514,"column_start":1,"column_end":59}},{"value":"/ //","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18348,"byte_end":18354,"line_start":515,"line_end":515,"column_start":1,"column_end":7}},{"value":"/ // - Both submatrices of the greatest dimension: `..`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18355,"byte_end":18412,"line_start":516,"line_end":516,"column_start":1,"column_end":58}},{"value":"/ // - The last row in each submatrix, removing that axis: `-1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18413,"byte_end":18478,"line_start":517,"line_end":517,"column_start":1,"column_end":66}},{"value":"/ // - Row elements in reverse order: `..;-1`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18479,"byte_end":18526,"line_start":518,"line_end":518,"column_start":1,"column_end":48}},{"value":"/ let f = a.slice(s![.., -1, ..;-1]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18527,"byte_end":18566,"line_start":519,"line_end":519,"column_start":1,"column_end":40}},{"value":"/ let g = arr2(&[[ 6,  5,  4],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18567,"byte_end":18599,"line_start":520,"line_end":520,"column_start":1,"column_end":33}},{"value":"/                [12, 11, 10]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18600,"byte_end":18634,"line_start":521,"line_end":521,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, g);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18635,"byte_end":18656,"line_start":522,"line_end":522,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(f.shape(), &[2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18657,"byte_end":18692,"line_start":523,"line_end":523,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18693,"byte_end":18698,"line_start":524,"line_end":524,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18699,"byte_end":18706,"line_start":525,"line_end":525,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18707,"byte_end":18710,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ ## Subviews","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18711,"byte_end":18726,"line_start":527,"line_end":527,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18727,"byte_end":18730,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ Subview methods allow you to restrict the array view while removing one","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18731,"byte_end":18806,"line_start":529,"line_end":529,"column_start":1,"column_end":76}},{"value":"/ axis from the array. Methods for selecting individual subviews include","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18807,"byte_end":18881,"line_start":530,"line_end":530,"column_start":1,"column_end":75}},{"value":"/ [`.index_axis()`], [`.index_axis_mut()`], [`.index_axis_move()`], and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18882,"byte_end":18955,"line_start":531,"line_end":531,"column_start":1,"column_end":74}},{"value":"/ [`.index_axis_inplace()`]. You can also select a subview by using a single","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":18956,"byte_end":19034,"line_start":532,"line_end":532,"column_start":1,"column_end":79}},{"value":"/ index instead of a range when slicing. Some other methods, such as","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19035,"byte_end":19105,"line_start":533,"line_end":533,"column_start":1,"column_end":71}},{"value":"/ [`.fold_axis()`], [`.axis_iter()`], [`.axis_iter_mut()`],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19106,"byte_end":19167,"line_start":534,"line_end":534,"column_start":1,"column_end":62}},{"value":"/ [`.outer_iter()`], and [`.outer_iter_mut()`] operate on all the subviews","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19168,"byte_end":19244,"line_start":535,"line_end":535,"column_start":1,"column_end":77}},{"value":"/ along an axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19245,"byte_end":19263,"line_start":536,"line_end":536,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19264,"byte_end":19267,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ A related method is [`.collapse_axis()`], which modifies the view in the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19268,"byte_end":19344,"line_start":538,"line_end":538,"column_start":1,"column_end":77}},{"value":"/ same way as [`.index_axis()`] except for removing the collapsed axis, since","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19345,"byte_end":19424,"line_start":539,"line_end":539,"column_start":1,"column_end":80}},{"value":"/ it operates *in place*. The length of the axis becomes 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19425,"byte_end":19486,"line_start":540,"line_end":540,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19487,"byte_end":19490,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ Methods for selecting an individual subview take two arguments: `axis` and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19491,"byte_end":19569,"line_start":542,"line_end":542,"column_start":1,"column_end":79}},{"value":"/ `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19570,"byte_end":19582,"line_start":543,"line_end":543,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19583,"byte_end":19586,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ [`.axis_iter()`]: #method.axis_iter","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19587,"byte_end":19626,"line_start":545,"line_end":545,"column_start":1,"column_end":40}},{"value":"/ [`.axis_iter_mut()`]: #method.axis_iter_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19627,"byte_end":19674,"line_start":546,"line_end":546,"column_start":1,"column_end":48}},{"value":"/ [`.fold_axis()`]: #method.fold_axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19675,"byte_end":19714,"line_start":547,"line_end":547,"column_start":1,"column_end":40}},{"value":"/ [`.index_axis()`]: #method.index_axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19715,"byte_end":19756,"line_start":548,"line_end":548,"column_start":1,"column_end":42}},{"value":"/ [`.index_axis_inplace()`]: #method.index_axis_inplace","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19757,"byte_end":19814,"line_start":549,"line_end":549,"column_start":1,"column_end":58}},{"value":"/ [`.index_axis_mut()`]: #method.index_axis_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19815,"byte_end":19864,"line_start":550,"line_end":550,"column_start":1,"column_end":50}},{"value":"/ [`.index_axis_move()`]: #method.index_axis_move","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19865,"byte_end":19916,"line_start":551,"line_end":551,"column_start":1,"column_end":52}},{"value":"/ [`.collapse_axis()`]: #method.collapse_axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19917,"byte_end":19964,"line_start":552,"line_end":552,"column_start":1,"column_end":48}},{"value":"/ [`.outer_iter()`]: #method.outer_iter","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":19965,"byte_end":20006,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/ [`.outer_iter_mut()`]: #method.outer_iter_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20007,"byte_end":20056,"line_start":554,"line_end":554,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20057,"byte_end":20060,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20061,"byte_end":20068,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ #[macro_use(s)] extern crate ndarray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20069,"byte_end":20110,"line_start":557,"line_end":557,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20111,"byte_end":20114,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ use ndarray::{arr3, aview1, aview2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20115,"byte_end":20161,"line_start":559,"line_end":559,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20162,"byte_end":20165,"line_start":560,"line_end":560,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20166,"byte_end":20183,"line_start":561,"line_end":561,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20184,"byte_end":20187,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ // 2 submatrices of 2 rows with 3 elements per row, means a shape of `[2, 2, 3]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20188,"byte_end":20273,"line_start":563,"line_end":563,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20274,"byte_end":20277,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ let a = arr3(&[[[ 1,  2,  3],    // \\ axis 0, submatrix 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20278,"byte_end":20339,"line_start":565,"line_end":565,"column_start":1,"column_end":62}},{"value":"/                 [ 4,  5,  6]],   // /","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20340,"byte_end":20381,"line_start":566,"line_end":566,"column_start":1,"column_end":42}},{"value":"/                [[ 7,  8,  9],    // \\ axis 0, submatrix 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20382,"byte_end":20443,"line_start":567,"line_end":567,"column_start":1,"column_end":62}},{"value":"/                 [10, 11, 12]]]); // /","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20444,"byte_end":20485,"line_start":568,"line_end":568,"column_start":1,"column_end":42}},{"value":"/         //        \\","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20486,"byte_end":20509,"line_start":569,"line_end":569,"column_start":1,"column_end":24}},{"value":"/         //         axis 2, column 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20510,"byte_end":20549,"line_start":570,"line_end":570,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20550,"byte_end":20553,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a.shape(), &[2, 2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20554,"byte_end":20592,"line_start":572,"line_end":572,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20593,"byte_end":20596,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ // Let’s take a subview along the greatest dimension (axis 0),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20597,"byte_end":20665,"line_start":574,"line_end":574,"column_start":1,"column_end":67}},{"value":"/ // taking submatrix 0, then submatrix 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20666,"byte_end":20709,"line_start":575,"line_end":575,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20710,"byte_end":20713,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ let sub_0 = a.index_axis(Axis(0), 0);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20714,"byte_end":20755,"line_start":577,"line_end":577,"column_start":1,"column_end":42}},{"value":"/ let sub_1 = a.index_axis(Axis(0), 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20756,"byte_end":20797,"line_start":578,"line_end":578,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20798,"byte_end":20801,"line_start":579,"line_end":579,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(sub_0, aview2(&[[ 1,  2,  3],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20802,"byte_end":20846,"line_start":580,"line_end":580,"column_start":1,"column_end":45}},{"value":"/                            [ 4,  5,  6]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20847,"byte_end":20894,"line_start":581,"line_end":581,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(sub_1, aview2(&[[ 7,  8,  9],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20895,"byte_end":20939,"line_start":582,"line_end":582,"column_start":1,"column_end":45}},{"value":"/                            [10, 11, 12]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20940,"byte_end":20987,"line_start":583,"line_end":583,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(sub_0.shape(), &[2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":20988,"byte_end":21027,"line_start":584,"line_end":584,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21028,"byte_end":21031,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ // This is the subview picking only axis 2, column 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21032,"byte_end":21088,"line_start":586,"line_end":586,"column_start":1,"column_end":57}},{"value":"/ let sub_col = a.index_axis(Axis(2), 0);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21089,"byte_end":21132,"line_start":587,"line_end":587,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21133,"byte_end":21136,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(sub_col, aview2(&[[ 1,  4],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21137,"byte_end":21179,"line_start":589,"line_end":589,"column_start":1,"column_end":43}},{"value":"/                              [ 7, 10]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21180,"byte_end":21225,"line_start":590,"line_end":590,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21226,"byte_end":21229,"line_start":591,"line_end":591,"column_start":1,"column_end":4}},{"value":"/ // You can take multiple subviews at once (and slice at the same time)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21230,"byte_end":21304,"line_start":592,"line_end":592,"column_start":1,"column_end":75}},{"value":"/ let double_sub = a.slice(s![1, .., 0]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21305,"byte_end":21348,"line_start":593,"line_end":593,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(double_sub, aview1(&[7, 10]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21349,"byte_end":21394,"line_start":594,"line_end":594,"column_start":1,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21395,"byte_end":21402,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21403,"byte_end":21410,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21411,"byte_end":21414,"line_start":597,"line_end":597,"column_start":1,"column_end":4}},{"value":"/ ## Arithmetic Operations","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21415,"byte_end":21443,"line_start":598,"line_end":598,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21444,"byte_end":21447,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Arrays support all arithmetic operations the same way: they apply elementwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21448,"byte_end":21530,"line_start":600,"line_end":600,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21531,"byte_end":21534,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ Since the trait implementations are hard to overview, here is a summary.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21535,"byte_end":21611,"line_start":602,"line_end":602,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21612,"byte_end":21615,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ ### Binary Operators with Two Arrays","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21616,"byte_end":21656,"line_start":604,"line_end":604,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21657,"byte_end":21660,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Let `A` be an array or view of any kind. Let `B` be an array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21661,"byte_end":21725,"line_start":606,"line_end":606,"column_start":1,"column_end":65}},{"value":"/ with owned storage (either `Array` or `ArcArray`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21726,"byte_end":21780,"line_start":607,"line_end":607,"column_start":1,"column_end":55}},{"value":"/ Let `C` be an array with mutable data (either `Array`, `ArcArray`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21781,"byte_end":21850,"line_start":608,"line_end":608,"column_start":1,"column_end":70}},{"value":"/ or `ArrayViewMut`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21851,"byte_end":21874,"line_start":609,"line_end":609,"column_start":1,"column_end":24}},{"value":"/ The following combinations of operands","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21875,"byte_end":21917,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ are supported for an arbitrary binary operator denoted by `@` (it can be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21918,"byte_end":21994,"line_start":611,"line_end":611,"column_start":1,"column_end":77}},{"value":"/ `+`, `-`, `*`, `/` and so on).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":21995,"byte_end":22029,"line_start":612,"line_end":612,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22030,"byte_end":22033,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ - `&A @ &A` which produces a new `Array`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22034,"byte_end":22078,"line_start":614,"line_end":614,"column_start":1,"column_end":45}},{"value":"/ - `B @ A` which consumes `B`, updates it with the result, and returns it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22079,"byte_end":22155,"line_start":615,"line_end":615,"column_start":1,"column_end":77}},{"value":"/ - `B @ &A` which consumes `B`, updates it with the result, and returns it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22156,"byte_end":22233,"line_start":616,"line_end":616,"column_start":1,"column_end":78}},{"value":"/ - `C @= &A` which performs an arithmetic operation in place","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22234,"byte_end":22297,"line_start":617,"line_end":617,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22298,"byte_end":22301,"line_start":618,"line_end":618,"column_start":1,"column_end":4}},{"value":"/ ### Binary Operators with Array and Scalar","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22302,"byte_end":22348,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22349,"byte_end":22352,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ The trait [`ScalarOperand`](trait.ScalarOperand.html) marks types that can be used in arithmetic","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22353,"byte_end":22453,"line_start":621,"line_end":621,"column_start":1,"column_end":101}},{"value":"/ with arrays directly. For a scalar `K` the following combinations of operands","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22454,"byte_end":22535,"line_start":622,"line_end":622,"column_start":1,"column_end":82}},{"value":"/ are supported (scalar can be on either the left or right side, but","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22536,"byte_end":22606,"line_start":623,"line_end":623,"column_start":1,"column_end":71}},{"value":"/ `ScalarOperand` docs has the detailed condtions).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22607,"byte_end":22660,"line_start":624,"line_end":624,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22661,"byte_end":22664,"line_start":625,"line_end":625,"column_start":1,"column_end":4}},{"value":"/ - `&A @ K` or `K @ &A` which produces a new `Array`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22665,"byte_end":22720,"line_start":626,"line_end":626,"column_start":1,"column_end":56}},{"value":"/ - `B @ K` or `K @ B` which consumes `B`, updates it with the result and returns it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22721,"byte_end":22807,"line_start":627,"line_end":627,"column_start":1,"column_end":87}},{"value":"/ - `C @= K` which performs an arithmetic operation in place","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22808,"byte_end":22870,"line_start":628,"line_end":628,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22871,"byte_end":22874,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ ### Unary Operators","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22875,"byte_end":22898,"line_start":630,"line_end":630,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22899,"byte_end":22902,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ Let `A` be an array or view of any kind. Let `B` be an array with owned","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22903,"byte_end":22978,"line_start":632,"line_end":632,"column_start":1,"column_end":76}},{"value":"/ storage (either `Array` or `ArcArray`). The following operands are supported","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":22979,"byte_end":23059,"line_start":633,"line_end":633,"column_start":1,"column_end":81}},{"value":"/ for an arbitrary unary operator denoted by `@` (it can be `-` or `!`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23060,"byte_end":23134,"line_start":634,"line_end":634,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23135,"byte_end":23138,"line_start":635,"line_end":635,"column_start":1,"column_end":4}},{"value":"/ - `@&A` which produces a new `Array`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23139,"byte_end":23179,"line_start":636,"line_end":636,"column_start":1,"column_end":41}},{"value":"/ - `@B` which consumes `B`, updates it with the result, and returns it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23180,"byte_end":23253,"line_start":637,"line_end":637,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23254,"byte_end":23257,"line_start":638,"line_end":638,"column_start":1,"column_end":4}},{"value":"/ ## Broadcasting","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23258,"byte_end":23277,"line_start":639,"line_end":639,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23278,"byte_end":23281,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ Arrays support limited *broadcasting*, where arithmetic operations with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23282,"byte_end":23357,"line_start":641,"line_end":641,"column_start":1,"column_end":76}},{"value":"/ array operands of different sizes can be carried out by repeating the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23358,"byte_end":23431,"line_start":642,"line_end":642,"column_start":1,"column_end":74}},{"value":"/ elements of the smaller dimension array. See","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23432,"byte_end":23480,"line_start":643,"line_end":643,"column_start":1,"column_end":49}},{"value":"/ [`.broadcast()`](#method.broadcast) for a more detailed","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23481,"byte_end":23540,"line_start":644,"line_end":644,"column_start":1,"column_end":60}},{"value":"/ description.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23541,"byte_end":23557,"line_start":645,"line_end":645,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23558,"byte_end":23561,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23562,"byte_end":23569,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23570,"byte_end":23592,"line_start":648,"line_end":648,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23593,"byte_end":23596,"line_start":649,"line_end":649,"column_start":1,"column_end":4}},{"value":"/ let a = arr2(&[[1., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23597,"byte_end":23625,"line_start":650,"line_end":650,"column_start":1,"column_end":29}},{"value":"/                [1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23626,"byte_end":23654,"line_start":651,"line_end":651,"column_start":1,"column_end":29}},{"value":"/                [0., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23655,"byte_end":23683,"line_start":652,"line_end":652,"column_start":1,"column_end":29}},{"value":"/                [0., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23684,"byte_end":23714,"line_start":653,"line_end":653,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23715,"byte_end":23718,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ let b = arr2(&[[0., 1.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23719,"byte_end":23749,"line_start":655,"line_end":655,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23750,"byte_end":23753,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ let c = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23754,"byte_end":23782,"line_start":657,"line_end":657,"column_start":1,"column_end":29}},{"value":"/                [1., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23783,"byte_end":23811,"line_start":658,"line_end":658,"column_start":1,"column_end":29}},{"value":"/                [0., 4.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23812,"byte_end":23840,"line_start":659,"line_end":659,"column_start":1,"column_end":29}},{"value":"/                [0., 5.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23841,"byte_end":23871,"line_start":660,"line_end":660,"column_start":1,"column_end":31}},{"value":"/ // We can add because the shapes are compatible even if not equal.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23872,"byte_end":23942,"line_start":661,"line_end":661,"column_start":1,"column_end":71}},{"value":"/ // The `b` array is shape 1 × 2 but acts like a 4 × 2 array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":23943,"byte_end":24009,"line_start":662,"line_end":662,"column_start":1,"column_end":65}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24010,"byte_end":24022,"line_start":663,"line_end":663,"column_start":1,"column_end":13}},{"value":"/     c == a + b","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24023,"byte_end":24041,"line_start":664,"line_end":664,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24042,"byte_end":24048,"line_start":665,"line_end":665,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24049,"byte_end":24056,"line_start":666,"line_end":666,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24057,"byte_end":24060,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ ## Conversions","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24061,"byte_end":24079,"line_start":668,"line_end":668,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24080,"byte_end":24083,"line_start":669,"line_end":669,"column_start":1,"column_end":4}},{"value":"/ ### Conversions Between Array Types","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24084,"byte_end":24123,"line_start":670,"line_end":670,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24124,"byte_end":24127,"line_start":671,"line_end":671,"column_start":1,"column_end":4}},{"value":"/ This table is a summary of the conversions between arrays of different","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24128,"byte_end":24202,"line_start":672,"line_end":672,"column_start":1,"column_end":75}},{"value":"/ ownership, dimensionality, and element type. All of the conversions in this","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24203,"byte_end":24282,"line_start":673,"line_end":673,"column_start":1,"column_end":80}},{"value":"/ table preserve the shape of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24283,"byte_end":24325,"line_start":674,"line_end":674,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24326,"byte_end":24329,"line_start":675,"line_end":675,"column_start":1,"column_end":4}},{"value":"/ <table>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24330,"byte_end":24341,"line_start":676,"line_end":676,"column_start":1,"column_end":12}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24342,"byte_end":24350,"line_start":677,"line_end":677,"column_start":1,"column_end":9}},{"value":"/ <th rowspan=\"2\">Output</th>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24351,"byte_end":24382,"line_start":678,"line_end":678,"column_start":1,"column_end":32}},{"value":"/ <th colspan=\"4\">Input</th>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24383,"byte_end":24413,"line_start":679,"line_end":679,"column_start":1,"column_end":31}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24414,"byte_end":24423,"line_start":680,"line_end":680,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24424,"byte_end":24427,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24428,"byte_end":24436,"line_start":682,"line_end":682,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24437,"byte_end":24445,"line_start":683,"line_end":683,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24446,"byte_end":24449,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"/ `Array<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24450,"byte_end":24467,"line_start":685,"line_end":685,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24468,"byte_end":24471,"line_start":686,"line_end":686,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24472,"byte_end":24481,"line_start":687,"line_end":687,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24482,"byte_end":24490,"line_start":688,"line_end":688,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24491,"byte_end":24494,"line_start":689,"line_end":689,"column_start":1,"column_end":4}},{"value":"/ `ArcArray<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24495,"byte_end":24515,"line_start":690,"line_end":690,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24516,"byte_end":24519,"line_start":691,"line_end":691,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24520,"byte_end":24529,"line_start":692,"line_end":692,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24530,"byte_end":24538,"line_start":693,"line_end":693,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24539,"byte_end":24542,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ `ArrayView<'a, A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24543,"byte_end":24568,"line_start":695,"line_end":695,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24569,"byte_end":24572,"line_start":696,"line_end":696,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24573,"byte_end":24582,"line_start":697,"line_end":697,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24583,"byte_end":24591,"line_start":698,"line_end":698,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24592,"byte_end":24595,"line_start":699,"line_end":699,"column_start":1,"column_end":4}},{"value":"/ `ArrayViewMut<'a, A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24596,"byte_end":24624,"line_start":700,"line_end":700,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24625,"byte_end":24628,"line_start":701,"line_end":701,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24629,"byte_end":24638,"line_start":702,"line_end":702,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24639,"byte_end":24648,"line_start":703,"line_end":703,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24649,"byte_end":24652,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to `Array<A, D>`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24653,"byte_end":24692,"line_start":705,"line_end":705,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24693,"byte_end":24696,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24697,"byte_end":24705,"line_start":707,"line_end":707,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24706,"byte_end":24714,"line_start":708,"line_end":708,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24715,"byte_end":24718,"line_start":709,"line_end":709,"column_start":1,"column_end":4}},{"value":"/ `Array<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24719,"byte_end":24736,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24737,"byte_end":24740,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24741,"byte_end":24750,"line_start":712,"line_end":712,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24751,"byte_end":24759,"line_start":713,"line_end":713,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24760,"byte_end":24763,"line_start":714,"line_end":714,"column_start":1,"column_end":4}},{"value":"/ no-op","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24764,"byte_end":24773,"line_start":715,"line_end":715,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24774,"byte_end":24777,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24778,"byte_end":24787,"line_start":717,"line_end":717,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24788,"byte_end":24796,"line_start":718,"line_end":718,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24797,"byte_end":24800,"line_start":719,"line_end":719,"column_start":1,"column_end":4}},{"value":"/ [`a.into_owned()`][.into_owned()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24801,"byte_end":24838,"line_start":720,"line_end":720,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24839,"byte_end":24842,"line_start":721,"line_end":721,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24843,"byte_end":24852,"line_start":722,"line_end":722,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24853,"byte_end":24861,"line_start":723,"line_end":723,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24862,"byte_end":24865,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ [`a.to_owned()`][.to_owned()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24866,"byte_end":24899,"line_start":725,"line_end":725,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24900,"byte_end":24903,"line_start":726,"line_end":726,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24904,"byte_end":24913,"line_start":727,"line_end":727,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24914,"byte_end":24922,"line_start":728,"line_end":728,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24923,"byte_end":24926,"line_start":729,"line_end":729,"column_start":1,"column_end":4}},{"value":"/ [`a.to_owned()`][.to_owned()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24927,"byte_end":24960,"line_start":730,"line_end":730,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24961,"byte_end":24964,"line_start":731,"line_end":731,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24965,"byte_end":24974,"line_start":732,"line_end":732,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24975,"byte_end":24984,"line_start":733,"line_end":733,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24985,"byte_end":24988,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to `ArcArray<A, D>`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":24989,"byte_end":25031,"line_start":735,"line_end":735,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25032,"byte_end":25035,"line_start":736,"line_end":736,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25036,"byte_end":25044,"line_start":737,"line_end":737,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25045,"byte_end":25053,"line_start":738,"line_end":738,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25054,"byte_end":25057,"line_start":739,"line_end":739,"column_start":1,"column_end":4}},{"value":"/ `ArcArray<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25058,"byte_end":25078,"line_start":740,"line_end":740,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25079,"byte_end":25082,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25083,"byte_end":25092,"line_start":742,"line_end":742,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25093,"byte_end":25101,"line_start":743,"line_end":743,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25102,"byte_end":25105,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ [`a.into_shared()`][.into_shared()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25106,"byte_end":25145,"line_start":745,"line_end":745,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25146,"byte_end":25149,"line_start":746,"line_end":746,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25150,"byte_end":25159,"line_start":747,"line_end":747,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25160,"byte_end":25168,"line_start":748,"line_end":748,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25169,"byte_end":25172,"line_start":749,"line_end":749,"column_start":1,"column_end":4}},{"value":"/ no-op","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25173,"byte_end":25182,"line_start":750,"line_end":750,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25183,"byte_end":25186,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25187,"byte_end":25196,"line_start":752,"line_end":752,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25197,"byte_end":25205,"line_start":753,"line_end":753,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25206,"byte_end":25209,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ [`a.to_owned().into_shared()`][.into_shared()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25210,"byte_end":25260,"line_start":755,"line_end":755,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25261,"byte_end":25264,"line_start":756,"line_end":756,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25265,"byte_end":25274,"line_start":757,"line_end":757,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25275,"byte_end":25283,"line_start":758,"line_end":758,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25284,"byte_end":25287,"line_start":759,"line_end":759,"column_start":1,"column_end":4}},{"value":"/ [`a.to_owned().into_shared()`][.into_shared()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25288,"byte_end":25338,"line_start":760,"line_end":760,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25339,"byte_end":25342,"line_start":761,"line_end":761,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25343,"byte_end":25352,"line_start":762,"line_end":762,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25353,"byte_end":25362,"line_start":763,"line_end":763,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25363,"byte_end":25366,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to `ArrayView<'b, A, D>`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25367,"byte_end":25414,"line_start":765,"line_end":765,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25415,"byte_end":25418,"line_start":766,"line_end":766,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25419,"byte_end":25427,"line_start":767,"line_end":767,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25428,"byte_end":25436,"line_start":768,"line_end":768,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25437,"byte_end":25440,"line_start":769,"line_end":769,"column_start":1,"column_end":4}},{"value":"/ `ArrayView<'b, A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25441,"byte_end":25466,"line_start":770,"line_end":770,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25467,"byte_end":25470,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25471,"byte_end":25480,"line_start":772,"line_end":772,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25481,"byte_end":25489,"line_start":773,"line_end":773,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25490,"byte_end":25493,"line_start":774,"line_end":774,"column_start":1,"column_end":4}},{"value":"/ [`a.view()`][.view()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25494,"byte_end":25519,"line_start":775,"line_end":775,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25520,"byte_end":25523,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25524,"byte_end":25533,"line_start":777,"line_end":777,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25534,"byte_end":25542,"line_start":778,"line_end":778,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25543,"byte_end":25546,"line_start":779,"line_end":779,"column_start":1,"column_end":4}},{"value":"/ [`a.view()`][.view()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25547,"byte_end":25572,"line_start":780,"line_end":780,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25573,"byte_end":25576,"line_start":781,"line_end":781,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25577,"byte_end":25586,"line_start":782,"line_end":782,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25587,"byte_end":25595,"line_start":783,"line_end":783,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25596,"byte_end":25599,"line_start":784,"line_end":784,"column_start":1,"column_end":4}},{"value":"/ [`a.view()`][.view()] or [`a.reborrow()`][ArrayView::reborrow()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25600,"byte_end":25668,"line_start":785,"line_end":785,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25669,"byte_end":25672,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25673,"byte_end":25682,"line_start":787,"line_end":787,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25683,"byte_end":25691,"line_start":788,"line_end":788,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25692,"byte_end":25695,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ [`a.view()`][.view()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25696,"byte_end":25721,"line_start":790,"line_end":790,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25722,"byte_end":25725,"line_start":791,"line_end":791,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25726,"byte_end":25735,"line_start":792,"line_end":792,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25736,"byte_end":25745,"line_start":793,"line_end":793,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25746,"byte_end":25749,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to `ArrayViewMut<'b, A, D>`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25750,"byte_end":25800,"line_start":795,"line_end":795,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25801,"byte_end":25804,"line_start":796,"line_end":796,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25805,"byte_end":25813,"line_start":797,"line_end":797,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25814,"byte_end":25822,"line_start":798,"line_end":798,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25823,"byte_end":25826,"line_start":799,"line_end":799,"column_start":1,"column_end":4}},{"value":"/ `ArrayViewMut<'b, A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25827,"byte_end":25855,"line_start":800,"line_end":800,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25856,"byte_end":25859,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25860,"byte_end":25869,"line_start":802,"line_end":802,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25870,"byte_end":25878,"line_start":803,"line_end":803,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25879,"byte_end":25882,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ [`a.view_mut()`][.view_mut()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25883,"byte_end":25916,"line_start":805,"line_end":805,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25917,"byte_end":25920,"line_start":806,"line_end":806,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25921,"byte_end":25930,"line_start":807,"line_end":807,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25931,"byte_end":25939,"line_start":808,"line_end":808,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25940,"byte_end":25943,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ [`a.view_mut()`][.view_mut()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25944,"byte_end":25977,"line_start":810,"line_end":810,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25978,"byte_end":25981,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25982,"byte_end":25991,"line_start":812,"line_end":812,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":25992,"byte_end":26000,"line_start":813,"line_end":813,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26001,"byte_end":26004,"line_start":814,"line_end":814,"column_start":1,"column_end":4}},{"value":"/ illegal","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26005,"byte_end":26016,"line_start":815,"line_end":815,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26017,"byte_end":26020,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26021,"byte_end":26030,"line_start":817,"line_end":817,"column_start":1,"column_end":10}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26031,"byte_end":26039,"line_start":818,"line_end":818,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26040,"byte_end":26043,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ [`a.view_mut()`][.view_mut()] or [`a.reborrow()`][ArrayViewMut::reborrow()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26044,"byte_end":26123,"line_start":820,"line_end":820,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26124,"byte_end":26127,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26128,"byte_end":26137,"line_start":822,"line_end":822,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26138,"byte_end":26147,"line_start":823,"line_end":823,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26148,"byte_end":26151,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to equivalent with dim `D2`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26152,"byte_end":26202,"line_start":825,"line_end":825,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26203,"byte_end":26206,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26207,"byte_end":26215,"line_start":827,"line_end":827,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26216,"byte_end":26224,"line_start":828,"line_end":828,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26225,"byte_end":26228,"line_start":829,"line_end":829,"column_start":1,"column_end":4}},{"value":"/ equivalent with dim `D2` (e.g. converting from dynamic dim to const dim)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26229,"byte_end":26305,"line_start":830,"line_end":830,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26306,"byte_end":26309,"line_start":831,"line_end":831,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26310,"byte_end":26319,"line_start":832,"line_end":832,"column_start":1,"column_end":10}},{"value":"/ <td colspan=\"4\">","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26320,"byte_end":26340,"line_start":833,"line_end":833,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26341,"byte_end":26344,"line_start":834,"line_end":834,"column_start":1,"column_end":4}},{"value":"/ [`a.into_dimensionality::<D2>()`][.into_dimensionality()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26345,"byte_end":26406,"line_start":835,"line_end":835,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26407,"byte_end":26410,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26411,"byte_end":26420,"line_start":837,"line_end":837,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26421,"byte_end":26430,"line_start":838,"line_end":838,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26431,"byte_end":26434,"line_start":839,"line_end":839,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to equivalent with dim `IxDyn`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26435,"byte_end":26488,"line_start":840,"line_end":840,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26489,"byte_end":26492,"line_start":841,"line_end":841,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26493,"byte_end":26501,"line_start":842,"line_end":842,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26502,"byte_end":26510,"line_start":843,"line_end":843,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26511,"byte_end":26514,"line_start":844,"line_end":844,"column_start":1,"column_end":4}},{"value":"/ equivalent with dim `IxDyn`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26515,"byte_end":26546,"line_start":845,"line_end":845,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26547,"byte_end":26550,"line_start":846,"line_end":846,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26551,"byte_end":26560,"line_start":847,"line_end":847,"column_start":1,"column_end":10}},{"value":"/ <td colspan=\"4\">","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26561,"byte_end":26581,"line_start":848,"line_end":848,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26582,"byte_end":26585,"line_start":849,"line_end":849,"column_start":1,"column_end":4}},{"value":"/ [`a.into_dyn()`][.into_dyn()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26586,"byte_end":26619,"line_start":850,"line_end":850,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26620,"byte_end":26623,"line_start":851,"line_end":851,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26624,"byte_end":26633,"line_start":852,"line_end":852,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26634,"byte_end":26643,"line_start":853,"line_end":853,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26644,"byte_end":26647,"line_start":854,"line_end":854,"column_start":1,"column_end":4}},{"value":"/ <!--Conversions to `Array<B, D>`-->","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26648,"byte_end":26687,"line_start":855,"line_end":855,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26688,"byte_end":26691,"line_start":856,"line_end":856,"column_start":1,"column_end":4}},{"value":"/ <tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26692,"byte_end":26700,"line_start":857,"line_end":857,"column_start":1,"column_end":9}},{"value":"/ <td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26701,"byte_end":26709,"line_start":858,"line_end":858,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26710,"byte_end":26713,"line_start":859,"line_end":859,"column_start":1,"column_end":4}},{"value":"/ `Array<B, D>` (new element type)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26714,"byte_end":26750,"line_start":860,"line_end":860,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26751,"byte_end":26754,"line_start":861,"line_end":861,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26755,"byte_end":26764,"line_start":862,"line_end":862,"column_start":1,"column_end":10}},{"value":"/ <td colspan=\"4\">","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26765,"byte_end":26785,"line_start":863,"line_end":863,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26786,"byte_end":26789,"line_start":864,"line_end":864,"column_start":1,"column_end":4}},{"value":"/ [`a.map(|x| x.do_your_conversion())`][.map()]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26790,"byte_end":26839,"line_start":865,"line_end":865,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26840,"byte_end":26843,"line_start":866,"line_end":866,"column_start":1,"column_end":4}},{"value":"/ </td>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26844,"byte_end":26853,"line_start":867,"line_end":867,"column_start":1,"column_end":10}},{"value":"/ </tr>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26854,"byte_end":26863,"line_start":868,"line_end":868,"column_start":1,"column_end":10}},{"value":"/ </table>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26864,"byte_end":26876,"line_start":869,"line_end":869,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26877,"byte_end":26880,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ ### Conversions Between Arrays and `Vec`s/Slices/Scalars","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26881,"byte_end":26941,"line_start":871,"line_end":871,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26942,"byte_end":26945,"line_start":872,"line_end":872,"column_start":1,"column_end":4}},{"value":"/ This is a table of the safe conversions between arrays and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":26946,"byte_end":27008,"line_start":873,"line_end":873,"column_start":1,"column_end":63}},{"value":"/ `Vec`s/slices/scalars. Note that some of the return values are actually","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27009,"byte_end":27084,"line_start":874,"line_end":874,"column_start":1,"column_end":76}},{"value":"/ `Result`/`Option` wrappers around the indicated output types.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27085,"byte_end":27150,"line_start":875,"line_end":875,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27151,"byte_end":27154,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ Input | Output | Methods","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27155,"byte_end":27183,"line_start":877,"line_end":877,"column_start":1,"column_end":29}},{"value":"/ ------|--------|--------","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27184,"byte_end":27212,"line_start":878,"line_end":878,"column_start":1,"column_end":29}},{"value":"/ `Vec<A>` | `ArrayBase<S: DataOwned, Ix1>` | [`::from_vec()`](#method.from_vec)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27213,"byte_end":27295,"line_start":879,"line_end":879,"column_start":1,"column_end":83}},{"value":"/ `Vec<A>` | `ArrayBase<S: DataOwned, D>` | [`::from_shape_vec()`](#method.from_shape_vec)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27296,"byte_end":27388,"line_start":880,"line_end":880,"column_start":1,"column_end":93}},{"value":"/ `&[A]` | `ArrayView1<A>` | [`::from()`](type.ArrayView.html#method.from)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27389,"byte_end":27465,"line_start":881,"line_end":881,"column_start":1,"column_end":77}},{"value":"/ `&[A]` | `ArrayView<A, D>` | [`::from_shape()`](type.ArrayView.html#method.from_shape)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27466,"byte_end":27556,"line_start":882,"line_end":882,"column_start":1,"column_end":91}},{"value":"/ `&mut [A]` | `ArrayViewMut1<A>` | [`::from()`](type.ArrayViewMut.html#method.from)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27557,"byte_end":27643,"line_start":883,"line_end":883,"column_start":1,"column_end":87}},{"value":"/ `&mut [A]` | `ArrayViewMut<A, D>` | [`::from_shape()`](type.ArrayViewMut.html#method.from_shape)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27644,"byte_end":27744,"line_start":884,"line_end":884,"column_start":1,"column_end":101}},{"value":"/ `&ArrayBase<S, Ix1>` | `Vec<A>` | [`.to_vec()`](#method.to_vec)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27745,"byte_end":27812,"line_start":885,"line_end":885,"column_start":1,"column_end":68}},{"value":"/ `Array<A, D>` | `Vec<A>` | [`.into_raw_vec()`](type.Array.html#method.into_raw_vec)<sup>[1](#into_raw_vec)</sup>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27813,"byte_end":27929,"line_start":886,"line_end":886,"column_start":1,"column_end":117}},{"value":"/ `&ArrayBase<S, D>` | `&[A]` | [`.as_slice()`](#method.as_slice)<sup>[2](#req_contig_std)</sup>, [`.as_slice_memory_order()`](#method.as_slice_memory_order)<sup>[3](#req_contig)</sup>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":27930,"byte_end":28116,"line_start":887,"line_end":887,"column_start":1,"column_end":187}},{"value":"/ `&mut ArrayBase<S: DataMut, D>` | `&mut [A]` | [`.as_slice_mut()`](#method.as_slice_mut)<sup>[2](#req_contig_std)</sup>, [`.as_slice_memory_order_mut()`](#method.as_slice_memory_order_mut)<sup>[3](#req_contig)</sup>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28117,"byte_end":28336,"line_start":888,"line_end":888,"column_start":1,"column_end":220}},{"value":"/ `ArrayView<A, D>` | `&[A]` | [`.into_slice()`](type.ArrayView.html#method.into_slice)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28337,"byte_end":28426,"line_start":889,"line_end":889,"column_start":1,"column_end":90}},{"value":"/ `ArrayViewMut<A, D>` | `&mut [A]` | [`.into_slice()`](type.ArrayViewMut.html#method.into_slice)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28427,"byte_end":28526,"line_start":890,"line_end":890,"column_start":1,"column_end":100}},{"value":"/ `Array0<A>` | `A` | [`.into_scalar()`](type.Array.html#method.into_scalar)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28527,"byte_end":28605,"line_start":891,"line_end":891,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28606,"byte_end":28609,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ <sup><a name=\"into_raw_vec\">1</a></sup>Returns the data in memory order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28610,"byte_end":28686,"line_start":893,"line_end":893,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28687,"byte_end":28690,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ <sup><a name=\"req_contig_std\">2</a></sup>Works only if the array is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28691,"byte_end":28762,"line_start":895,"line_end":895,"column_start":1,"column_end":72}},{"value":"/ contiguous and in standard order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28763,"byte_end":28800,"line_start":896,"line_end":896,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28801,"byte_end":28804,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ <sup><a name=\"req_contig\">3</a></sup>Works only if the array is contiguous.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28805,"byte_end":28884,"line_start":898,"line_end":898,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28885,"byte_end":28888,"line_start":899,"line_end":899,"column_start":1,"column_end":4}},{"value":"/ The table above does not include all the constructors; it only shows","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28889,"byte_end":28961,"line_start":900,"line_end":900,"column_start":1,"column_end":73}},{"value":"/ conversions to/from `Vec`s/slices. See below for more constructors.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":28962,"byte_end":29033,"line_start":901,"line_end":901,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29034,"byte_end":29037,"line_start":902,"line_end":902,"column_start":1,"column_end":4}},{"value":"/ [ArrayView::reborrow()]: type.ArrayView.html#method.reborrow","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29038,"byte_end":29102,"line_start":903,"line_end":903,"column_start":1,"column_end":65}},{"value":"/ [ArrayViewMut::reborrow()]: type.ArrayViewMut.html#method.reborrow","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29103,"byte_end":29173,"line_start":904,"line_end":904,"column_start":1,"column_end":71}},{"value":"/ [.into_dimensionality()]: #method.into_dimensionality","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29174,"byte_end":29231,"line_start":905,"line_end":905,"column_start":1,"column_end":58}},{"value":"/ [.into_dyn()]: #method.into_dyn","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29232,"byte_end":29267,"line_start":906,"line_end":906,"column_start":1,"column_end":36}},{"value":"/ [.into_owned()]: #method.into_owned","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29268,"byte_end":29307,"line_start":907,"line_end":907,"column_start":1,"column_end":40}},{"value":"/ [.into_shared()]: #method.into_shared","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29308,"byte_end":29349,"line_start":908,"line_end":908,"column_start":1,"column_end":42}},{"value":"/ [.to_owned()]: #method.to_owned","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29350,"byte_end":29385,"line_start":909,"line_end":909,"column_start":1,"column_end":36}},{"value":"/ [.map()]: #method.map","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29386,"byte_end":29411,"line_start":910,"line_end":910,"column_start":1,"column_end":26}},{"value":"/ [.view()]: #method.view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29412,"byte_end":29439,"line_start":911,"line_end":911,"column_start":1,"column_end":28}},{"value":"/ [.view_mut()]: #method.view_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29440,"byte_end":29475,"line_start":912,"line_end":912,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":29476,"byte_end":29479,"line_start":913,"line_end":913,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36213,"byte_end":36220,"line_start":1047,"line_end":1047,"column_start":10,"column_end":17},"name":"RcArray","qualname":"::RcArray","value":"ArrayBase<OwnedRcRepr<A>, D>","parent":null,"children":[],"decl_id":null,"docs":" An array where the data has shared ownership and is copy on write.","sig":null,"attributes":[{"value":"/ An array where the data has shared ownership and is copy on write.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":35887,"byte_end":35957,"line_start":1041,"line_end":1041,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":35958,"byte_end":35961,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ It can act as both an owner as the data as well as a shared reference (view like).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":35962,"byte_end":36048,"line_start":1043,"line_end":1043,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36049,"byte_end":36052,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ **Note: this type alias is obsolete.** See the equivalent [`ArcArray`] instead.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36053,"byte_end":36136,"line_start":1045,"line_end":1045,"column_start":1,"column_end":84}}]},{"kind":"Type","id":{"krate":0,"index":2241},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37341,"byte_end":37349,"line_start":1071,"line_end":1071,"column_start":10,"column_end":18},"name":"ArcArray","qualname":"::ArcArray","value":"ArrayBase<OwnedArcRepr<A>, D>","parent":null,"children":[],"decl_id":null,"docs":" An array where the data has shared ownership and is copy on write.","sig":null,"attributes":[{"value":"/ An array where the data has shared ownership and is copy on write.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36260,"byte_end":36330,"line_start":1049,"line_end":1049,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36331,"byte_end":36334,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The `ArcArray<A, D>` is parameterized by `A` for the element type and `D` for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36335,"byte_end":36416,"line_start":1051,"line_end":1051,"column_start":1,"column_end":82}},{"value":"/ the dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36417,"byte_end":36440,"line_start":1052,"line_end":1052,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36441,"byte_end":36444,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ It can act as both an owner as the data as well as a shared reference (view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36445,"byte_end":36524,"line_start":1054,"line_end":1054,"column_start":1,"column_end":80}},{"value":"/ like).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36525,"byte_end":36535,"line_start":1055,"line_end":1055,"column_start":1,"column_end":11}},{"value":"/ Calling a method for mutating elements on `ArcArray`, for example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36536,"byte_end":36605,"line_start":1056,"line_end":1056,"column_start":1,"column_end":70}},{"value":"/ [`view_mut()`](struct.ArrayBase.html#method.view_mut) or","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36606,"byte_end":36666,"line_start":1057,"line_end":1057,"column_start":1,"column_end":61}},{"value":"/ [`get_mut()`](struct.ArrayBase.html#method.get_mut), will break sharing and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36667,"byte_end":36746,"line_start":1058,"line_end":1058,"column_start":1,"column_end":80}},{"value":"/ require a clone of the data (if it is not uniquely held).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36747,"byte_end":36808,"line_start":1059,"line_end":1059,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36809,"byte_end":36812,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ `ArcArray` uses atomic reference counting like `Arc`, so it is `Send` and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36813,"byte_end":36890,"line_start":1061,"line_end":1061,"column_start":1,"column_end":78}},{"value":"/ `Sync` (when allowed by the element type of the array too).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36891,"byte_end":36954,"line_start":1062,"line_end":1062,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36955,"byte_end":36958,"line_start":1063,"line_end":1063,"column_start":1,"column_end":4}},{"value":"/ [**`ArrayBase`**](struct.ArrayBase.html) is used to implement both the owned","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":36959,"byte_end":37039,"line_start":1064,"line_end":1064,"column_start":1,"column_end":81}},{"value":"/ arrays and the views; see its docs for an overview of all array features.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37040,"byte_end":37117,"line_start":1065,"line_end":1065,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37118,"byte_end":37121,"line_start":1066,"line_end":1066,"column_start":1,"column_end":4}},{"value":"/ See also:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37122,"byte_end":37135,"line_start":1067,"line_end":1067,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37136,"byte_end":37139,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ + [Constructor Methods for Owned Arrays](struct.ArrayBase.html#constructor-methods-for-owned-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37140,"byte_end":37244,"line_start":1069,"line_end":1069,"column_start":1,"column_end":105}},{"value":"/ + [Methods For All Array Types](struct.ArrayBase.html#methods-for-all-array-types)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37245,"byte_end":37331,"line_start":1070,"line_end":1070,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38205,"byte_end":38210,"line_start":1094,"line_end":1094,"column_start":10,"column_end":15},"name":"Array","qualname":"::Array","value":"ArrayBase<OwnedRepr<A>, D>","parent":null,"children":[],"decl_id":null,"docs":" An array that owns its data uniquely.","sig":null,"attributes":[{"value":"/ An array that owns its data uniquely.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37390,"byte_end":37431,"line_start":1073,"line_end":1073,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37432,"byte_end":37435,"line_start":1074,"line_end":1074,"column_start":1,"column_end":4}},{"value":"/ `Array` is the main n-dimensional array type, and it owns all its array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37436,"byte_end":37511,"line_start":1075,"line_end":1075,"column_start":1,"column_end":76}},{"value":"/ elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37512,"byte_end":37525,"line_start":1076,"line_end":1076,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37526,"byte_end":37529,"line_start":1077,"line_end":1077,"column_start":1,"column_end":4}},{"value":"/ The `Array<A, D>` is parameterized by `A` for the element type and `D` for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37530,"byte_end":37608,"line_start":1078,"line_end":1078,"column_start":1,"column_end":79}},{"value":"/ the dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37609,"byte_end":37632,"line_start":1079,"line_end":1079,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37633,"byte_end":37636,"line_start":1080,"line_end":1080,"column_start":1,"column_end":4}},{"value":"/ [**`ArrayBase`**](struct.ArrayBase.html) is used to implement both the owned","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37637,"byte_end":37717,"line_start":1081,"line_end":1081,"column_start":1,"column_end":81}},{"value":"/ arrays and the views; see its docs for an overview of all array features.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37718,"byte_end":37795,"line_start":1082,"line_end":1082,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37796,"byte_end":37799,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ See also:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37800,"byte_end":37813,"line_start":1084,"line_end":1084,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37814,"byte_end":37817,"line_start":1085,"line_end":1085,"column_start":1,"column_end":4}},{"value":"/ + [Constructor Methods for Owned Arrays](struct.ArrayBase.html#constructor-methods-for-owned-arrays)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37818,"byte_end":37922,"line_start":1086,"line_end":1086,"column_start":1,"column_end":105}},{"value":"/ + [Methods For All Array Types](struct.ArrayBase.html#methods-for-all-array-types)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":37923,"byte_end":38009,"line_start":1087,"line_end":1087,"column_start":1,"column_end":87}},{"value":"/ + Dimensionality-specific type alises","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38010,"byte_end":38051,"line_start":1088,"line_end":1088,"column_start":1,"column_end":42}},{"value":"/ [`Array1`](Array1.t.html),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38052,"byte_end":38082,"line_start":1089,"line_end":1089,"column_start":1,"column_end":31}},{"value":"/ [`Array2`](Array2.t.html),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38083,"byte_end":38113,"line_start":1090,"line_end":1090,"column_start":1,"column_end":31}},{"value":"/ [`Array3`](Array3.t.html), ...,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38114,"byte_end":38149,"line_start":1091,"line_end":1091,"column_start":1,"column_end":36}},{"value":"/ [`ArrayD`](ArrayD.t.html),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38150,"byte_end":38180,"line_start":1092,"line_end":1092,"column_start":1,"column_end":31}},{"value":"/ and so on.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38181,"byte_end":38195,"line_start":1093,"line_end":1093,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":2247},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38726,"byte_end":38735,"line_start":1109,"line_end":1109,"column_start":10,"column_end":19},"name":"ArrayView","qualname":"::ArrayView","value":"ArrayBase<ViewRepr<&'a A>, D>","parent":null,"children":[],"decl_id":null,"docs":" A read-only array view.","sig":null,"attributes":[{"value":"/ A read-only array view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38248,"byte_end":38275,"line_start":1096,"line_end":1096,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38276,"byte_end":38279,"line_start":1097,"line_end":1097,"column_start":1,"column_end":4}},{"value":"/ An array view represents an array or a part of it, created from","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38280,"byte_end":38347,"line_start":1098,"line_end":1098,"column_start":1,"column_end":68}},{"value":"/ an iterator, subview or slice of an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38348,"byte_end":38394,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38395,"byte_end":38398,"line_start":1100,"line_end":1100,"column_start":1,"column_end":4}},{"value":"/ The `ArrayView<'a, A, D>` is parameterized by `'a` for the scope of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38399,"byte_end":38474,"line_start":1101,"line_end":1101,"column_start":1,"column_end":76}},{"value":"/ borrow, `A` for the element type and `D` for the dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38475,"byte_end":38543,"line_start":1102,"line_end":1102,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38544,"byte_end":38547,"line_start":1103,"line_end":1103,"column_start":1,"column_end":4}},{"value":"/ Array views have all the methods of an array (see [`ArrayBase`][ab]).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38548,"byte_end":38621,"line_start":1104,"line_end":1104,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38622,"byte_end":38625,"line_start":1105,"line_end":1105,"column_start":1,"column_end":4}},{"value":"/ See also [`ArrayViewMut`](type.ArrayViewMut.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38626,"byte_end":38680,"line_start":1106,"line_end":1106,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38681,"byte_end":38684,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ [ab]: struct.ArrayBase.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38685,"byte_end":38716,"line_start":1108,"line_end":1108,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39256,"byte_end":39268,"line_start":1124,"line_end":1124,"column_start":10,"column_end":22},"name":"ArrayViewMut","qualname":"::ArrayViewMut","value":"ArrayBase<ViewRepr<&'a mut A>, D>","parent":null,"children":[],"decl_id":null,"docs":" A read-write array view.","sig":null,"attributes":[{"value":"/ A read-write array view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38780,"byte_end":38808,"line_start":1111,"line_end":1111,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38809,"byte_end":38812,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ An array view represents an array or a part of it, created from","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38813,"byte_end":38880,"line_start":1113,"line_end":1113,"column_start":1,"column_end":68}},{"value":"/ an iterator, subview or slice of an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38881,"byte_end":38927,"line_start":1114,"line_end":1114,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38928,"byte_end":38931,"line_start":1115,"line_end":1115,"column_start":1,"column_end":4}},{"value":"/ The `ArrayViewMut<'a, A, D>` is parameterized by `'a` for the scope of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":38932,"byte_end":39010,"line_start":1116,"line_end":1116,"column_start":1,"column_end":79}},{"value":"/ borrow, `A` for the element type and `D` for the dimensionality.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39011,"byte_end":39079,"line_start":1117,"line_end":1117,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39080,"byte_end":39083,"line_start":1118,"line_end":1118,"column_start":1,"column_end":4}},{"value":"/ Array views have all the methods of an array (see [`ArrayBase`][ab]).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39084,"byte_end":39157,"line_start":1119,"line_end":1119,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39158,"byte_end":39161,"line_start":1120,"line_end":1120,"column_start":1,"column_end":4}},{"value":"/ See also [`ArrayView`](type.ArrayView.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39162,"byte_end":39210,"line_start":1121,"line_end":1121,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39211,"byte_end":39214,"line_start":1122,"line_end":1122,"column_start":1,"column_end":4}},{"value":"/ [ab]: struct.ArrayBase.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39215,"byte_end":39246,"line_start":1123,"line_end":1123,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4376},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39493,"byte_end":39502,"line_start":1131,"line_end":1131,"column_start":12,"column_end":21},"name":"OwnedRepr","qualname":"::OwnedRepr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Array's representation.","sig":null,"attributes":[{"value":"/ Array's representation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39317,"byte_end":39344,"line_start":1126,"line_end":1126,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39345,"byte_end":39348,"line_start":1127,"line_end":1127,"column_start":1,"column_end":4}},{"value":"/ *Don’t use this type directly—use the type alias","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39349,"byte_end":39405,"line_start":1128,"line_end":1128,"column_start":1,"column_end":53}},{"value":"/ [`Array`](type.Array.html) for the array type!*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39406,"byte_end":39457,"line_start":1129,"line_end":1129,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4386},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39939,"byte_end":39951,"line_start":1145,"line_end":1145,"column_start":12,"column_end":24},"name":"OwnedArcRepr","qualname":"::OwnedArcRepr","value":"","parent":null,"children":[],"decl_id":null,"docs":" ArcArray's representation.","sig":null,"attributes":[{"value":"/ ArcArray's representation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39761,"byte_end":39791,"line_start":1140,"line_end":1140,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39792,"byte_end":39795,"line_start":1141,"line_end":1141,"column_start":1,"column_end":4}},{"value":"/ *Don’t use this type directly—use the type alias","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39796,"byte_end":39852,"line_start":1142,"line_end":1142,"column_start":1,"column_end":53}},{"value":"/ [`ArcArray`](type.ArcArray.html) for the array type!*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39853,"byte_end":39910,"line_start":1143,"line_end":1143,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":4393},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40386,"byte_end":40394,"line_start":1161,"line_end":1161,"column_start":12,"column_end":20},"name":"ViewRepr","qualname":"::ViewRepr","value":"ViewRepr {  }","parent":null,"children":[{"krate":0,"index":4395}],"decl_id":null,"docs":" Array view’s representation.","sig":null,"attributes":[{"value":"/ Array view’s representation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40083,"byte_end":40117,"line_start":1154,"line_end":1154,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40118,"byte_end":40121,"line_start":1155,"line_end":1155,"column_start":1,"column_end":4}},{"value":"/ *Don’t use this type directly—use the type aliases","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40122,"byte_end":40180,"line_start":1156,"line_end":1156,"column_start":1,"column_end":55}},{"value":"/ [`ArrayView`](type.ArrayView.html)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40181,"byte_end":40219,"line_start":1157,"line_end":1157,"column_start":1,"column_end":39}},{"value":"/ / [`ArrayViewMut`](type.ArrayViewMut.html) for the array type!*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40220,"byte_end":40287,"line_start":1158,"line_end":1158,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287240,"byte_end":287248,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ArrayBase<S, Ix1>>::from_vec","value":"pub fn from_vec(Vec<A>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array from a vector (no copying needed).","sig":null,"attributes":[{"value":"/ Create a one-dimensional array from a vector (no copying needed).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":286957,"byte_end":287026,"line_start":35,"line_end":35,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287031,"byte_end":287034,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the length is greater than `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287039,"byte_end":287097,"line_start":37,"line_end":37,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287102,"byte_end":287105,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287110,"byte_end":287121,"line_start":39,"line_end":39,"column_start":5,"column_end":16}},{"value":"/ use ndarray::Array;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287126,"byte_end":287149,"line_start":40,"line_end":40,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287154,"byte_end":287157,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ let array = Array::from_vec(vec![1., 2., 3., 4.]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287162,"byte_end":287216,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287221,"byte_end":287228,"line_start":43,"line_end":43,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287854,"byte_end":287863,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<ArrayBase<S, Ix1>>::from_iter","value":"pub fn from_iter<I>(I) -> Self where I: IntoIterator<Item = A>","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array from an iterable.","sig":null,"attributes":[{"value":"/ Create a one-dimensional array from an iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287528,"byte_end":287580,"line_start":54,"line_end":54,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287585,"byte_end":287588,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the length is greater than `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287593,"byte_end":287651,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287656,"byte_end":287659,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287664,"byte_end":287675,"line_start":58,"line_end":58,"column_start":5,"column_end":16}},{"value":"/ use ndarray::{Array, arr1};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287680,"byte_end":287711,"line_start":59,"line_end":59,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287716,"byte_end":287719,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ let array = Array::from_iter((0..5).map(|x| x * x));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287724,"byte_end":287780,"line_start":61,"line_end":61,"column_start":5,"column_end":61}},{"value":"/ assert!(array == arr1(&[0, 1, 4, 9, 16]))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287785,"byte_end":287830,"line_start":62,"line_end":62,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287835,"byte_end":287842,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288402,"byte_end":288410,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"linspace","qualname":"<ArrayBase<S, Ix1>>::linspace","value":"pub fn linspace(A, A, usize) -> Self where A: Float","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array from the inclusive interval\n `[start, end]` with `n` elements. `A` must be a floating point type.","sig":null,"attributes":[{"value":"/ Create a one-dimensional array from the inclusive interval","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":287998,"byte_end":288060,"line_start":70,"line_end":70,"column_start":5,"column_end":67}},{"value":"/ `[start, end]` with `n` elements. `A` must be a floating point type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288065,"byte_end":288137,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288142,"byte_end":288145,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `n` is greater than `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288150,"byte_end":288201,"line_start":73,"line_end":73,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288206,"byte_end":288209,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288214,"byte_end":288225,"line_start":75,"line_end":75,"column_start":5,"column_end":16}},{"value":"/ use ndarray::{Array, arr1};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288230,"byte_end":288261,"line_start":76,"line_end":76,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288266,"byte_end":288269,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let array = Array::linspace(0., 1., 5);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288274,"byte_end":288317,"line_start":78,"line_end":78,"column_start":5,"column_end":48}},{"value":"/ assert!(array == arr1(&[0.0, 0.25, 0.5, 0.75, 1.0]))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288322,"byte_end":288378,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288383,"byte_end":288390,"line_start":80,"line_end":80,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288977,"byte_end":288982,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"range","qualname":"<ArrayBase<S, Ix1>>::range","value":"pub fn range(A, A, A) -> Self where A: Float","parent":null,"children":[],"decl_id":null,"docs":" Create a one-dimensional array from the half-open interval\n `[start, end)` with elements spaced by `step`. `A` must be a floating\n point type.","sig":null,"attributes":[{"value":"/ Create a one-dimensional array from the half-open interval","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288554,"byte_end":288616,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/ `[start, end)` with elements spaced by `step`. `A` must be a floating","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288621,"byte_end":288694,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ point type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288699,"byte_end":288714,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288719,"byte_end":288722,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the length is greater than `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288727,"byte_end":288785,"line_start":91,"line_end":91,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288790,"byte_end":288793,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288798,"byte_end":288809,"line_start":93,"line_end":93,"column_start":5,"column_end":16}},{"value":"/ use ndarray::{Array, arr1};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288814,"byte_end":288845,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288850,"byte_end":288853,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let array = Array::range(0., 5., 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288858,"byte_end":288899,"line_start":96,"line_end":96,"column_start":5,"column_end":46}},{"value":"/ assert!(array == arr1(&[0., 1., 2., 3., 4.]))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288904,"byte_end":288953,"line_start":97,"line_end":97,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":288958,"byte_end":288965,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289379,"byte_end":289382,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"eye","qualname":"<ArrayBase<S, Ix2>>::eye","value":"pub fn eye(Ix) -> Self where S: DataMut, A: Clone + Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix of size `n` (square 2D array).","sig":null,"attributes":[{"value":"/ Create an identity matrix of size `n` (square 2D array).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289245,"byte_end":289305,"line_start":110,"line_end":110,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289310,"byte_end":289313,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `n * n` would overflow `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289318,"byte_end":289367,"line_start":112,"line_end":112,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291864,"byte_end":291873,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"from_elem","qualname":"<ArrayBase<S, D>>::from_elem","value":"pub fn from_elem<Sh>(Sh, A) -> Self where A: Clone, Sh: ShapeBuilder<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with copies of `elem`, shape `shape`.","sig":null,"attributes":[{"value":"/ Create an array with copies of `elem`, shape `shape`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291242,"byte_end":291299,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291304,"byte_end":291307,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291312,"byte_end":291385,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291390,"byte_end":291393,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291398,"byte_end":291405,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{Array, arr3, ShapeBuilder};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291410,"byte_end":291455,"line_start":174,"line_end":174,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291460,"byte_end":291463,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let a = Array::from_elem((2, 2, 2), 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291468,"byte_end":291512,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291517,"byte_end":291520,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291525,"byte_end":291537,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/     a == arr3(&[[[1., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291542,"byte_end":291572,"line_start":179,"line_end":179,"column_start":5,"column_end":35}},{"value":"/                  [1., 1.]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291577,"byte_end":291608,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/                 [[1., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291613,"byte_end":291643,"line_start":181,"line_end":181,"column_start":5,"column_end":35}},{"value":"/                  [1., 1.]]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291648,"byte_end":291680,"line_start":182,"line_end":182,"column_start":5,"column_end":37}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291685,"byte_end":291691,"line_start":183,"line_end":183,"column_start":5,"column_end":11}},{"value":"/ assert!(a.strides() == &[4, 2, 1]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291696,"byte_end":291735,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291740,"byte_end":291743,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let b = Array::from_elem((2, 2, 2).f(), 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291748,"byte_end":291796,"line_start":186,"line_end":186,"column_start":5,"column_end":53}},{"value":"/ assert!(b.strides() == &[1, 2, 4]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291801,"byte_end":291840,"line_start":187,"line_end":187,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291845,"byte_end":291852,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292326,"byte_end":292331,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"zeros","qualname":"<ArrayBase<S, D>>::zeros","value":"pub fn zeros<Sh>(Sh) -> Self where A: Clone + Zero, Sh: ShapeBuilder<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with zeros, shape `shape`.","sig":null,"attributes":[{"value":"/ Create an array with zeros, shape `shape`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292182,"byte_end":292228,"line_start":199,"line_end":199,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292233,"byte_end":292236,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292241,"byte_end":292314,"line_start":201,"line_end":201,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292627,"byte_end":292631,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"name":"ones","qualname":"<ArrayBase<S, D>>::ones","value":"pub fn ones<Sh>(Sh) -> Self where A: Clone + One, Sh: ShapeBuilder<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with ones, shape `shape`.","sig":null,"attributes":[{"value":"/ Create an array with ones, shape `shape`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292484,"byte_end":292529,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292534,"byte_end":292537,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292542,"byte_end":292615,"line_start":211,"line_end":211,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292934,"byte_end":292941,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"default","qualname":"<ArrayBase<S, D>>::default","value":"pub fn default<Sh>(Sh) -> Self where A: Default, Sh: ShapeBuilder<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with default values, shape `shape`","sig":null,"attributes":[{"value":"/ Create an array with default values, shape `shape`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292782,"byte_end":292836,"line_start":219,"line_end":219,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292841,"byte_end":292844,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":292849,"byte_end":292922,"line_start":221,"line_end":221,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293549,"byte_end":293562,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"from_shape_fn","qualname":"<ArrayBase<S, D>>::from_shape_fn","value":"pub fn from_shape_fn<Sh, F>(Sh, F) -> Self where Sh: ShapeBuilder<Dim = D>,\nF: FnMut(D::Pattern) -> A","parent":null,"children":[],"decl_id":null,"docs":" Create an array with values created by the function `f`.","sig":null,"attributes":[{"value":"/ Create an array with values created by the function `f`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293266,"byte_end":293326,"line_start":232,"line_end":232,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293331,"byte_end":293334,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ `f` is called with the index of the element to create; the elements are","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293339,"byte_end":293414,"line_start":234,"line_end":234,"column_start":5,"column_end":80}},{"value":"/ visited in arbitirary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293419,"byte_end":293451,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293456,"byte_end":293459,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the product of non-zero axis lengths overflows `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":293464,"byte_end":293537,"line_start":237,"line_end":237,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2321},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295337,"byte_end":295351,"line_start":287,"line_end":287,"column_start":12,"column_end":26},"name":"from_shape_vec","qualname":"<ArrayBase<S, D>>::from_shape_vec","value":"pub fn from_shape_vec<Sh>(Sh, Vec<A>) -> Result<Self, ShapeError> where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with the given shape from a vector. (No cloning of\n elements needed.)","sig":null,"attributes":[{"value":"/ Create an array with the given shape from a vector. (No cloning of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294169,"byte_end":294239,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ elements needed.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294244,"byte_end":294265,"line_start":255,"line_end":255,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294270,"byte_end":294273,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ----","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294278,"byte_end":294286,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294291,"byte_end":294294,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ For a contiguous c- or f-order shape, the following applies:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294299,"byte_end":294363,"line_start":259,"line_end":259,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294368,"byte_end":294371,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ **Errors** if `shape` does not correspond to the number of elements in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294376,"byte_end":294450,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ `v` or if the shape/strides would result in overflowing `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294455,"byte_end":294523,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294528,"byte_end":294531,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ ----","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294536,"byte_end":294544,"line_start":264,"line_end":264,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294549,"byte_end":294552,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ For custom strides, the following applies:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294557,"byte_end":294603,"line_start":266,"line_end":266,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294608,"byte_end":294611,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ **Errors** if strides and dimensions can point out of bounds of `v`, if","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294616,"byte_end":294691,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ strides allow multiple indices to point to the same element, or if the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294696,"byte_end":294770,"line_start":269,"line_end":269,"column_start":5,"column_end":79}},{"value":"/ shape/strides would result in overflowing `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294775,"byte_end":294829,"line_start":270,"line_end":270,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294834,"byte_end":294837,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294842,"byte_end":294849,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use ndarray::Array;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294854,"byte_end":294877,"line_start":273,"line_end":273,"column_start":5,"column_end":28}},{"value":"/ use ndarray::ShapeBuilder; // Needed for .strides() method","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294882,"byte_end":294944,"line_start":274,"line_end":274,"column_start":5,"column_end":67}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294949,"byte_end":294971,"line_start":275,"line_end":275,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294976,"byte_end":294979,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ let a = Array::from_shape_vec((2, 2), vec![1., 2., 3., 4.]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":294984,"byte_end":295048,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/ assert!(a.is_ok());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295053,"byte_end":295076,"line_start":278,"line_end":278,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295081,"byte_end":295084,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let b = Array::from_shape_vec((2, 2).strides((1, 2)),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295089,"byte_end":295146,"line_start":280,"line_end":280,"column_start":5,"column_end":62}},{"value":"/                               vec![1., 2., 3., 4.]).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295151,"byte_end":295216,"line_start":281,"line_end":281,"column_start":5,"column_end":70}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295221,"byte_end":295233,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/     b == arr2(&[[1., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295238,"byte_end":295267,"line_start":283,"line_end":283,"column_start":5,"column_end":34}},{"value":"/                 [2., 4.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295272,"byte_end":295302,"line_start":284,"line_end":284,"column_start":5,"column_end":35}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295307,"byte_end":295313,"line_start":285,"line_end":285,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":295318,"byte_end":295325,"line_start":286,"line_end":286,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297122,"byte_end":297146,"line_start":330,"line_end":330,"column_start":19,"column_end":43},"name":"from_shape_vec_unchecked","qualname":"<ArrayBase<S, D>>::from_shape_vec_unchecked","value":"pub unsafe fn from_shape_vec_unchecked<Sh>(Sh, Vec<A>) -> Self where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an array from a vector and interpret it according to the\n provided shape and strides. (No cloning of elements needed.)","sig":null,"attributes":[{"value":"/ Creates an array from a vector and interpret it according to the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296135,"byte_end":296203,"line_start":309,"line_end":309,"column_start":5,"column_end":73}},{"value":"/ provided shape and strides. (No cloning of elements needed.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296208,"byte_end":296272,"line_start":310,"line_end":310,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296277,"byte_end":296280,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the following conditions are met:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296285,"byte_end":296350,"line_start":312,"line_end":312,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296355,"byte_end":296358,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ 1. The ndim of `dim` and `strides` must be the same.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296363,"byte_end":296419,"line_start":314,"line_end":314,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296424,"byte_end":296427,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ 2. The product of non-zero axis lengths must not exceed `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296432,"byte_end":296505,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296510,"byte_end":296513,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ 3. For axes with length > 1, the stride must be nonnegative.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296518,"byte_end":296582,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296587,"byte_end":296590,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ 4. If the array will be empty (any axes are zero-length), the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296595,"byte_end":296660,"line_start":320,"line_end":320,"column_start":5,"column_end":70}},{"value":"/    difference between the least address and greatest address accessible","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296665,"byte_end":296740,"line_start":321,"line_end":321,"column_start":5,"column_end":80}},{"value":"/    by moving along all axes must be ≤ `v.len()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296745,"byte_end":296799,"line_start":322,"line_end":322,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296804,"byte_end":296807,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/    If the array will not be empty, the difference between the least","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296812,"byte_end":296883,"line_start":324,"line_end":324,"column_start":5,"column_end":76}},{"value":"/    address and greatest address accessible by moving along all axes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296888,"byte_end":296959,"line_start":325,"line_end":325,"column_start":5,"column_end":76}},{"value":"/    must be < `v.len()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296964,"byte_end":296991,"line_start":326,"line_end":326,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":296996,"byte_end":296999,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ 5. The strides must not allow any element to be referenced by two different","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297004,"byte_end":297083,"line_start":328,"line_end":328,"column_start":5,"column_end":84}},{"value":"/    indices.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297088,"byte_end":297103,"line_start":329,"line_end":329,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299614,"byte_end":299627,"line_start":396,"line_end":396,"column_start":19,"column_end":32},"name":"uninitialized","qualname":"<ArrayBase<S, D>>::uninitialized","value":"pub unsafe fn uninitialized<Sh>(Sh) -> Self where A: Copy,\nSh: ShapeBuilder<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Create an array with uninitalized elements, shape `shape`.","sig":null,"attributes":[{"value":"/ Create an array with uninitalized elements, shape `shape`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297762,"byte_end":297824,"line_start":350,"line_end":350,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297829,"byte_end":297832,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the number of elements in `shape` would overflow isize.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297837,"byte_end":297910,"line_start":352,"line_end":352,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297915,"byte_end":297918,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ### Safety","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297923,"byte_end":297937,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297942,"byte_end":297945,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ Accessing uninitalized values is undefined behaviour. You must","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":297950,"byte_end":298016,"line_start":356,"line_end":356,"column_start":5,"column_end":71}},{"value":"/ overwrite *all* the elements in the array after it is created; for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298021,"byte_end":298091,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ example using the methods `.fill()` or `.assign()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298096,"byte_end":298151,"line_start":358,"line_end":358,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298156,"byte_end":298159,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ The contents of the array is indeterminate before initialization and it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298164,"byte_end":298239,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ is an error to perform operations that use the previous values. For","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298244,"byte_end":298315,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ example it would not be legal to use `a += 1.;` on such an array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298320,"byte_end":298389,"line_start":362,"line_end":362,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298394,"byte_end":298397,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This constructor is limited to elements where `A: Copy` (no destructors)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298402,"byte_end":298478,"line_start":364,"line_end":364,"column_start":5,"column_end":81}},{"value":"/ to avoid users shooting themselves too hard in the foot; it is not","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298483,"byte_end":298553,"line_start":365,"line_end":365,"column_start":5,"column_end":75}},{"value":"/ a problem to drop an array created with this method even before elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298558,"byte_end":298634,"line_start":366,"line_end":366,"column_start":5,"column_end":81}},{"value":"/ are initialized. (Note that constructors `from_shape_vec` and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298639,"byte_end":298704,"line_start":367,"line_end":367,"column_start":5,"column_end":70}},{"value":"/ `from_shape_vec_unchecked` allow the user yet more control).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298709,"byte_end":298773,"line_start":368,"line_end":368,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298778,"byte_end":298781,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ### Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298786,"byte_end":298802,"line_start":370,"line_end":370,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298807,"byte_end":298810,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298815,"byte_end":298822,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ #[macro_use(s)]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298827,"byte_end":298846,"line_start":373,"line_end":373,"column_start":5,"column_end":24}},{"value":"/ extern crate ndarray;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298851,"byte_end":298876,"line_start":374,"line_end":374,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298881,"byte_end":298884,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ use ndarray::Array2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298889,"byte_end":298913,"line_start":376,"line_end":376,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298918,"byte_end":298921,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ // Example Task: Let's create a column shifted copy of a in b","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298926,"byte_end":298991,"line_start":378,"line_end":378,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":298996,"byte_end":298999,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ fn shift_by_two(a: &Array2<f32>) -> Array2<f32> {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299004,"byte_end":299057,"line_start":380,"line_end":380,"column_start":5,"column_end":58}},{"value":"/     let mut b = unsafe { Array2::uninitialized(a.dim()) };","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299062,"byte_end":299124,"line_start":381,"line_end":381,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299129,"byte_end":299132,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/     // two first columns in b are two last in a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299137,"byte_end":299188,"line_start":383,"line_end":383,"column_start":5,"column_end":56}},{"value":"/     // rest of columns in b are the initial columns in a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299193,"byte_end":299253,"line_start":384,"line_end":384,"column_start":5,"column_end":65}},{"value":"/     b.slice_mut(s![.., ..2]).assign(&a.slice(s![.., -2..]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299258,"byte_end":299322,"line_start":385,"line_end":385,"column_start":5,"column_end":69}},{"value":"/     b.slice_mut(s![.., 2..]).assign(&a.slice(s![.., ..-2]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299327,"byte_end":299391,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299396,"byte_end":299399,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/     // `b` is safe to use with all operations at this point","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299404,"byte_end":299467,"line_start":388,"line_end":388,"column_start":5,"column_end":68}},{"value":"/     b","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299472,"byte_end":299481,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299486,"byte_end":299491,"line_start":390,"line_end":390,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299496,"byte_end":299499,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299504,"byte_end":299521,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ #   shift_by_two(&Array2::zeros((8, 8)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299526,"byte_end":299571,"line_start":393,"line_end":393,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299576,"byte_end":299583,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":299588,"byte_end":299595,"line_start":395,"line_end":395,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301109,"byte_end":301112,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"len","qualname":"<ArrayBase<S, D>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the total number of elements in the array.\n","sig":null,"attributes":[{"value":"/ Return the total number of elements in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301044,"byte_end":301097,"line_start":50,"line_end":50,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301405,"byte_end":301411,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"len_of","qualname":"<ArrayBase<S, D>>::len_of","value":"pub fn len_of(&Self, Axis) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the length of `axis`.","sig":null,"attributes":[{"value":"/ Return the length of `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301166,"byte_end":301198,"line_start":55,"line_end":55,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301203,"byte_end":301206,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ The axis should be in the range `Axis(` 0 .. *n* `)` where *n* is the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301211,"byte_end":301284,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ number of dimensions (axes) of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301289,"byte_end":301334,"line_start":58,"line_end":58,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301339,"byte_end":301342,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301347,"byte_end":301393,"line_start":60,"line_end":60,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301541,"byte_end":301549,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ArrayBase<S, D>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether the array has any elements\n","sig":null,"attributes":[{"value":"/ Return whether the array has any elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301484,"byte_end":301529,"line_start":65,"line_end":65,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2378},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301669,"byte_end":301673,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"ndim","qualname":"<ArrayBase<S, D>>::ndim","value":"pub fn ndim(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of dimensions (axes) in the array\n","sig":null,"attributes":[{"value":"/ Return the number of dimensions (axes) in the array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301602,"byte_end":301657,"line_start":70,"line_end":70,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2379},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301899,"byte_end":301902,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"dim","qualname":"<ArrayBase<S, D>>::dim","value":"pub fn dim(&Self) -> D::Pattern","parent":null,"children":[],"decl_id":null,"docs":" Return the shape of the array in its “pattern” form,\n an integer in the one-dimensional case, tuple in the n-dimensional cases\n and so on.\n","sig":null,"attributes":[{"value":"/ Return the shape of the array in its “pattern” form,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301727,"byte_end":301787,"line_start":75,"line_end":75,"column_start":5,"column_end":61}},{"value":"/ an integer in the one-dimensional case, tuple in the n-dimensional cases","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301792,"byte_end":301868,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ and so on.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301873,"byte_end":301887,"line_start":77,"line_end":77,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302049,"byte_end":302056,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"raw_dim","qualname":"<ArrayBase<S, D>>::raw_dim","value":"pub fn raw_dim(&Self) -> D","parent":null,"children":[],"decl_id":null,"docs":" Return the shape of the array as it stored in the array.\n","sig":null,"attributes":[{"value":"/ Return the shape of the array as it stored in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":301977,"byte_end":302037,"line_start":82,"line_end":82,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2381},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302164,"byte_end":302169,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"shape","qualname":"<ArrayBase<S, D>>::shape","value":"pub fn shape(&Self) -> &[Ix]","parent":null,"children":[],"decl_id":null,"docs":" Return the shape of the array as a slice.\n","sig":null,"attributes":[{"value":"/ Return the shape of the array as a slice.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302107,"byte_end":302152,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302282,"byte_end":302289,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"strides","qualname":"<ArrayBase<S, D>>::strides","value":"pub fn strides(&Self) -> &[Ixs]","parent":null,"children":[],"decl_id":null,"docs":" Return the strides of the array as a slice\n","sig":null,"attributes":[{"value":"/ Return the strides of the array as a slice","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302224,"byte_end":302270,"line_start":92,"line_end":92,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302741,"byte_end":302750,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"stride_of","qualname":"<ArrayBase<S, D>>::stride_of","value":"pub fn stride_of(&Self, Axis) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Return the stride of `axis`.","sig":null,"attributes":[{"value":"/ Return the stride of `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302502,"byte_end":302534,"line_start":101,"line_end":101,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302539,"byte_end":302542,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ The axis should be in the range `Axis(` 0 .. *n* `)` where *n* is the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302547,"byte_end":302620,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ number of dimensions (axes) of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302625,"byte_end":302670,"line_start":104,"line_end":104,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302675,"byte_end":302678,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302683,"byte_end":302729,"line_start":106,"line_end":106,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302934,"byte_end":302938,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"view","qualname":"<ArrayBase<S, D>>::view","value":"pub fn view(&Self) -> ArrayView<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return a read-only view of the array\n","sig":null,"attributes":[{"value":"/ Return a read-only view of the array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":302882,"byte_end":302922,"line_start":112,"line_end":112,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303187,"byte_end":303195,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<ArrayBase<S, D>>::view_mut","value":"pub fn view_mut(&mut Self) -> ArrayViewMut<, A, D> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a read-write view of the array\n","sig":null,"attributes":[{"value":"/ Return a read-write view of the array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303134,"byte_end":303175,"line_start":120,"line_end":120,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304709,"byte_end":304717,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<ArrayBase<S, D>>::to_owned","value":"pub fn to_owned(&Self) -> Array<A, D> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Return an uniquely owned copy of the array.","sig":null,"attributes":[{"value":"/ Return an uniquely owned copy of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303410,"byte_end":303457,"line_start":130,"line_end":130,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303462,"byte_end":303465,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ If the input array is contiguous and its strides are positive, then the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303470,"byte_end":303545,"line_start":132,"line_end":132,"column_start":5,"column_end":80}},{"value":"/ output array will have the same memory layout. Otherwise, the layout of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303550,"byte_end":303625,"line_start":133,"line_end":133,"column_start":5,"column_end":80}},{"value":"/ the output array is unspecified. If you need a particular layout, you","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303630,"byte_end":303703,"line_start":134,"line_end":134,"column_start":5,"column_end":78}},{"value":"/ can allocate a new array with the desired memory layout and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303708,"byte_end":303771,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ [`.assign()`](#method.assign) the data. Alternatively, you can collect","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303776,"byte_end":303850,"line_start":136,"line_end":136,"column_start":5,"column_end":79}},{"value":"/ an iterator, like this for a result in standard layout:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303855,"byte_end":303914,"line_start":137,"line_end":137,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303919,"byte_end":303922,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303927,"byte_end":303934,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ # use ndarray::prelude::*;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303939,"byte_end":303969,"line_start":140,"line_end":140,"column_start":5,"column_end":35}},{"value":"/ # let arr = Array::from_shape_vec((2, 2).f(), vec![1, 2, 3, 4]).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":303974,"byte_end":304051,"line_start":141,"line_end":141,"column_start":5,"column_end":82}},{"value":"/ # let owned = {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304056,"byte_end":304075,"line_start":142,"line_end":142,"column_start":5,"column_end":24}},{"value":"/ Array::from_shape_vec(arr.raw_dim(), arr.iter().cloned().collect()).unwrap()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304080,"byte_end":304160,"line_start":143,"line_end":143,"column_start":5,"column_end":85}},{"value":"/ # };","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304165,"byte_end":304173,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"/ # assert!(owned.is_standard_layout());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304178,"byte_end":304220,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"/ # assert_eq!(arr, owned);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304225,"byte_end":304254,"line_start":146,"line_end":146,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304259,"byte_end":304266,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304271,"byte_end":304274,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ or this for a result in column-major (Fortran) layout:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304279,"byte_end":304337,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304342,"byte_end":304345,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304350,"byte_end":304357,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ # use ndarray::prelude::*;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304362,"byte_end":304392,"line_start":152,"line_end":152,"column_start":5,"column_end":35}},{"value":"/ # let arr = Array::from_shape_vec((2, 2), vec![1, 2, 3, 4]).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304397,"byte_end":304470,"line_start":153,"line_end":153,"column_start":5,"column_end":78}},{"value":"/ # let owned = {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304475,"byte_end":304494,"line_start":154,"line_end":154,"column_start":5,"column_end":24}},{"value":"/ Array::from_shape_vec(arr.raw_dim().f(), arr.t().iter().cloned().collect()).unwrap()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304499,"byte_end":304587,"line_start":155,"line_end":155,"column_start":5,"column_end":93}},{"value":"/ # };","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304592,"byte_end":304600,"line_start":156,"line_end":156,"column_start":5,"column_end":13}},{"value":"/ # assert!(owned.t().is_standard_layout());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304605,"byte_end":304651,"line_start":157,"line_end":157,"column_start":5,"column_end":51}},{"value":"/ # assert_eq!(arr, owned);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304656,"byte_end":304685,"line_start":158,"line_end":158,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":304690,"byte_end":304697,"line_start":159,"line_end":159,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305207,"byte_end":305216,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"to_shared","qualname":"<ArrayBase<S, D>>::to_shared","value":"pub fn to_shared(&Self) -> ArcArray<A, D> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Return a shared ownership (copy on write) array.\n","sig":null,"attributes":[{"value":"/ Return a shared ownership (copy on write) array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305143,"byte_end":305195,"line_start":174,"line_end":174,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305491,"byte_end":305501,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<ArrayBase<S, D>>::into_owned","value":"pub fn into_owned(Self) -> Array<A, D> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Turn the array into a uniquely owned array, cloning the array elements\n if necessary.\n","sig":null,"attributes":[{"value":"/ Turn the array into a uniquely owned array, cloning the array elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305383,"byte_end":305457,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ if necessary.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305462,"byte_end":305479,"line_start":183,"line_end":183,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305698,"byte_end":305709,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"into_shared","qualname":"<ArrayBase<S, D>>::into_shared","value":"pub fn into_shared(Self) -> ArcArray<A, D> where S: DataOwned","parent":null,"children":[],"decl_id":null,"docs":" Turn the array into a shared ownership (copy on write) array,\n without any copying.\n","sig":null,"attributes":[{"value":"/ Turn the array into a shared ownership (copy on write) array,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305592,"byte_end":305657,"line_start":190,"line_end":190,"column_start":5,"column_end":70}},{"value":"/ without any copying.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305662,"byte_end":305686,"line_start":191,"line_end":191,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306070,"byte_end":306075,"line_start":206,"line_end":206,"column_start":12,"column_end":17},"name":"first","qualname":"<ArrayBase<S, D>>::first","value":"pub fn first(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first element of the array, or `None` if it\n is empty.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the first element of the array, or `None` if it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":305966,"byte_end":306040,"line_start":204,"line_end":204,"column_start":5,"column_end":79}},{"value":"/ is empty.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306045,"byte_end":306058,"line_start":205,"line_end":205,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2392},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306340,"byte_end":306349,"line_start":216,"line_end":216,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<ArrayBase<S, D>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<&mut A> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the first element of the array, or\n `None` if it is empty.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the first element of the array, or","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306228,"byte_end":306297,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306302,"byte_end":306328,"line_start":215,"line_end":215,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306818,"byte_end":306822,"line_start":233,"line_end":233,"column_start":12,"column_end":16},"name":"iter","qualname":"<ArrayBase<S, D>>::iter","value":"pub fn iter(&Self) -> Iter<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of references to the elements of the array.","sig":null,"attributes":[{"value":"/ Return an iterator of references to the elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306552,"byte_end":306618,"line_start":227,"line_end":227,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306623,"byte_end":306626,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in the *logical order* of the array, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306631,"byte_end":306698,"line_start":229,"line_end":229,"column_start":5,"column_end":72}},{"value":"/ is where the rightmost index is varying the fastest.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306703,"byte_end":306759,"line_start":230,"line_end":230,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306764,"byte_end":306767,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `&A`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306772,"byte_end":306806,"line_start":232,"line_end":232,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307219,"byte_end":307227,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<ArrayBase<S, D>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, A, D> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of mutable references to the elements of the array.","sig":null,"attributes":[{"value":"/ Return an iterator of mutable references to the elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":306941,"byte_end":307015,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307020,"byte_end":307023,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in the *logical order* of the array, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307028,"byte_end":307095,"line_start":240,"line_end":240,"column_start":5,"column_end":72}},{"value":"/ is where the rightmost index is varying the fastest.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307100,"byte_end":307156,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307161,"byte_end":307164,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `&mut A`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307169,"byte_end":307207,"line_start":243,"line_end":243,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307687,"byte_end":307699,"line_start":258,"line_end":258,"column_start":12,"column_end":24},"name":"indexed_iter","qualname":"<ArrayBase<S, D>>::indexed_iter","value":"pub fn indexed_iter(&Self) -> IndexedIter<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of indexes and references to the elements of the array.","sig":null,"attributes":[{"value":"/ Return an iterator of indexes and references to the elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307336,"byte_end":307414,"line_start":250,"line_end":250,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307419,"byte_end":307422,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in the *logical order* of the array, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307427,"byte_end":307494,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ is where the rightmost index is varying the fastest.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307499,"byte_end":307555,"line_start":253,"line_end":253,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307560,"byte_end":307563,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(D::Pattern, &A)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307568,"byte_end":307616,"line_start":255,"line_end":255,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307621,"byte_end":307624,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ See also [`Zip::indexed`](struct.Zip.html)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307629,"byte_end":307675,"line_start":257,"line_end":257,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308104,"byte_end":308120,"line_start":268,"line_end":268,"column_start":12,"column_end":28},"name":"indexed_iter_mut","qualname":"<ArrayBase<S, D>>::indexed_iter_mut","value":"pub fn indexed_iter_mut(&mut Self) -> IndexedIterMut<, A, D> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of indexes and mutable references to the elements of the array.","sig":null,"attributes":[{"value":"/ Return an iterator of indexes and mutable references to the elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307800,"byte_end":307886,"line_start":262,"line_end":262,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307891,"byte_end":307894,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in the *logical order* of the array, which","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307899,"byte_end":307966,"line_start":264,"line_end":264,"column_start":5,"column_end":72}},{"value":"/ is where the rightmost index is varying the fastest.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":307971,"byte_end":308027,"line_start":265,"line_end":265,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308032,"byte_end":308035,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(D::Pattern, &mut A)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308040,"byte_end":308092,"line_start":267,"line_end":267,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308730,"byte_end":308735,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBase<S, D>>::slice","value":"pub fn slice<Do>(&Self, &SliceInfo<D::SliceArg, Do>) -> ArrayView<, A, Do>\nwhere Do: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Return a sliced view of the array.","sig":null,"attributes":[{"value":"/ Return a sliced view of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308266,"byte_end":308304,"line_start":275,"line_end":275,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308309,"byte_end":308312,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ See [*Slicing*](#slicing) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308317,"byte_end":308370,"line_start":277,"line_end":277,"column_start":5,"column_end":58}},{"value":"/ See also [`SliceInfo`] and [`D::SliceArg`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308375,"byte_end":308422,"line_start":278,"line_end":278,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308427,"byte_end":308430,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ [`SliceInfo`]: struct.SliceInfo.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308435,"byte_end":308475,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/ [`D::SliceArg`]: trait.Dimension.html#associatedtype.SliceArg","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308480,"byte_end":308545,"line_start":281,"line_end":281,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308550,"byte_end":308553,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308558,"byte_end":308627,"line_start":283,"line_end":283,"column_start":5,"column_end":74}},{"value":"/ (**Panics** if `D` is `IxDyn` and `info` does not match the number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308632,"byte_end":308718,"line_start":284,"line_end":284,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309364,"byte_end":309373,"line_start":302,"line_end":302,"column_start":12,"column_end":21},"name":"slice_mut","qualname":"<ArrayBase<S, D>>::slice_mut","value":"pub fn slice_mut<Do>(&mut Self, &SliceInfo<D::SliceArg, Do>)\n-> ArrayViewMut<, A, Do> where Do: Dimension, S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a sliced read-write view of the array.","sig":null,"attributes":[{"value":"/ Return a sliced read-write view of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308889,"byte_end":308938,"line_start":292,"line_end":292,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308943,"byte_end":308946,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ See [*Slicing*](#slicing) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":308951,"byte_end":309004,"line_start":294,"line_end":294,"column_start":5,"column_end":58}},{"value":"/ See also [`SliceInfo`] and [`D::SliceArg`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309009,"byte_end":309056,"line_start":295,"line_end":295,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309061,"byte_end":309064,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`SliceInfo`]: struct.SliceInfo.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309069,"byte_end":309109,"line_start":297,"line_end":297,"column_start":5,"column_end":45}},{"value":"/ [`D::SliceArg`]: trait.Dimension.html#associatedtype.SliceArg","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309114,"byte_end":309179,"line_start":298,"line_end":298,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309184,"byte_end":309187,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309192,"byte_end":309261,"line_start":300,"line_end":300,"column_start":5,"column_end":74}},{"value":"/ (**Panics** if `D` is `IxDyn` and `info` does not match the number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309266,"byte_end":309352,"line_start":301,"line_end":301,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":310048,"byte_end":310058,"line_start":320,"line_end":320,"column_start":12,"column_end":22},"name":"slice_move","qualname":"<ArrayBase<S, D>>::slice_move","value":"pub fn slice_move<Do>(Self, &SliceInfo<D::SliceArg, Do>) -> ArrayBase<S, Do>\nwhere Do: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Slice the array, possibly changing the number of dimensions.","sig":null,"attributes":[{"value":"/ Slice the array, possibly changing the number of dimensions.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309558,"byte_end":309622,"line_start":310,"line_end":310,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309627,"byte_end":309630,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ See [*Slicing*](#slicing) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309635,"byte_end":309688,"line_start":312,"line_end":312,"column_start":5,"column_end":58}},{"value":"/ See also [`SliceInfo`] and [`D::SliceArg`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309693,"byte_end":309740,"line_start":313,"line_end":313,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309745,"byte_end":309748,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ [`SliceInfo`]: struct.SliceInfo.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309753,"byte_end":309793,"line_start":315,"line_end":315,"column_start":5,"column_end":45}},{"value":"/ [`D::SliceArg`]: trait.Dimension.html#associatedtype.SliceArg","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309798,"byte_end":309863,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309868,"byte_end":309871,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309876,"byte_end":309945,"line_start":318,"line_end":318,"column_start":5,"column_end":74}},{"value":"/ (**Panics** if `D` is `IxDyn` and `info` does not match the number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":309950,"byte_end":310036,"line_start":319,"line_end":319,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311882,"byte_end":311896,"line_start":366,"line_end":366,"column_start":12,"column_end":26},"name":"slice_collapse","qualname":"<ArrayBase<S, D>>::slice_collapse","value":"pub fn slice_collapse(&mut Self, &D::SliceArg)","parent":null,"children":[],"decl_id":null,"docs":" Slice the array in place without changing the number of dimensions.","sig":null,"attributes":[{"value":"/ Slice the array in place without changing the number of dimensions.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311176,"byte_end":311247,"line_start":352,"line_end":352,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311252,"byte_end":311255,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Note that [`&SliceInfo`](struct.SliceInfo.html) (produced by the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311260,"byte_end":311328,"line_start":354,"line_end":354,"column_start":5,"column_end":73}},{"value":"/ [`s![]`](macro.s!.html) macro) will usually coerce into `&D::SliceArg`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311333,"byte_end":311407,"line_start":355,"line_end":355,"column_start":5,"column_end":79}},{"value":"/ automatically, but in some cases (e.g. if `D` is `IxDyn`), you may need","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311412,"byte_end":311487,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to call `.as_ref()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311492,"byte_end":311516,"line_start":357,"line_end":357,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311521,"byte_end":311524,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ See [*Slicing*](#slicing) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311529,"byte_end":311582,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ See also [`D::SliceArg`].","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311587,"byte_end":311616,"line_start":360,"line_end":360,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311621,"byte_end":311624,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ [`D::SliceArg`]: trait.Dimension.html#associatedtype.SliceArg","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311629,"byte_end":311694,"line_start":362,"line_end":362,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311699,"byte_end":311702,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311707,"byte_end":311776,"line_start":364,"line_end":364,"column_start":5,"column_end":74}},{"value":"/ (**Panics** if `D` is `IxDyn` and `indices` does not match the number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":311781,"byte_end":311870,"line_start":365,"line_end":365,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312894,"byte_end":312907,"line_start":388,"line_end":388,"column_start":12,"column_end":25},"name":"slice_inplace","qualname":"<ArrayBase<S, D>>::slice_inplace","value":"pub fn slice_inplace(&mut Self, &D::SliceArg)","parent":null,"children":[],"decl_id":null,"docs":" Slice the array in place without changing the number of dimensions.","sig":null,"attributes":[{"value":"/ Slice the array in place without changing the number of dimensions.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312565,"byte_end":312636,"line_start":383,"line_end":383,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312641,"byte_end":312644,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312649,"byte_end":312718,"line_start":385,"line_end":385,"column_start":5,"column_end":74}},{"value":"/ (**Panics** if `D` is `IxDyn` and `indices` does not match the number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312723,"byte_end":312812,"line_start":386,"line_end":386,"column_start":5,"column_end":94}},{"value":"deprecated(note = \"renamed to `slice_collapse`\", since = \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312817,"byte_end":312882,"line_start":387,"line_end":387,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313197,"byte_end":313207,"line_start":396,"line_end":396,"column_start":12,"column_end":22},"name":"slice_axis","qualname":"<ArrayBase<S, D>>::slice_axis","value":"pub fn slice_axis(&Self, Axis, Slice) -> ArrayView<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return a view of the array, sliced along the specified axis.","sig":null,"attributes":[{"value":"/ Return a view of the array, sliced along the specified axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":312992,"byte_end":313056,"line_start":392,"line_end":392,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313061,"byte_end":313064,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313069,"byte_end":313138,"line_start":394,"line_end":394,"column_start":5,"column_end":74}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313143,"byte_end":313185,"line_start":395,"line_end":395,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313585,"byte_end":313599,"line_start":406,"line_end":406,"column_start":12,"column_end":26},"name":"slice_axis_mut","qualname":"<ArrayBase<S, D>>::slice_axis_mut","value":"pub fn slice_axis_mut(&mut Self, Axis, Slice) -> ArrayViewMut<, A, D> where\nS: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view of the array, sliced along the specified axis.","sig":null,"attributes":[{"value":"/ Return a mutable view of the array, sliced along the specified axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313372,"byte_end":313444,"line_start":402,"line_end":402,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313449,"byte_end":313452,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313457,"byte_end":313526,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313531,"byte_end":313573,"line_start":405,"line_end":405,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314016,"byte_end":314034,"line_start":419,"line_end":419,"column_start":12,"column_end":30},"name":"slice_axis_inplace","qualname":"<ArrayBase<S, D>>::slice_axis_inplace","value":"pub fn slice_axis_inplace(&mut Self, Axis, Slice)","parent":null,"children":[],"decl_id":null,"docs":" Slice the array in place along the specified axis.","sig":null,"attributes":[{"value":"/ Slice the array in place along the specified axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313821,"byte_end":313875,"line_start":415,"line_end":415,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313880,"byte_end":313883,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ **Panics** if an index is out of bounds or step size is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313888,"byte_end":313957,"line_start":417,"line_end":417,"column_start":5,"column_end":74}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":313962,"byte_end":314004,"line_start":418,"line_end":418,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314940,"byte_end":314943,"line_start":453,"line_end":453,"column_start":12,"column_end":15},"name":"get","qualname":"<ArrayBase<S, D>>::get","value":"pub fn get<I>(&Self, I) -> Option<&A> where I: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the element at `index`, or return `None`\n if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Return a reference to the element at `index`, or return `None`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314445,"byte_end":314511,"line_start":435,"line_end":435,"column_start":5,"column_end":71}},{"value":"/ if the index is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314516,"byte_end":314550,"line_start":436,"line_end":436,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314555,"byte_end":314558,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Arrays also support indexing syntax: `array[index]`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314563,"byte_end":314619,"line_start":438,"line_end":438,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314624,"byte_end":314627,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314632,"byte_end":314639,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314644,"byte_end":314666,"line_start":441,"line_end":441,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314671,"byte_end":314674,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314679,"byte_end":314707,"line_start":443,"line_end":443,"column_start":5,"column_end":33}},{"value":"/                [3., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314712,"byte_end":314742,"line_start":444,"line_end":444,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314747,"byte_end":314750,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314755,"byte_end":314767,"line_start":446,"line_end":446,"column_start":5,"column_end":17}},{"value":"/     a.get((0, 1)) == Some(&2.) &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314772,"byte_end":314809,"line_start":447,"line_end":447,"column_start":5,"column_end":42}},{"value":"/     a.get((0, 2)) == None &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314814,"byte_end":314846,"line_start":448,"line_end":448,"column_start":5,"column_end":37}},{"value":"/     a[(0, 1)] == 2. &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314851,"byte_end":314877,"line_start":449,"line_end":449,"column_start":5,"column_end":31}},{"value":"/     a[[0, 1]] == 2.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314882,"byte_end":314905,"line_start":450,"line_end":450,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314910,"byte_end":314916,"line_start":451,"line_end":451,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":314921,"byte_end":314928,"line_start":452,"line_end":452,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2417},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":315490,"byte_end":315497,"line_start":471,"line_end":471,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ArrayBase<S, D>>::get_mut","value":"pub fn get_mut<I>(&mut Self, I) -> Option<&mut A> where S: DataMut,\nI: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the element at `index`, or return `None`\n if the index is out of bounds.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the element at `index`, or return `None`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":315365,"byte_end":315439,"line_start":469,"line_end":469,"column_start":5,"column_end":79}},{"value":"/ if the index is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":315444,"byte_end":315478,"line_start":470,"line_end":470,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316307,"byte_end":316311,"line_start":497,"line_end":497,"column_start":19,"column_end":23},"name":"uget","qualname":"<ArrayBase<S, D>>::uget","value":"pub unsafe fn uget<I>(&Self, I) -> &A where I: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Perform *unchecked* array indexing.","sig":null,"attributes":[{"value":"/ Perform *unchecked* array indexing.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316099,"byte_end":316138,"line_start":491,"line_end":491,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316143,"byte_end":316146,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Return a reference to the element at `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316151,"byte_end":316200,"line_start":493,"line_end":493,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316205,"byte_end":316208,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ **Note:** only unchecked for non-debug builds of ndarray.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316213,"byte_end":316274,"line_start":495,"line_end":495,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316279,"byte_end":316288,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316831,"byte_end":316839,"line_start":512,"line_end":512,"column_start":19,"column_end":27},"name":"uget_mut","qualname":"<ArrayBase<S, D>>::uget_mut","value":"pub unsafe fn uget_mut<I>(&mut Self, I) -> &mut A where S: DataMut,\nI: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Perform *unchecked* array indexing.","sig":null,"attributes":[{"value":"/ Perform *unchecked* array indexing.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316526,"byte_end":316565,"line_start":505,"line_end":505,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316570,"byte_end":316573,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Return a mutable reference to the element at `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316578,"byte_end":316635,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316640,"byte_end":316643,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ **Note:** Only unchecked for non-debug builds of ndarray.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316648,"byte_end":316713,"line_start":509,"line_end":509,"column_start":5,"column_end":70}},{"value":"/ **Note:** (For `ArcArray`) The array must be uniquely held when mutating it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316718,"byte_end":316798,"line_start":510,"line_end":510,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":316803,"byte_end":316812,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317298,"byte_end":317302,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"swap","qualname":"<ArrayBase<S, D>>::swap","value":"pub fn swap<I>(&mut Self, I, I) where S: DataMut, I: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Swap elements at indices `index1` and `index2`.","sig":null,"attributes":[{"value":"/ Swap elements at indices `index1` and `index2`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317138,"byte_end":317189,"line_start":522,"line_end":522,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317194,"byte_end":317197,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ Indices may be equal.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317202,"byte_end":317227,"line_start":524,"line_end":524,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317232,"byte_end":317235,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if an index is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317240,"byte_end":317286,"line_start":526,"line_end":526,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317835,"byte_end":317840,"line_start":544,"line_end":544,"column_start":19,"column_end":24},"name":"uswap","qualname":"<ArrayBase<S, D>>::uswap","value":"pub unsafe fn uswap<I>(&mut Self, I, I) where S: DataMut, I: NdIndex<D>","parent":null,"children":[],"decl_id":null,"docs":" Swap elements *unchecked* at indices `index1` and `index2`.","sig":null,"attributes":[{"value":"/ Swap elements *unchecked* at indices `index1` and `index2`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317569,"byte_end":317632,"line_start":538,"line_end":538,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317637,"byte_end":317640,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Indices may be equal.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317645,"byte_end":317670,"line_start":540,"line_end":540,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317675,"byte_end":317678,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ **Note:** only unchecked for non-debug builds of ndarray.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317683,"byte_end":317748,"line_start":542,"line_end":542,"column_start":5,"column_end":70}},{"value":"/ **Note:** (For `ArcArray`) The array must be uniquely held.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":317753,"byte_end":317816,"line_start":543,"line_end":543,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319323,"byte_end":319333,"line_start":586,"line_end":586,"column_start":12,"column_end":22},"name":"index_axis","qualname":"<ArrayBase<S, D>>::index_axis","value":"pub fn index_axis(&Self, Axis, usize) -> ArrayView<, A, D::Smaller> where\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Returns a view restricted to `index` along the axis, with the axis\n removed.","sig":null,"attributes":[{"value":"/ Returns a view restricted to `index` along the axis, with the axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318539,"byte_end":318609,"line_start":565,"line_end":565,"column_start":5,"column_end":75}},{"value":"/ removed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318614,"byte_end":318626,"line_start":566,"line_end":566,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318631,"byte_end":318634,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ See [*Subviews*](#subviews) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318639,"byte_end":318694,"line_start":568,"line_end":568,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318699,"byte_end":318702,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318707,"byte_end":318760,"line_start":570,"line_end":570,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318765,"byte_end":318768,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318773,"byte_end":318780,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr2, ArrayView, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318785,"byte_end":318826,"line_start":573,"line_end":573,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318831,"byte_end":318834,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2. ],    // ... axis 0, row 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318839,"byte_end":318892,"line_start":575,"line_end":575,"column_start":5,"column_end":58}},{"value":"/                [3., 4. ],    // --- axis 0, row 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318897,"byte_end":318950,"line_start":576,"line_end":576,"column_start":5,"column_end":58}},{"value":"/                [5., 6. ]]);  // ... axis 0, row 2","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":318955,"byte_end":319008,"line_start":577,"line_end":577,"column_start":5,"column_end":58}},{"value":"/ //               .   \\","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319013,"byte_end":319039,"line_start":578,"line_end":578,"column_start":5,"column_end":31}},{"value":"/ //                .   axis 1, column 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319044,"byte_end":319086,"line_start":579,"line_end":579,"column_start":5,"column_end":47}},{"value":"/ //                 axis 1, column 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319091,"byte_end":319130,"line_start":580,"line_end":580,"column_start":5,"column_end":44}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319135,"byte_end":319147,"line_start":581,"line_end":581,"column_start":5,"column_end":17}},{"value":"/     a.index_axis(Axis(0), 1) == ArrayView::from(&[3., 4.]) &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319152,"byte_end":319217,"line_start":582,"line_end":582,"column_start":5,"column_end":70}},{"value":"/     a.index_axis(Axis(1), 1) == ArrayView::from(&[2., 4., 6.])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319222,"byte_end":319288,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319293,"byte_end":319299,"line_start":584,"line_end":584,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319304,"byte_end":319311,"line_start":585,"line_end":585,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320189,"byte_end":320203,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"index_axis_mut","qualname":"<ArrayBase<S, D>>::index_axis_mut","value":"pub fn index_axis_mut(&mut Self, Axis, usize) -> ArrayViewMut<, A, D::Smaller>\nwhere S: DataMut, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable view restricted to `index` along the axis, with the\n axis removed.","sig":null,"attributes":[{"value":"/ Returns a mutable view restricted to `index` along the axis, with the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319494,"byte_end":319567,"line_start":593,"line_end":593,"column_start":5,"column_end":78}},{"value":"/ axis removed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319572,"byte_end":319589,"line_start":594,"line_end":594,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319594,"byte_end":319597,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319602,"byte_end":319655,"line_start":596,"line_end":596,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319660,"byte_end":319663,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319668,"byte_end":319675,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr2, aview2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319680,"byte_end":319718,"line_start":599,"line_end":599,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319723,"byte_end":319726,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let mut a = arr2(&[[1., 2. ],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319731,"byte_end":319764,"line_start":601,"line_end":601,"column_start":5,"column_end":38}},{"value":"/                    [3., 4. ]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319769,"byte_end":319804,"line_start":602,"line_end":602,"column_start":5,"column_end":40}},{"value":"/ //                   .   \\","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319809,"byte_end":319839,"line_start":603,"line_end":603,"column_start":5,"column_end":35}},{"value":"/ //                    .   axis 1, column 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319844,"byte_end":319890,"line_start":604,"line_end":604,"column_start":5,"column_end":51}},{"value":"/ //                     axis 1, column 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319895,"byte_end":319938,"line_start":605,"line_end":605,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319943,"byte_end":319946,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319951,"byte_end":319956,"line_start":607,"line_end":607,"column_start":5,"column_end":10}},{"value":"/     let mut column1 = a.index_axis_mut(Axis(1), 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":319961,"byte_end":320016,"line_start":608,"line_end":608,"column_start":5,"column_end":60}},{"value":"/     column1 += 10.;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320021,"byte_end":320044,"line_start":609,"line_end":609,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320049,"byte_end":320054,"line_start":610,"line_end":610,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320059,"byte_end":320062,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320067,"byte_end":320079,"line_start":612,"line_end":612,"column_start":5,"column_end":17}},{"value":"/     a == aview2(&[[1., 12.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320084,"byte_end":320116,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/                   [3., 14.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320121,"byte_end":320154,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320159,"byte_end":320165,"line_start":615,"line_end":615,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320170,"byte_end":320177,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320654,"byte_end":320669,"line_start":630,"line_end":630,"column_start":12,"column_end":27},"name":"index_axis_move","qualname":"<ArrayBase<S, D>>::index_axis_move","value":"pub fn index_axis_move(Self, Axis, usize) -> ArrayBase<S, D::Smaller> where\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Collapses the array to `index` along the axis and removes the axis.","sig":null,"attributes":[{"value":"/ Collapses the array to `index` along the axis and removes the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320395,"byte_end":320466,"line_start":625,"line_end":625,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320471,"byte_end":320474,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ See [`.index_axis()`](#method.index_axis) and [*Subviews*](#subviews) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320479,"byte_end":320576,"line_start":627,"line_end":627,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320581,"byte_end":320584,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":320589,"byte_end":320642,"line_start":629,"line_end":629,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321199,"byte_end":321212,"line_start":648,"line_end":648,"column_start":12,"column_end":25},"name":"collapse_axis","qualname":"<ArrayBase<S, D>>::collapse_axis","value":"pub fn collapse_axis(&mut Self, Axis, usize)","parent":null,"children":[],"decl_id":null,"docs":" Selects `index` along the axis, collapsing the axis into length one.","sig":null,"attributes":[{"value":"/ Selects `index` along the axis, collapsing the axis into length one.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321049,"byte_end":321121,"line_start":645,"line_end":645,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321126,"byte_end":321129,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321134,"byte_end":321187,"line_start":647,"line_end":647,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2436},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321674,"byte_end":321681,"line_start":663,"line_end":663,"column_start":12,"column_end":19},"name":"subview","qualname":"<ArrayBase<S, D>>::subview","value":"pub fn subview(&Self, Axis, Ix) -> ArrayView<, A, D::Smaller> where\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Along `axis`, select the subview `index` and return a\n view with that axis removed.","sig":null,"attributes":[{"value":"/ Along `axis`, select the subview `index` and return a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321436,"byte_end":321493,"line_start":658,"line_end":658,"column_start":5,"column_end":62}},{"value":"/ view with that axis removed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321498,"byte_end":321530,"line_start":659,"line_end":659,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321535,"byte_end":321538,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321543,"byte_end":321596,"line_start":661,"line_end":661,"column_start":5,"column_end":58}},{"value":"deprecated(note = \"renamed to `index_axis`\", since = \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321601,"byte_end":321662,"line_start":662,"line_end":662,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2437},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322075,"byte_end":322086,"line_start":674,"line_end":674,"column_start":12,"column_end":23},"name":"subview_mut","qualname":"<ArrayBase<S, D>>::subview_mut","value":"pub fn subview_mut(&mut Self, Axis, Ix) -> ArrayViewMut<, A, D::Smaller> where\nS: DataMut, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Along `axis`, select the subview `index` and return a read-write view\n with the axis removed.","sig":null,"attributes":[{"value":"/ Along `axis`, select the subview `index` and return a read-write view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321823,"byte_end":321896,"line_start":669,"line_end":669,"column_start":5,"column_end":78}},{"value":"/ with the axis removed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321901,"byte_end":321927,"line_start":670,"line_end":670,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321932,"byte_end":321935,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321940,"byte_end":321993,"line_start":672,"line_end":672,"column_start":5,"column_end":58}},{"value":"deprecated(note = \"renamed to `index_axis_mut`\", since = \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":321998,"byte_end":322063,"line_start":673,"line_end":673,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322529,"byte_end":322544,"line_start":687,"line_end":687,"column_start":12,"column_end":27},"name":"subview_inplace","qualname":"<ArrayBase<S, D>>::subview_inplace","value":"pub fn subview_inplace(&mut Self, Axis, Ix)","parent":null,"children":[],"decl_id":null,"docs":" Collapse dimension `axis` into length one,\n and select the subview of `index` along that axis.","sig":null,"attributes":[{"value":"/ Collapse dimension `axis` into length one,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322273,"byte_end":322319,"line_start":682,"line_end":682,"column_start":5,"column_end":51}},{"value":"/ and select the subview of `index` along that axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322324,"byte_end":322378,"line_start":683,"line_end":683,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322383,"byte_end":322386,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is past the length of the axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322391,"byte_end":322448,"line_start":685,"line_end":685,"column_start":5,"column_end":62}},{"value":"deprecated(note = \"renamed to `collapse_axis`\", since = \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322453,"byte_end":322517,"line_start":686,"line_end":686,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2439},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322809,"byte_end":322821,"line_start":694,"line_end":694,"column_start":12,"column_end":24},"name":"into_subview","qualname":"<ArrayBase<S, D>>::into_subview","value":"pub fn into_subview(Self, Axis, Ix) -> ArrayBase<S, D::Smaller> where\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Along `axis`, select the subview `index` and return `self`\n with that axis removed.\n","sig":null,"attributes":[{"value":"/ Along `axis`, select the subview `index` and return `self`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322632,"byte_end":322694,"line_start":691,"line_end":691,"column_start":5,"column_end":67}},{"value":"/ with that axis removed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322699,"byte_end":322726,"line_start":692,"line_end":692,"column_start":5,"column_end":32}},{"value":"deprecated(note = \"renamed to `index_axis_move`\", since = \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322731,"byte_end":322797,"line_start":693,"line_end":693,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323614,"byte_end":323620,"line_start":721,"line_end":721,"column_start":12,"column_end":18},"name":"select","qualname":"<ArrayBase<S, D>>::select","value":"pub fn select(&Self, Axis, &[Ix]) -> Array<A, D> where A: Copy, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Along `axis`, select arbitrary subviews corresponding to `indices`\n and and copy them into a new array.","sig":null,"attributes":[{"value":"/ Along `axis`, select arbitrary subviews corresponding to `indices`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":322967,"byte_end":323037,"line_start":700,"line_end":700,"column_start":5,"column_end":75}},{"value":"/ and and copy them into a new array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323042,"byte_end":323081,"line_start":701,"line_end":701,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323086,"byte_end":323089,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or an element of `indices` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323094,"byte_end":323163,"line_start":703,"line_end":703,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323168,"byte_end":323171,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323176,"byte_end":323183,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323188,"byte_end":323218,"line_start":706,"line_end":706,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323223,"byte_end":323226,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ let x = arr2(&[[0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323231,"byte_end":323259,"line_start":708,"line_end":708,"column_start":5,"column_end":33}},{"value":"/                [2., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323264,"byte_end":323292,"line_start":709,"line_end":709,"column_start":5,"column_end":33}},{"value":"/                [4., 5.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323297,"byte_end":323325,"line_start":710,"line_end":710,"column_start":5,"column_end":33}},{"value":"/                [6., 7.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323330,"byte_end":323358,"line_start":711,"line_end":711,"column_start":5,"column_end":33}},{"value":"/                [8., 9.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323363,"byte_end":323393,"line_start":712,"line_end":712,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323398,"byte_end":323401,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ let r = x.select(Axis(0), &[0, 4, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323406,"byte_end":323448,"line_start":714,"line_end":714,"column_start":5,"column_end":47}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323453,"byte_end":323465,"line_start":715,"line_end":715,"column_start":5,"column_end":17}},{"value":"/         r == arr2(&[[0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323470,"byte_end":323503,"line_start":716,"line_end":716,"column_start":5,"column_end":38}},{"value":"/                     [8., 9.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323508,"byte_end":323541,"line_start":717,"line_end":717,"column_start":5,"column_end":38}},{"value":"/                     [6., 7.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323546,"byte_end":323580,"line_start":718,"line_end":718,"column_start":5,"column_end":39}},{"value":"/);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323585,"byte_end":323590,"line_start":719,"line_end":719,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":323595,"byte_end":323602,"line_start":720,"line_end":720,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2441},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325221,"byte_end":325228,"line_start":766,"line_end":766,"column_start":12,"column_end":19},"name":"genrows","qualname":"<ArrayBase<S, D>>::genrows","value":"pub fn genrows(&Self) -> Lanes<, A, D::Smaller>","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over the *generalized*\n rows of the array. For a 2D array these are the regular rows.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over the *generalized*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324171,"byte_end":324243,"line_start":740,"line_end":740,"column_start":5,"column_end":77}},{"value":"/ rows of the array. For a 2D array these are the regular rows.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324248,"byte_end":324313,"line_start":741,"line_end":741,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324318,"byte_end":324321,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `.lanes(Axis(n - 1))` where *n* is `self.ndim()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324326,"byte_end":324401,"line_start":743,"line_end":743,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324406,"byte_end":324409,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ For an array of dimensions *a* × *b* × *c* × ... × *l* × *m*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324414,"byte_end":324483,"line_start":745,"line_end":745,"column_start":5,"column_end":69}},{"value":"/ it has *a* × *b* × *c* × ... × *l* rows each of length *m*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324488,"byte_end":324555,"line_start":746,"line_end":746,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324560,"byte_end":324563,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ For example, in a 2 × 2 × 3 array, each row is 3 elements long","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324568,"byte_end":324636,"line_start":748,"line_end":748,"column_start":5,"column_end":71}},{"value":"/ and there are 2 × 2 = 4 rows in total.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324641,"byte_end":324684,"line_start":749,"line_end":749,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324689,"byte_end":324692,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView1<A>` (1D array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324697,"byte_end":324753,"line_start":751,"line_end":751,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324758,"byte_end":324761,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324766,"byte_end":324773,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr3, Axis, arr1};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324778,"byte_end":324814,"line_start":754,"line_end":754,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324819,"byte_end":324822,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let a = arr3(&[[[ 0,  1,  2],    // -- row 0, 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324827,"byte_end":324878,"line_start":756,"line_end":756,"column_start":5,"column_end":56}},{"value":"/                 [ 3,  4,  5]],   // -- row 0, 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324883,"byte_end":324934,"line_start":757,"line_end":757,"column_start":5,"column_end":56}},{"value":"/                [[ 6,  7,  8],    // -- row 1, 0","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324939,"byte_end":324990,"line_start":758,"line_end":758,"column_start":5,"column_end":56}},{"value":"/                 [ 9, 10, 11]]]); // -- row 1, 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":324995,"byte_end":325046,"line_start":759,"line_end":759,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325051,"byte_end":325054,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ // `genrows` will yield the four generalized rows of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325059,"byte_end":325126,"line_start":761,"line_end":761,"column_start":5,"column_end":72}},{"value":"/ for row in a.genrows() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325131,"byte_end":325159,"line_start":762,"line_end":762,"column_start":5,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325164,"byte_end":325187,"line_start":763,"line_end":763,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325192,"byte_end":325197,"line_start":764,"line_end":764,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325202,"byte_end":325209,"line_start":765,"line_end":765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325603,"byte_end":325614,"line_start":776,"line_end":776,"column_start":12,"column_end":23},"name":"genrows_mut","qualname":"<ArrayBase<S, D>>::genrows_mut","value":"pub fn genrows_mut(&mut Self) -> LanesMut<, A, D::Smaller> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over the *generalized*\n rows of the array and yields mutable array views.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over the *generalized*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325381,"byte_end":325453,"line_start":772,"line_end":772,"column_start":5,"column_end":77}},{"value":"/ rows of the array and yields mutable array views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325458,"byte_end":325511,"line_start":773,"line_end":773,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325516,"byte_end":325519,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView1<A>` (1D read-write array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325524,"byte_end":325591,"line_start":775,"line_end":775,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2443},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326865,"byte_end":326875,"line_start":810,"line_end":810,"column_start":12,"column_end":22},"name":"gencolumns","qualname":"<ArrayBase<S, D>>::gencolumns","value":"pub fn gencolumns(&Self) -> Lanes<, A, D::Smaller>","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over the *generalized*\n columns of the array. For a 2D array these are the regular columns.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over the *generalized*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325810,"byte_end":325882,"line_start":784,"line_end":784,"column_start":5,"column_end":77}},{"value":"/ columns of the array. For a 2D array these are the regular columns.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325887,"byte_end":325958,"line_start":785,"line_end":785,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325963,"byte_end":325966,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `.lanes(Axis(0))`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":325971,"byte_end":326015,"line_start":787,"line_end":787,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326020,"byte_end":326023,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ For an array of dimensions *a* × *b* × *c* × ... × *l* × *m*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326028,"byte_end":326097,"line_start":789,"line_end":789,"column_start":5,"column_end":69}},{"value":"/ it has *b* × *c* × ... × *l* × *m* columns each of length *a*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326102,"byte_end":326172,"line_start":790,"line_end":790,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326177,"byte_end":326180,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ For example, in a 2 × 2 × 3 array, each column is 2 elements long","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326185,"byte_end":326256,"line_start":792,"line_end":792,"column_start":5,"column_end":74}},{"value":"/ and there are 2 × 3 = 6 columns in total.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326261,"byte_end":326307,"line_start":793,"line_end":793,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326312,"byte_end":326315,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView1<A>` (1D array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326320,"byte_end":326376,"line_start":795,"line_end":795,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326381,"byte_end":326384,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326389,"byte_end":326396,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr3, Axis, arr1};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326401,"byte_end":326437,"line_start":798,"line_end":798,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326442,"byte_end":326445,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ // The generalized columns of a 3D array:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326450,"byte_end":326495,"line_start":800,"line_end":800,"column_start":5,"column_end":50}},{"value":"/ // are directed along the 0th axis: 0 and 6, 1 and 7 and so on...","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326500,"byte_end":326569,"line_start":801,"line_end":801,"column_start":5,"column_end":74}},{"value":"/ let a = arr3(&[[[ 0,  1,  2], [ 3,  4,  5]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326574,"byte_end":326622,"line_start":802,"line_end":802,"column_start":5,"column_end":53}},{"value":"/                [[ 6,  7,  8], [ 9, 10, 11]]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326627,"byte_end":326677,"line_start":803,"line_end":803,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326682,"byte_end":326685,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ // Here `gencolumns` will yield the six generalized columns of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326690,"byte_end":326767,"line_start":805,"line_end":805,"column_start":5,"column_end":82}},{"value":"/ for row in a.gencolumns() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326772,"byte_end":326803,"line_start":806,"line_end":806,"column_start":5,"column_end":36}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326808,"byte_end":326831,"line_start":807,"line_end":807,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326836,"byte_end":326841,"line_start":808,"line_end":808,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326846,"byte_end":326853,"line_start":809,"line_end":809,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2444},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327186,"byte_end":327200,"line_start":818,"line_end":818,"column_start":12,"column_end":26},"name":"gencolumns_mut","qualname":"<ArrayBase<S, D>>::gencolumns_mut","value":"pub fn gencolumns_mut(&mut Self) -> LanesMut<, A, D::Smaller> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over the *generalized*\n columns of the array and yields mutable array views.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over the *generalized*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":326961,"byte_end":327033,"line_start":814,"line_end":814,"column_start":5,"column_end":77}},{"value":"/ columns of the array and yields mutable array views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327038,"byte_end":327094,"line_start":815,"line_end":815,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327099,"byte_end":327102,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView1<A>` (1D read-write array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327107,"byte_end":327174,"line_start":817,"line_end":817,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2445},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328465,"byte_end":328470,"line_start":852,"line_end":852,"column_start":12,"column_end":17},"name":"lanes","qualname":"<ArrayBase<S, D>>::lanes","value":"pub fn lanes(&Self, Axis) -> Lanes<, A, D::Smaller>","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over all 1D lanes\n pointing in the direction of `axis`.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over all 1D lanes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327329,"byte_end":327396,"line_start":824,"line_end":824,"column_start":5,"column_end":72}},{"value":"/ pointing in the direction of `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327401,"byte_end":327441,"line_start":825,"line_end":825,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327446,"byte_end":327449,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ When the pointing in the direction of the first axis, they are *columns*,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327454,"byte_end":327531,"line_start":827,"line_end":827,"column_start":5,"column_end":82}},{"value":"/ in the direction of the last axis *rows*; in general they are all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327536,"byte_end":327605,"line_start":828,"line_end":828,"column_start":5,"column_end":74}},{"value":"/ *lanes* and are one dimensional.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327610,"byte_end":327646,"line_start":829,"line_end":829,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327651,"byte_end":327654,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView1<A>` (1D array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327659,"byte_end":327715,"line_start":831,"line_end":831,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327720,"byte_end":327723,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327728,"byte_end":327735,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr3, aview1, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327740,"byte_end":327778,"line_start":834,"line_end":834,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327783,"byte_end":327786,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let a = arr3(&[[[ 0,  1,  2],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327791,"byte_end":327824,"line_start":836,"line_end":836,"column_start":5,"column_end":38}},{"value":"/                 [ 3,  4,  5]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327829,"byte_end":327863,"line_start":837,"line_end":837,"column_start":5,"column_end":39}},{"value":"/                [[ 6,  7,  8],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327868,"byte_end":327901,"line_start":838,"line_end":838,"column_start":5,"column_end":38}},{"value":"/                 [ 9, 10, 11]]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327906,"byte_end":327942,"line_start":839,"line_end":839,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327947,"byte_end":327950,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ let inner0 = a.lanes(Axis(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327955,"byte_end":327989,"line_start":841,"line_end":841,"column_start":5,"column_end":39}},{"value":"/ let inner1 = a.lanes(Axis(1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":327994,"byte_end":328028,"line_start":842,"line_end":842,"column_start":5,"column_end":39}},{"value":"/ let inner2 = a.lanes(Axis(2));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328033,"byte_end":328067,"line_start":843,"line_end":843,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328072,"byte_end":328075,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ // The first lane for axis 0 is [0, 6]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328080,"byte_end":328122,"line_start":845,"line_end":845,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(inner0.into_iter().next().unwrap(), aview1(&[0, 6]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328127,"byte_end":328195,"line_start":846,"line_end":846,"column_start":5,"column_end":73}},{"value":"/ // The first lane for axis 1 is [0, 3]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328200,"byte_end":328242,"line_start":847,"line_end":847,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(inner1.into_iter().next().unwrap(), aview1(&[0, 3]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328247,"byte_end":328315,"line_start":848,"line_end":848,"column_start":5,"column_end":73}},{"value":"/ // The first lane for axis 2 is [0, 1, 2]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328320,"byte_end":328365,"line_start":849,"line_end":849,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(inner2.into_iter().next().unwrap(), aview1(&[0, 1, 2]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328370,"byte_end":328441,"line_start":850,"line_end":850,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328446,"byte_end":328453,"line_start":851,"line_end":851,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328772,"byte_end":328781,"line_start":860,"line_end":860,"column_start":12,"column_end":21},"name":"lanes_mut","qualname":"<ArrayBase<S, D>>::lanes_mut","value":"pub fn lanes_mut(&mut Self, Axis) -> LanesMut<, A, D::Smaller> where\nS: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a producer and iterable that traverses over all 1D lanes\n pointing in the direction of `axis`.","sig":null,"attributes":[{"value":"/ Return a producer and iterable that traverses over all 1D lanes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328565,"byte_end":328632,"line_start":856,"line_end":856,"column_start":5,"column_end":72}},{"value":"/ pointing in the direction of `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328637,"byte_end":328677,"line_start":857,"line_end":857,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328682,"byte_end":328685,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayViewMut1<A>` (1D read-write array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328690,"byte_end":328760,"line_start":859,"line_end":859,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329204,"byte_end":329214,"line_start":874,"line_end":874,"column_start":12,"column_end":22},"name":"outer_iter","qualname":"<ArrayBase<S, D>>::outer_iter","value":"pub fn outer_iter(&Self) -> AxisIter<, A, D::Smaller> where D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over the outermost dimension\n and yields each subview.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over the outermost dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328920,"byte_end":328986,"line_start":867,"line_end":867,"column_start":5,"column_end":71}},{"value":"/ and yields each subview.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":328991,"byte_end":329019,"line_start":868,"line_end":868,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329024,"byte_end":329027,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `.axis_iter(Axis(0))`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329032,"byte_end":329080,"line_start":870,"line_end":870,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329085,"byte_end":329088,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView<A, D::Smaller>` (read-only array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329093,"byte_end":329167,"line_start":872,"line_end":872,"column_start":5,"column_end":79}},{"value":"allow(deprecated)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329172,"byte_end":329192,"line_start":873,"line_end":873,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329625,"byte_end":329639,"line_start":887,"line_end":887,"column_start":12,"column_end":26},"name":"outer_iter_mut","qualname":"<ArrayBase<S, D>>::outer_iter_mut","value":"pub fn outer_iter_mut(&mut Self) -> AxisIterMut<, A, D::Smaller> where\nS: DataMut, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over the outermost dimension\n and yields each subview.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over the outermost dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329333,"byte_end":329399,"line_start":880,"line_end":880,"column_start":5,"column_end":71}},{"value":"/ and yields each subview.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329404,"byte_end":329432,"line_start":881,"line_end":881,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329437,"byte_end":329440,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `.axis_iter_mut(Axis(0))`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329445,"byte_end":329497,"line_start":883,"line_end":883,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329502,"byte_end":329505,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayViewMut<A, D::Smaller>` (read-write array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329510,"byte_end":329588,"line_start":885,"line_end":885,"column_start":5,"column_end":83}},{"value":"allow(deprecated)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329593,"byte_end":329613,"line_start":886,"line_end":886,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330426,"byte_end":330435,"line_start":909,"line_end":909,"column_start":12,"column_end":21},"name":"axis_iter","qualname":"<ArrayBase<S, D>>::axis_iter","value":"pub fn axis_iter(&Self, Axis) -> AxisIter<, A, D::Smaller> where D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over `axis`\n and yields each subview along it.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over `axis`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329795,"byte_end":329844,"line_start":894,"line_end":894,"column_start":5,"column_end":54}},{"value":"/ and yields each subview along it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329849,"byte_end":329886,"line_start":895,"line_end":895,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329891,"byte_end":329894,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ For example, in a 3 × 4 × 5 array, with `axis` equal to `Axis(2)`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329899,"byte_end":329971,"line_start":897,"line_end":897,"column_start":5,"column_end":75}},{"value":"/ the iterator element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":329976,"byte_end":330000,"line_start":898,"line_end":898,"column_start":5,"column_end":29}},{"value":"/ is a 3 × 4 subview (and there are 5 in total), as shown","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330005,"byte_end":330065,"line_start":899,"line_end":899,"column_start":5,"column_end":64}},{"value":"/ in the picture below.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330070,"byte_end":330095,"line_start":900,"line_end":900,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330100,"byte_end":330103,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView<A, D::Smaller>` (read-only array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330108,"byte_end":330182,"line_start":902,"line_end":902,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330187,"byte_end":330190,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ See [*Subviews*](#subviews) for full documentation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330195,"byte_end":330250,"line_start":904,"line_end":904,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330255,"byte_end":330258,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330263,"byte_end":330305,"line_start":906,"line_end":906,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330310,"byte_end":330313,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ <img src=\"https://rust-ndarray.github.io/ndarray/images/axis_iter_3_4_5.svg\" height=\"250px\">","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330318,"byte_end":330414,"line_start":908,"line_end":908,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330835,"byte_end":330848,"line_start":923,"line_end":923,"column_start":12,"column_end":25},"name":"axis_iter_mut","qualname":"<ArrayBase<S, D>>::axis_iter_mut","value":"pub fn axis_iter_mut(&mut Self, Axis) -> AxisIterMut<, A, D::Smaller> where\nS: DataMut, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over `axis`\n and yields each mutable subview along it.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over `axis`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330570,"byte_end":330619,"line_start":916,"line_end":916,"column_start":5,"column_end":54}},{"value":"/ and yields each mutable subview along it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330624,"byte_end":330669,"line_start":917,"line_end":917,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330674,"byte_end":330677,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayViewMut<A, D::Smaller>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330682,"byte_end":330735,"line_start":919,"line_end":919,"column_start":5,"column_end":58}},{"value":"/ (read-write array view).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330740,"byte_end":330768,"line_start":920,"line_end":920,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330773,"byte_end":330776,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":330781,"byte_end":330823,"line_start":922,"line_end":922,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332024,"byte_end":332040,"line_start":957,"line_end":957,"column_start":12,"column_end":28},"name":"axis_chunks_iter","qualname":"<ArrayBase<S, D>>::axis_chunks_iter","value":"pub fn axis_chunks_iter(&Self, Axis, usize) -> AxisChunksIter<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over `axis` by chunks of `size`,\n yielding non-overlapping views along that axis.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over `axis` by chunks of `size`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331023,"byte_end":331093,"line_start":931,"line_end":931,"column_start":5,"column_end":75}},{"value":"/ yielding non-overlapping views along that axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331098,"byte_end":331149,"line_start":932,"line_end":932,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331154,"byte_end":331157,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayView<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331162,"byte_end":331203,"line_start":934,"line_end":934,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331208,"byte_end":331211,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The last view may have less elements if `size` does not divide","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331216,"byte_end":331282,"line_start":936,"line_end":936,"column_start":5,"column_end":71}},{"value":"/ the axis' dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331287,"byte_end":331311,"line_start":937,"line_end":937,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331316,"byte_end":331319,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331324,"byte_end":331366,"line_start":939,"line_end":939,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331371,"byte_end":331374,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331379,"byte_end":331386,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/ use ndarray::Array;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331391,"byte_end":331414,"line_start":942,"line_end":942,"column_start":5,"column_end":28}},{"value":"/ use ndarray::{arr3, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331419,"byte_end":331449,"line_start":943,"line_end":943,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331454,"byte_end":331457,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ let a = Array::from_iter(0..28).into_shape((2, 7, 2)).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331462,"byte_end":331529,"line_start":945,"line_end":945,"column_start":5,"column_end":72}},{"value":"/ let mut iter = a.axis_chunks_iter(Axis(1), 2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331534,"byte_end":331584,"line_start":946,"line_end":946,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331589,"byte_end":331592,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ // first iteration yields a 2 × 2 × 2 view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331597,"byte_end":331645,"line_start":948,"line_end":948,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(iter.next().unwrap(),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331650,"byte_end":331686,"line_start":949,"line_end":949,"column_start":5,"column_end":41}},{"value":"/            arr3(&[[[ 0,  1], [ 2, 3]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331691,"byte_end":331733,"line_start":950,"line_end":950,"column_start":5,"column_end":47}},{"value":"/                   [[14, 15], [16, 17]]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331738,"byte_end":331784,"line_start":951,"line_end":951,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331789,"byte_end":331792,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ // however the last element is a 2 × 1 × 2 view since 7 % 2 == 1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331797,"byte_end":331867,"line_start":953,"line_end":953,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(iter.next_back().unwrap(), arr3(&[[[12, 13]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331872,"byte_end":331932,"line_start":954,"line_end":954,"column_start":5,"column_end":65}},{"value":"/                                              [[26, 27]]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":331937,"byte_end":332000,"line_start":955,"line_end":955,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332005,"byte_end":332012,"line_start":956,"line_end":956,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332424,"byte_end":332444,"line_start":967,"line_end":967,"column_start":12,"column_end":32},"name":"axis_chunks_iter_mut","qualname":"<ArrayBase<S, D>>::axis_chunks_iter_mut","value":"pub fn axis_chunks_iter_mut(&mut Self, Axis, usize)\n-> AxisChunksIterMut<, A, D> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that traverses over `axis` by chunks of `size`,\n yielding non-overlapping read-write views along that axis.","sig":null,"attributes":[{"value":"/ Return an iterator that traverses over `axis` by chunks of `size`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332163,"byte_end":332233,"line_start":961,"line_end":961,"column_start":5,"column_end":75}},{"value":"/ yielding non-overlapping read-write views along that axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332238,"byte_end":332300,"line_start":962,"line_end":962,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332305,"byte_end":332308,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Iterator element is `ArrayViewMut<A, D>`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332313,"byte_end":332357,"line_start":964,"line_end":964,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332362,"byte_end":332365,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332370,"byte_end":332412,"line_start":966,"line_end":966,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2453},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333126,"byte_end":333138,"line_start":985,"line_end":985,"column_start":12,"column_end":24},"name":"exact_chunks","qualname":"<ArrayBase<S, D>>::exact_chunks","value":"pub fn exact_chunks<E>(&Self, E) -> ExactChunks<, A, D> where\nE: IntoDimension<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Return an exact chunks producer (and iterable).","sig":null,"attributes":[{"value":"/ Return an exact chunks producer (and iterable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332618,"byte_end":332669,"line_start":974,"line_end":974,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332674,"byte_end":332677,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ It produces the whole chunks of a given n-dimensional chunk size,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332682,"byte_end":332751,"line_start":976,"line_end":976,"column_start":5,"column_end":74}},{"value":"/ skipping the remainder along each dimension that doesn't fit evenly.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332756,"byte_end":332828,"line_start":977,"line_end":977,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332833,"byte_end":332836,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ The produced element is a `ArrayView<A, D>` with exactly the dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332841,"byte_end":332915,"line_start":979,"line_end":979,"column_start":5,"column_end":79}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332920,"byte_end":332937,"line_start":980,"line_end":980,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332942,"byte_end":332945,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any dimension of `chunk_size` is zero<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":332950,"byte_end":333009,"line_start":982,"line_end":982,"column_start":5,"column_end":64}},{"value":"/ (**Panics** if `D` is `IxDyn` and `chunk_size` does not match the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333014,"byte_end":333083,"line_start":983,"line_end":983,"column_start":5,"column_end":74}},{"value":"/ number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333088,"byte_end":333114,"line_start":984,"line_end":984,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2455},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334465,"byte_end":334481,"line_start":1023,"line_end":1023,"column_start":12,"column_end":28},"name":"exact_chunks_mut","qualname":"<ArrayBase<S, D>>::exact_chunks_mut","value":"pub fn exact_chunks_mut<E>(&mut Self, E) -> ExactChunksMut<, A, D> where\nE: IntoDimension<Dim = D>, S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return an exact chunks producer (and iterable).","sig":null,"attributes":[{"value":"/ Return an exact chunks producer (and iterable).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333291,"byte_end":333342,"line_start":991,"line_end":991,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333347,"byte_end":333350,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ It produces the whole chunks of a given n-dimensional chunk size,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333355,"byte_end":333424,"line_start":993,"line_end":993,"column_start":5,"column_end":74}},{"value":"/ skipping the remainder along each dimension that doesn't fit evenly.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333429,"byte_end":333501,"line_start":994,"line_end":994,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333506,"byte_end":333509,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ The produced element is a `ArrayViewMut<A, D>` with exactly","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333514,"byte_end":333577,"line_start":996,"line_end":996,"column_start":5,"column_end":68}},{"value":"/ the dimension `chunk_size`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333582,"byte_end":333613,"line_start":997,"line_end":997,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333618,"byte_end":333621,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any dimension of `chunk_size` is zero<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333626,"byte_end":333685,"line_start":999,"line_end":999,"column_start":5,"column_end":64}},{"value":"/ (**Panics** if `D` is `IxDyn` and `chunk_size` does not match the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333690,"byte_end":333759,"line_start":1000,"line_end":1000,"column_start":5,"column_end":74}},{"value":"/ number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333764,"byte_end":333790,"line_start":1001,"line_end":1001,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333795,"byte_end":333798,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333803,"byte_end":333814,"line_start":1003,"line_end":1003,"column_start":5,"column_end":16}},{"value":"/ use ndarray::Array;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333819,"byte_end":333842,"line_start":1004,"line_end":1004,"column_start":5,"column_end":28}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333847,"byte_end":333869,"line_start":1005,"line_end":1005,"column_start":5,"column_end":27}},{"value":"/ let mut a = Array::zeros((6, 7));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333874,"byte_end":333911,"line_start":1006,"line_end":1006,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333916,"byte_end":333919,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ // Fill each 2 × 2 chunk with the index of where it appeared in iteration","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":333924,"byte_end":334002,"line_start":1008,"line_end":1008,"column_start":5,"column_end":82}},{"value":"/ for (i, mut chunk) in a.exact_chunks_mut((2, 2)).into_iter().enumerate() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334007,"byte_end":334085,"line_start":1009,"line_end":1009,"column_start":5,"column_end":83}},{"value":"/     chunk.fill(i);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334090,"byte_end":334112,"line_start":1010,"line_end":1010,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334117,"byte_end":334122,"line_start":1011,"line_end":1011,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334127,"byte_end":334130,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ // The resulting array is:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334135,"byte_end":334165,"line_start":1013,"line_end":1013,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334170,"byte_end":334185,"line_start":1014,"line_end":1014,"column_start":5,"column_end":20}},{"value":"/   a,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334190,"byte_end":334198,"line_start":1015,"line_end":1015,"column_start":5,"column_end":13}},{"value":"/   arr2(&[[0, 0, 1, 1, 2, 2, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334203,"byte_end":334238,"line_start":1016,"line_end":1016,"column_start":5,"column_end":40}},{"value":"/          [0, 0, 1, 1, 2, 2, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334243,"byte_end":334278,"line_start":1017,"line_end":1017,"column_start":5,"column_end":40}},{"value":"/          [3, 3, 4, 4, 5, 5, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334283,"byte_end":334318,"line_start":1018,"line_end":1018,"column_start":5,"column_end":40}},{"value":"/          [3, 3, 4, 4, 5, 5, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334323,"byte_end":334358,"line_start":1019,"line_end":1019,"column_start":5,"column_end":40}},{"value":"/          [6, 6, 7, 7, 8, 8, 0],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334363,"byte_end":334398,"line_start":1020,"line_end":1020,"column_start":5,"column_end":40}},{"value":"/          [6, 6, 7, 7, 8, 8, 0]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334403,"byte_end":334441,"line_start":1021,"line_end":1021,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334446,"byte_end":334453,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335266,"byte_end":335273,"line_start":1044,"line_end":1044,"column_start":12,"column_end":19},"name":"windows","qualname":"<ArrayBase<S, D>>::windows","value":"pub fn windows<E>(&Self, E) -> Windows<, A, D> where E: IntoDimension<Dim = D>","parent":null,"children":[],"decl_id":null,"docs":" Return a window producer and iterable.","sig":null,"attributes":[{"value":"/ Return a window producer and iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334673,"byte_end":334715,"line_start":1030,"line_end":1030,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334720,"byte_end":334723,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ The windows are all distinct overlapping views of size `window_size`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334728,"byte_end":334800,"line_start":1032,"line_end":1032,"column_start":5,"column_end":77}},{"value":"/ that fit into the array's shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334805,"byte_end":334841,"line_start":1033,"line_end":1033,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334846,"byte_end":334849,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ Will yield over no elements if window size is larger","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334854,"byte_end":334910,"line_start":1035,"line_end":1035,"column_start":5,"column_end":61}},{"value":"/ than the actual array size of any dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334915,"byte_end":334963,"line_start":1036,"line_end":1036,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334968,"byte_end":334971,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ The produced element is an `ArrayView<A, D>` with exactly the dimension","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":334976,"byte_end":335051,"line_start":1038,"line_end":1038,"column_start":5,"column_end":80}},{"value":"/ `window_size`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335056,"byte_end":335074,"line_start":1039,"line_end":1039,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335079,"byte_end":335082,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any dimension of `window_size` is zero.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335087,"byte_end":335148,"line_start":1041,"line_end":1041,"column_start":5,"column_end":66}},{"value":"/ (**Panics** if `D` is `IxDyn` and `window_size` does not match the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335153,"byte_end":335223,"line_start":1042,"line_end":1042,"column_start":5,"column_end":75}},{"value":"/ number of array axes.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335228,"byte_end":335254,"line_start":1043,"line_end":1043,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2461},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335975,"byte_end":335979,"line_start":1064,"line_end":1064,"column_start":12,"column_end":16},"name":"diag","qualname":"<ArrayBase<S, D>>::diag","value":"pub fn diag(&Self) -> ArrayView1<, A>","parent":null,"children":[],"decl_id":null,"docs":" Return an view of the diagonal elements of the array.","sig":null,"attributes":[{"value":"/ Return an view of the diagonal elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335762,"byte_end":335819,"line_start":1060,"line_end":1060,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335824,"byte_end":335827,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ The diagonal is simply the sequence indexed by *(0, 0, .., 0)*,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335832,"byte_end":335899,"line_start":1062,"line_end":1062,"column_start":5,"column_end":72}},{"value":"/ *(1, 1, ..., 1)* etc as long as all axes have elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":335904,"byte_end":335963,"line_start":1063,"line_end":1063,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336130,"byte_end":336138,"line_start":1069,"line_end":1069,"column_start":12,"column_end":20},"name":"diag_mut","qualname":"<ArrayBase<S, D>>::diag_mut","value":"pub fn diag_mut(&mut Self) -> ArrayViewMut1<, A> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a read-write view over the diagonal elements of the array.\n","sig":null,"attributes":[{"value":"/ Return a read-write view over the diagonal elements of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336049,"byte_end":336118,"line_start":1068,"line_end":1068,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336312,"byte_end":336321,"line_start":1076,"line_end":1076,"column_start":12,"column_end":21},"name":"into_diag","qualname":"<ArrayBase<S, D>>::into_diag","value":"pub fn into_diag(Self) -> ArrayBase<S, Ix1>","parent":null,"children":[],"decl_id":null,"docs":" Return the diagonal as a one-dimensional array.\n","sig":null,"attributes":[{"value":"/ Return the diagonal as a one-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336249,"byte_end":336300,"line_start":1075,"line_end":1075,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337155,"byte_end":337173,"line_start":1102,"line_end":1102,"column_start":12,"column_end":30},"name":"is_standard_layout","qualname":"<ArrayBase<S, D>>::is_standard_layout","value":"pub fn is_standard_layout(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the array data is laid out in contiguous “C order” in\n memory (where the last index is the most rapidly varying).","sig":null,"attributes":[{"value":"/ Return `true` if the array data is laid out in contiguous “C order” in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336868,"byte_end":336946,"line_start":1097,"line_end":1097,"column_start":5,"column_end":79}},{"value":"/ memory (where the last index is the most rapidly varying).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":336951,"byte_end":337013,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337018,"byte_end":337021,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ Return `false` otherwise, i.e the array is possibly not","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337026,"byte_end":337085,"line_start":1100,"line_end":1100,"column_start":5,"column_end":64}},{"value":"/ contiguous in memory, it has custom strides, etc.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337090,"byte_end":337143,"line_start":1101,"line_end":1101,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338279,"byte_end":338285,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<ArrayBase<S, D>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const A","parent":null,"children":[],"decl_id":null,"docs":" Return a pointer to the first element in the array.","sig":null,"attributes":[{"value":"/ Return a pointer to the first element in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337886,"byte_end":337941,"line_start":1123,"line_end":1123,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337946,"byte_end":337949,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ Raw access to array elements needs to follow the strided indexing","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":337954,"byte_end":338023,"line_start":1125,"line_end":1125,"column_start":5,"column_end":74}},{"value":"/ scheme: an element at multi-index *I* in an array with strides *S* is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338028,"byte_end":338101,"line_start":1126,"line_end":1126,"column_start":5,"column_end":78}},{"value":"/ located at offset","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338106,"byte_end":338127,"line_start":1127,"line_end":1127,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338132,"byte_end":338135,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ *Σ<sub>0 ≤ k < d</sub> I<sub>k</sub> × S<sub>k</sub>*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338140,"byte_end":338201,"line_start":1129,"line_end":1129,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338206,"byte_end":338209,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ where *d* is `self.ndim()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338214,"byte_end":338245,"line_start":1131,"line_end":1131,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338250,"byte_end":338267,"line_start":1132,"line_end":1132,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338432,"byte_end":338442,"line_start":1139,"line_end":1139,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<ArrayBase<S, D>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut A where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable pointer to the first element in the array.\n","sig":null,"attributes":[{"value":"/ Return a mutable pointer to the first element in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338335,"byte_end":338398,"line_start":1137,"line_end":1137,"column_start":5,"column_end":68}},{"value":"inline(always)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338403,"byte_end":338420,"line_start":1138,"line_end":1138,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338853,"byte_end":338861,"line_start":1151,"line_end":1151,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ArrayBase<S, D>>::as_slice","value":"pub fn as_slice(&Self) -> Option<&[A]>","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice, if it is contiguous and in standard order.\n Return `None` otherwise.","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice, if it is contiguous and in standard order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338568,"byte_end":338652,"line_start":1146,"line_end":1146,"column_start":5,"column_end":87}},{"value":"/ Return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338657,"byte_end":338685,"line_start":1147,"line_end":1147,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338690,"byte_end":338693,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ If this function returns `Some(_)`, then the element order in the slice","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338698,"byte_end":338773,"line_start":1149,"line_end":1149,"column_start":5,"column_end":80}},{"value":"/ corresponds to the logical order of the array’s elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":338778,"byte_end":338841,"line_start":1150,"line_end":1150,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339211,"byte_end":339223,"line_start":1163,"line_end":1163,"column_start":12,"column_end":24},"name":"as_slice_mut","qualname":"<ArrayBase<S, D>>::as_slice_mut","value":"pub fn as_slice_mut(&mut Self) -> Option<&mut [A]> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice, if it is contiguous and in standard order.\n Return `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice, if it is contiguous and in standard order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339082,"byte_end":339166,"line_start":1161,"line_end":1161,"column_start":5,"column_end":87}},{"value":"/ Return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339171,"byte_end":339199,"line_start":1162,"line_end":1162,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339851,"byte_end":339872,"line_start":1183,"line_end":1183,"column_start":12,"column_end":33},"name":"as_slice_memory_order","qualname":"<ArrayBase<S, D>>::as_slice_memory_order","value":"pub fn as_slice_memory_order(&Self) -> Option<&[A]>","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice if it is contiguous,\n return `None` otherwise.","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice if it is contiguous,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339519,"byte_end":339580,"line_start":1176,"line_end":1176,"column_start":5,"column_end":64}},{"value":"/ return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339585,"byte_end":339613,"line_start":1177,"line_end":1177,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339618,"byte_end":339621,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ If this function returns `Some(_)`, then the elements in the slice","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339626,"byte_end":339696,"line_start":1179,"line_end":1179,"column_start":5,"column_end":75}},{"value":"/ have whatever order the elements have in memory.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339701,"byte_end":339753,"line_start":1180,"line_end":1180,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339758,"byte_end":339761,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ Implementation notes: Does not yet support negatively strided arrays.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":339766,"byte_end":339839,"line_start":1182,"line_end":1182,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340194,"byte_end":340219,"line_start":1195,"line_end":1195,"column_start":12,"column_end":37},"name":"as_slice_memory_order_mut","qualname":"<ArrayBase<S, D>>::as_slice_memory_order_mut","value":"pub fn as_slice_memory_order_mut(&mut Self) -> Option<&mut [A]> where\nS: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice if it is contiguous,\n return `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice if it is contiguous,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340088,"byte_end":340149,"line_start":1193,"line_end":1193,"column_start":5,"column_end":64}},{"value":"/ return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340154,"byte_end":340182,"line_start":1194,"line_end":1194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":341117,"byte_end":341127,"line_start":1224,"line_end":1224,"column_start":12,"column_end":22},"name":"into_shape","qualname":"<ArrayBase<S, D>>::into_shape","value":"pub fn into_shape<E>(Self, E) -> Result<ArrayBase<S, E::Dim>, ShapeError>\nwhere E: IntoDimension","parent":null,"children":[],"decl_id":null,"docs":" Transform the array into `shape`; any shape with the same number of\n elements is accepted, but the source array or view must be\n contiguous, otherwise we cannot rearrange the dimension.","sig":null,"attributes":[{"value":"/ Transform the array into `shape`; any shape with the same number of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340510,"byte_end":340581,"line_start":1208,"line_end":1208,"column_start":5,"column_end":76}},{"value":"/ elements is accepted, but the source array or view must be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340586,"byte_end":340648,"line_start":1209,"line_end":1209,"column_start":5,"column_end":67}},{"value":"/ contiguous, otherwise we cannot rearrange the dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340653,"byte_end":340713,"line_start":1210,"line_end":1210,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340718,"byte_end":340721,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ **Errors** if the shapes don't have the same number of elements.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340726,"byte_end":340798,"line_start":1212,"line_end":1212,"column_start":5,"column_end":77}},{"value":"/ **Errors** if the input array is not c- or f-contiguous.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340803,"byte_end":340863,"line_start":1213,"line_end":1213,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340868,"byte_end":340871,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340876,"byte_end":340883,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview1, aview2};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340888,"byte_end":340922,"line_start":1216,"line_end":1216,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340927,"byte_end":340930,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340935,"byte_end":340947,"line_start":1218,"line_end":1218,"column_start":5,"column_end":17}},{"value":"/     aview1(&[1., 2., 3., 4.]).into_shape((2, 2)).unwrap()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":340952,"byte_end":341013,"line_start":1219,"line_end":1219,"column_start":5,"column_end":66}},{"value":"/     == aview2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":341018,"byte_end":341047,"line_start":1220,"line_end":1220,"column_start":5,"column_end":34}},{"value":"/                 [3., 4.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":341052,"byte_end":341082,"line_start":1221,"line_end":1221,"column_start":5,"column_end":35}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":341087,"byte_end":341093,"line_start":1222,"line_end":1222,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":341098,"byte_end":341105,"line_start":1223,"line_end":1223,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342734,"byte_end":342741,"line_start":1271,"line_end":1271,"column_start":12,"column_end":19},"name":"reshape","qualname":"<ArrayBase<S, D>>::reshape","value":"pub fn reshape<E>(&Self, E) -> ArrayBase<S, E::Dim> where S: DataShared +\nDataOwned, A: Clone, E: IntoDimension","parent":null,"children":[],"decl_id":null,"docs":" *Note: Reshape is for `ArcArray` only. Use `.into_shape()` for\n other arrays and array views.*","sig":null,"attributes":[{"value":"/ *Note: Reshape is for `ArcArray` only. Use `.into_shape()` for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342101,"byte_end":342167,"line_start":1251,"line_end":1251,"column_start":5,"column_end":71}},{"value":"/ other arrays and array views.*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342172,"byte_end":342206,"line_start":1252,"line_end":1252,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342211,"byte_end":342214,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ Transform the array into `shape`; any shape with the same number of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342219,"byte_end":342290,"line_start":1254,"line_end":1254,"column_start":5,"column_end":76}},{"value":"/ elements is accepted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342295,"byte_end":342320,"line_start":1255,"line_end":1255,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342325,"byte_end":342328,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ May clone all elements if needed to arrange elements in standard","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342333,"byte_end":342401,"line_start":1257,"line_end":1257,"column_start":5,"column_end":73}},{"value":"/ layout (and break sharing).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342406,"byte_end":342437,"line_start":1258,"line_end":1258,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342442,"byte_end":342445,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ **Panics** if shapes are incompatible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342450,"byte_end":342492,"line_start":1260,"line_end":1260,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342497,"byte_end":342500,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342505,"byte_end":342512,"line_start":1262,"line_end":1262,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{rcarr1, rcarr2};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342517,"byte_end":342551,"line_start":1263,"line_end":1263,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342556,"byte_end":342559,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342564,"byte_end":342576,"line_start":1265,"line_end":1265,"column_start":5,"column_end":17}},{"value":"/     rcarr1(&[1., 2., 3., 4.]).reshape((2, 2))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342581,"byte_end":342630,"line_start":1266,"line_end":1266,"column_start":5,"column_end":54}},{"value":"/     == rcarr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342635,"byte_end":342664,"line_start":1267,"line_end":1267,"column_start":5,"column_end":34}},{"value":"/                 [3., 4.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342669,"byte_end":342699,"line_start":1268,"line_end":1268,"column_start":5,"column_end":35}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342704,"byte_end":342710,"line_start":1269,"line_end":1269,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":342715,"byte_end":342722,"line_start":1270,"line_end":1270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2481},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344009,"byte_end":344017,"line_start":1308,"line_end":1308,"column_start":12,"column_end":20},"name":"into_dyn","qualname":"<ArrayBase<S, D>>::into_dyn","value":"pub fn into_dyn(Self) -> ArrayBase<S, IxDyn>","parent":null,"children":[],"decl_id":null,"docs":" Convert any array or array view to a dynamic dimensional array or\n array view (respectively).","sig":null,"attributes":[{"value":"/ Convert any array or array view to a dynamic dimensional array or","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343707,"byte_end":343776,"line_start":1299,"line_end":1299,"column_start":5,"column_end":74}},{"value":"/ array view (respectively).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343781,"byte_end":343811,"line_start":1300,"line_end":1300,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343816,"byte_end":343819,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343824,"byte_end":343831,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr2, ArrayD};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343836,"byte_end":343868,"line_start":1303,"line_end":1303,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343873,"byte_end":343876,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ let array: ArrayD<i32> = arr2(&[[1, 2],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343881,"byte_end":343924,"line_start":1305,"line_end":1305,"column_start":5,"column_end":48}},{"value":"/                                 [3, 4]]).into_dyn();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343929,"byte_end":343985,"line_start":1306,"line_end":1306,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":343990,"byte_end":343997,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344718,"byte_end":344737,"line_start":1330,"line_end":1330,"column_start":12,"column_end":31},"name":"into_dimensionality","qualname":"<ArrayBase<S, D>>::into_dimensionality","value":"pub fn into_dimensionality<D2>(Self) -> Result<ArrayBase<S, D2>, ShapeError>\nwhere D2: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Convert an array or array view to another with the same type, but\n different dimensionality type. Errors if the dimensions don't agree.","sig":null,"attributes":[{"value":"/ Convert an array or array view to another with the same type, but","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344230,"byte_end":344299,"line_start":1317,"line_end":1317,"column_start":5,"column_end":74}},{"value":"/ different dimensionality type. Errors if the dimensions don't agree.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344304,"byte_end":344376,"line_start":1318,"line_end":1318,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344381,"byte_end":344384,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344389,"byte_end":344396,"line_start":1320,"line_end":1320,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{ArrayD, Ix2, IxDyn};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344401,"byte_end":344439,"line_start":1321,"line_end":1321,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344444,"byte_end":344447,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ // Create a dynamic dimensionality array and convert it to an Array2","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344452,"byte_end":344524,"line_start":1323,"line_end":1323,"column_start":5,"column_end":77}},{"value":"/ // (Ix2 dimension type).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344529,"byte_end":344557,"line_start":1324,"line_end":1324,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344562,"byte_end":344565,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ let array = ArrayD::<f64>::zeros(IxDyn(&[10, 10]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344570,"byte_end":344625,"line_start":1326,"line_end":1326,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344630,"byte_end":344633,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ assert!(array.into_dimensionality::<Ix2>().is_ok());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344638,"byte_end":344694,"line_start":1328,"line_end":1328,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":344699,"byte_end":344706,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346304,"byte_end":346313,"line_start":1375,"line_end":1375,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<ArrayBase<S, D>>::broadcast","value":"pub fn broadcast<E>(&Self, E) -> Option<ArrayView<, A, E::Dim>> where\nE: IntoDimension","parent":null,"children":[],"decl_id":null,"docs":" Act like a larger size and/or shape array by *broadcasting*\n into a larger shape, if possible.","sig":null,"attributes":[{"value":"/ Act like a larger size and/or shape array by *broadcasting*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345250,"byte_end":345313,"line_start":1346,"line_end":1346,"column_start":5,"column_end":68}},{"value":"/ into a larger shape, if possible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345318,"byte_end":345355,"line_start":1347,"line_end":1347,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345360,"byte_end":345363,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ Return `None` if shapes can not be broadcast together.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345368,"byte_end":345426,"line_start":1349,"line_end":1349,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345431,"byte_end":345434,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ ***Background***","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345439,"byte_end":345459,"line_start":1351,"line_end":1351,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345464,"byte_end":345467,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/  * Two axes are compatible if they are equal, or one of them is 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345472,"byte_end":345542,"line_start":1353,"line_end":1353,"column_start":5,"column_end":75}},{"value":"/  * In this instance, only the axes of the smaller side (self) can be 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345547,"byte_end":345622,"line_start":1354,"line_end":1354,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345627,"byte_end":345630,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ Compare axes beginning with the *last* axis of each shape.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345635,"byte_end":345697,"line_start":1356,"line_end":1356,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345702,"byte_end":345705,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ For example (1, 2, 4) can be broadcast into (7, 6, 2, 4)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345710,"byte_end":345770,"line_start":1358,"line_end":1358,"column_start":5,"column_end":65}},{"value":"/ because its axes are either equal or 1 (or missing);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345775,"byte_end":345831,"line_start":1359,"line_end":1359,"column_start":5,"column_end":61}},{"value":"/ while (2, 2) can *not* be broadcast into (2, 4).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345836,"byte_end":345888,"line_start":1360,"line_end":1360,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345893,"byte_end":345896,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ The implementation creates a view with strides set to zero for the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345901,"byte_end":345971,"line_start":1362,"line_end":1362,"column_start":5,"column_end":75}},{"value":"/ axes that are to be repeated.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":345976,"byte_end":346009,"line_start":1363,"line_end":1363,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346014,"byte_end":346017,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ The broadcasting documentation for Numpy has more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346022,"byte_end":346088,"line_start":1365,"line_end":1365,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346093,"byte_end":346096,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346101,"byte_end":346108,"line_start":1367,"line_end":1367,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview1, aview2};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346113,"byte_end":346147,"line_start":1368,"line_end":1368,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346152,"byte_end":346155,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346160,"byte_end":346172,"line_start":1370,"line_end":1370,"column_start":5,"column_end":17}},{"value":"/     aview1(&[1., 0.]).broadcast((10, 2)).unwrap()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346177,"byte_end":346230,"line_start":1371,"line_end":1371,"column_start":5,"column_end":58}},{"value":"/     == aview2(&[[1., 0.]; 10])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346235,"byte_end":346269,"line_start":1372,"line_end":1372,"column_start":5,"column_end":39}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346274,"byte_end":346280,"line_start":1373,"line_end":1373,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":346285,"byte_end":346292,"line_start":1374,"line_end":1374,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348864,"byte_end":348873,"line_start":1445,"line_end":1445,"column_start":12,"column_end":21},"name":"swap_axes","qualname":"<ArrayBase<S, D>>::swap_axes","value":"pub fn swap_axes(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swap axes `ax` and `bx`.","sig":null,"attributes":[{"value":"/ Swap axes `ax` and `bx`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348451,"byte_end":348479,"line_start":1429,"line_end":1429,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348484,"byte_end":348487,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ This does not move any data, it just adjusts the array’s dimensions","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348492,"byte_end":348565,"line_start":1431,"line_end":1431,"column_start":5,"column_end":76}},{"value":"/ and strides.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348570,"byte_end":348586,"line_start":1432,"line_end":1432,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348591,"byte_end":348594,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the axes are out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348599,"byte_end":348644,"line_start":1434,"line_end":1434,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348649,"byte_end":348652,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348657,"byte_end":348664,"line_start":1436,"line_end":1436,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348669,"byte_end":348691,"line_start":1437,"line_end":1437,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348696,"byte_end":348699,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ let mut a = arr2(&[[1., 2., 3.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348704,"byte_end":348742,"line_start":1439,"line_end":1439,"column_start":5,"column_end":43}},{"value":"/ a.swap_axes(0, 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348747,"byte_end":348769,"line_start":1440,"line_end":1440,"column_start":5,"column_end":27}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348774,"byte_end":348786,"line_start":1441,"line_end":1441,"column_start":5,"column_end":17}},{"value":"/     a == arr2(&[[1.], [2.], [3.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348791,"byte_end":348829,"line_start":1442,"line_end":1442,"column_start":5,"column_end":43}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348834,"byte_end":348840,"line_start":1443,"line_end":1443,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":348845,"byte_end":348852,"line_start":1444,"line_end":1444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2490},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349757,"byte_end":349770,"line_start":1472,"line_end":1472,"column_start":12,"column_end":25},"name":"permuted_axes","qualname":"<ArrayBase<S, D>>::permuted_axes","value":"pub fn permuted_axes<T>(Self, T) -> ArrayBase<S, D> where T: IntoDimension<Dim\n= D>","parent":null,"children":[],"decl_id":null,"docs":" Permute the axes.","sig":null,"attributes":[{"value":"/ Permute the axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349010,"byte_end":349031,"line_start":1450,"line_end":1450,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349036,"byte_end":349039,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ This does not move any data, it just adjusts the array’s dimensions","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349044,"byte_end":349117,"line_start":1452,"line_end":1452,"column_start":5,"column_end":76}},{"value":"/ and strides.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349122,"byte_end":349138,"line_start":1453,"line_end":1453,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349143,"byte_end":349146,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ *i* in the *j*-th place in the axes sequence means `self`'s *i*-th axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349151,"byte_end":349226,"line_start":1455,"line_end":1455,"column_start":5,"column_end":80}},{"value":"/ becomes `self.permuted_axes()`'s *j*-th axis","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349231,"byte_end":349279,"line_start":1456,"line_end":1456,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349284,"byte_end":349287,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the axes are out of bounds, if an axis is missing,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349292,"byte_end":349367,"line_start":1458,"line_end":1458,"column_start":5,"column_end":80}},{"value":"/ or if an axis is repeated more than once.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349372,"byte_end":349417,"line_start":1459,"line_end":1459,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349422,"byte_end":349425,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349430,"byte_end":349444,"line_start":1461,"line_end":1461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349449,"byte_end":349452,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349457,"byte_end":349464,"line_start":1463,"line_end":1463,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr2, Array3};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349469,"byte_end":349501,"line_start":1464,"line_end":1464,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349506,"byte_end":349509,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[0, 1], [2, 3]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349514,"byte_end":349550,"line_start":1466,"line_end":1466,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(a.view().permuted_axes([1, 0]), a.t());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349555,"byte_end":349609,"line_start":1467,"line_end":1467,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349614,"byte_end":349617,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ let b = Array3::<u8>::zeros((1, 2, 3));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349622,"byte_end":349665,"line_start":1469,"line_end":1469,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(b.permuted_axes([1, 0, 2]).shape(), &[2, 1, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349670,"byte_end":349733,"line_start":1470,"line_end":1470,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":349738,"byte_end":349745,"line_start":1471,"line_end":1471,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":350990,"byte_end":351003,"line_start":1507,"line_end":1507,"column_start":12,"column_end":25},"name":"reversed_axes","qualname":"<ArrayBase<S, D>>::reversed_axes","value":"pub fn reversed_axes(Self) -> ArrayBase<S, D>","parent":null,"children":[],"decl_id":null,"docs":" Transpose the array by reversing axes.","sig":null,"attributes":[{"value":"/ Transpose the array by reversing axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":350811,"byte_end":350853,"line_start":1503,"line_end":1503,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":350858,"byte_end":350861,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ Transposition reverses the order of the axes (dimensions and strides)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":350866,"byte_end":350939,"line_start":1505,"line_end":1505,"column_start":5,"column_end":78}},{"value":"/ while retaining the same data.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":350944,"byte_end":350978,"line_start":1506,"line_end":1506,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351357,"byte_end":351358,"line_start":1518,"line_end":1518,"column_start":12,"column_end":13},"name":"t","qualname":"<ArrayBase<S, D>>::t","value":"pub fn t(&Self) -> ArrayView<, A, D>","parent":null,"children":[],"decl_id":null,"docs":" Return a transposed view of the array.","sig":null,"attributes":[{"value":"/ Return a transposed view of the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351143,"byte_end":351185,"line_start":1513,"line_end":1513,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351190,"byte_end":351193,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ This is a shorthand for `self.view().reversed_axes()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351198,"byte_end":351256,"line_start":1515,"line_end":1515,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351261,"byte_end":351264,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ See also the more general methods `.reversed_axes()` and `.swap_axes()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351269,"byte_end":351345,"line_start":1517,"line_end":1517,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351509,"byte_end":351513,"line_start":1523,"line_end":1523,"column_start":12,"column_end":16},"name":"axes","qualname":"<ArrayBase<S, D>>::axes","value":"pub fn axes(&Self) -> Axes<, D>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the length and stride of each axis.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the length and stride of each axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351434,"byte_end":351497,"line_start":1522,"line_end":1522,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351881,"byte_end":351896,"line_start":1536,"line_end":1536,"column_start":12,"column_end":27},"name":"max_stride_axis","qualname":"<ArrayBase<S, D>>::max_stride_axis","value":"pub fn max_stride_axis(&Self) -> Axis","parent":null,"children":[],"decl_id":null,"docs":" Return the axis with the greatest stride (by absolute value),\n preferring axes with len > 1.\n","sig":null,"attributes":[{"value":"/ Return the axis with the greatest stride (by absolute value),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351766,"byte_end":351831,"line_start":1534,"line_end":1534,"column_start":5,"column_end":70}},{"value":"/ preferring axes with len > 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351836,"byte_end":351869,"line_start":1535,"line_end":1535,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352077,"byte_end":352088,"line_start":1543,"line_end":1543,"column_start":12,"column_end":23},"name":"invert_axis","qualname":"<ArrayBase<S, D>>::invert_axis","value":"pub fn invert_axis(&mut Self, Axis)","parent":null,"children":[],"decl_id":null,"docs":" Reverse the stride of `axis`.","sig":null,"attributes":[{"value":"/ Reverse the stride of `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":351973,"byte_end":352006,"line_start":1540,"line_end":1540,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352011,"byte_end":352014,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352019,"byte_end":352065,"line_start":1542,"line_end":1542,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353878,"byte_end":353888,"line_start":1589,"line_end":1589,"column_start":12,"column_end":22},"name":"merge_axes","qualname":"<ArrayBase<S, D>>::merge_axes","value":"pub fn merge_axes(&mut Self, Axis, Axis) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If possible, merge in the axis `take` to `into`.","sig":null,"attributes":[{"value":"/ If possible, merge in the axis `take` to `into`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352411,"byte_end":352463,"line_start":1554,"line_end":1554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352468,"byte_end":352471,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ Returns `true` iff the axes are now merged.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352476,"byte_end":352523,"line_start":1556,"line_end":1556,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352528,"byte_end":352531,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ This method merges the axes if movement along the two original axes","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352536,"byte_end":352607,"line_start":1558,"line_end":1558,"column_start":5,"column_end":76}},{"value":"/ (moving fastest along the `into` axis) can be equivalently represented","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352612,"byte_end":352686,"line_start":1559,"line_end":1559,"column_start":5,"column_end":79}},{"value":"/ as movement along one (merged) axis. Merging the axes preserves this","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352691,"byte_end":352763,"line_start":1560,"line_end":1560,"column_start":5,"column_end":77}},{"value":"/ order in the merged axis. If `take` and `into` are the same axis, then","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352768,"byte_end":352842,"line_start":1561,"line_end":1561,"column_start":5,"column_end":79}},{"value":"/ the axis is \"merged\" if its length is ≤ 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352847,"byte_end":352895,"line_start":1562,"line_end":1562,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352900,"byte_end":352903,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ If the return value is `true`, then the following hold:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352908,"byte_end":352967,"line_start":1564,"line_end":1564,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352972,"byte_end":352975,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ * The new length of the `into` axis is the product of the original","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":352980,"byte_end":353050,"line_start":1566,"line_end":1566,"column_start":5,"column_end":75}},{"value":"/   lengths of the two axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353055,"byte_end":353085,"line_start":1567,"line_end":1567,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353090,"byte_end":353093,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ * The new length of the `take` axis is 0 if the product of the original","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353098,"byte_end":353173,"line_start":1569,"line_end":1569,"column_start":5,"column_end":80}},{"value":"/   lengths of the two axes is 0, and 1 otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353178,"byte_end":353230,"line_start":1570,"line_end":1570,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353235,"byte_end":353238,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ If the return value is `false`, then merging is not possible, and the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353243,"byte_end":353316,"line_start":1572,"line_end":1572,"column_start":5,"column_end":78}},{"value":"/ original shape and strides have been preserved.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353321,"byte_end":353372,"line_start":1573,"line_end":1573,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353377,"byte_end":353380,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ Note that the ordering constraint means that if it's possible to merge","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353385,"byte_end":353459,"line_start":1575,"line_end":1575,"column_start":5,"column_end":79}},{"value":"/ `take` into `into`, it's usually not possible to merge `into` into","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353464,"byte_end":353534,"line_start":1576,"line_end":1576,"column_start":5,"column_end":75}},{"value":"/ `take`, and vice versa.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353539,"byte_end":353566,"line_start":1577,"line_end":1577,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353571,"byte_end":353574,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353579,"byte_end":353586,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"/ use ndarray::Array3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353591,"byte_end":353615,"line_start":1580,"line_end":1580,"column_start":5,"column_end":29}},{"value":"/ use ndarray::Axis;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353620,"byte_end":353642,"line_start":1581,"line_end":1581,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353647,"byte_end":353650,"line_start":1582,"line_end":1582,"column_start":5,"column_end":8}},{"value":"/ let mut a = Array3::<f64>::zeros((2, 3, 4));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353655,"byte_end":353703,"line_start":1583,"line_end":1583,"column_start":5,"column_end":53}},{"value":"/ assert!(a.merge_axes(Axis(1), Axis(2)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353708,"byte_end":353752,"line_start":1584,"line_end":1584,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(a.shape(), &[2, 1, 12]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353757,"byte_end":353796,"line_start":1585,"line_end":1585,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353801,"byte_end":353808,"line_start":1586,"line_end":1586,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353813,"byte_end":353816,"line_start":1587,"line_end":1587,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if an axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":353821,"byte_end":353866,"line_start":1588,"line_end":1588,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354766,"byte_end":354777,"line_start":1614,"line_end":1614,"column_start":12,"column_end":23},"name":"insert_axis","qualname":"<ArrayBase<S, D>>::insert_axis","value":"pub fn insert_axis(Self, Axis) -> ArrayBase<S, D::Larger>","parent":null,"children":[],"decl_id":null,"docs":" Insert new array axis at `axis` and return the result.","sig":null,"attributes":[{"value":"/ Insert new array axis at `axis` and return the result.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354010,"byte_end":354068,"line_start":1593,"line_end":1593,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354073,"byte_end":354076,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354081,"byte_end":354088,"line_start":1595,"line_end":1595,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{Array3, Axis, arr1, arr2};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354093,"byte_end":354137,"line_start":1596,"line_end":1596,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354142,"byte_end":354145,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ // Convert a 1-D array into a row vector (2-D).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354150,"byte_end":354201,"line_start":1598,"line_end":1598,"column_start":5,"column_end":56}},{"value":"/ let a = arr1(&[1, 2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354206,"byte_end":354235,"line_start":1599,"line_end":1599,"column_start":5,"column_end":34}},{"value":"/ let row = a.insert_axis(Axis(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354240,"byte_end":354277,"line_start":1600,"line_end":1600,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(row, arr2(&[[1, 2, 3]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354282,"byte_end":354322,"line_start":1601,"line_end":1601,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354327,"byte_end":354330,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ // Convert a 1-D array into a column vector (2-D).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354335,"byte_end":354389,"line_start":1603,"line_end":1603,"column_start":5,"column_end":59}},{"value":"/ let b = arr1(&[1, 2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354394,"byte_end":354423,"line_start":1604,"line_end":1604,"column_start":5,"column_end":34}},{"value":"/ let col = b.insert_axis(Axis(1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354428,"byte_end":354465,"line_start":1605,"line_end":1605,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(col, arr2(&[[1], [2], [3]]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354470,"byte_end":354514,"line_start":1606,"line_end":1606,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354519,"byte_end":354522,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ // The new axis always has length 1.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354527,"byte_end":354567,"line_start":1608,"line_end":1608,"column_start":5,"column_end":45}},{"value":"/ let b = Array3::<f64>::zeros((3, 4, 5));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354572,"byte_end":354616,"line_start":1609,"line_end":1609,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(b.insert_axis(Axis(2)).shape(), &[3, 4, 1, 5]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354621,"byte_end":354683,"line_start":1610,"line_end":1610,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354688,"byte_end":354695,"line_start":1611,"line_end":1611,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354700,"byte_end":354703,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":354708,"byte_end":354754,"line_start":1613,"line_end":1613,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355324,"byte_end":355335,"line_start":1630,"line_end":1630,"column_start":12,"column_end":23},"name":"remove_axis","qualname":"<ArrayBase<S, D>>::remove_axis","value":"pub fn remove_axis(Self, Axis) -> ArrayBase<S, D::Smaller> where D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Remove array axis `axis` and return the result.","sig":null,"attributes":[{"value":"/ Remove array axis `axis` and return the result.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355097,"byte_end":355148,"line_start":1626,"line_end":1626,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355153,"byte_end":355156,"line_start":1627,"line_end":1627,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the axis is out of bounds or its length is zero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355161,"byte_end":355227,"line_start":1628,"line_end":1628,"column_start":5,"column_end":71}},{"value":"deprecated(note = \"use `.index_axis_move(Axis(_), 0)` instead\", since =\n             \"0.12.1\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355232,"byte_end":355312,"line_start":1629,"line_end":1629,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":356053,"byte_end":356059,"line_start":1654,"line_end":1654,"column_start":12,"column_end":18},"name":"assign","qualname":"<ArrayBase<S, D>>::assign","value":"pub fn assign<E: Dimension, S2>(&mut Self, &ArrayBase<S2, E>) where\nS: DataMut, A: Clone, S2: Data<Elem = A>","parent":null,"children":[],"decl_id":null,"docs":" Perform an elementwise assigment to `self` from `rhs`.","sig":null,"attributes":[{"value":"/ Perform an elementwise assigment to `self` from `rhs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355837,"byte_end":355895,"line_start":1649,"line_end":1649,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355900,"byte_end":355903,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ If their shapes disagree, `rhs` is broadcast to the shape of `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355908,"byte_end":355980,"line_start":1651,"line_end":1651,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355985,"byte_end":355988,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ **Panics** if broadcasting isn’t possible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":355993,"byte_end":356041,"line_start":1653,"line_end":1653,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":356343,"byte_end":356347,"line_start":1663,"line_end":1663,"column_start":12,"column_end":16},"name":"fill","qualname":"<ArrayBase<S, D>>::fill","value":"pub fn fill(&mut Self, A) where S: DataMut, A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Perform an elementwise assigment to `self` from element `x`.\n","sig":null,"attributes":[{"value":"/ Perform an elementwise assigment to `self` from element `x`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":356267,"byte_end":356331,"line_start":1662,"line_end":1662,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358507,"byte_end":358519,"line_start":1727,"line_end":1727,"column_start":12,"column_end":24},"name":"zip_mut_with","qualname":"<ArrayBase<S, D>>::zip_mut_with","value":"pub fn zip_mut_with<B, S2, E, F>(&mut Self, &ArrayBase<S2, E>, F) where\nS: DataMut, S2: Data<Elem = B>, E: Dimension, F: FnMut(&mut A, &B) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Traverse two arrays in unspecified order, in lock step,\n calling the closure `f` on each element pair.","sig":null,"attributes":[{"value":"/ Traverse two arrays in unspecified order, in lock step,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358222,"byte_end":358281,"line_start":1720,"line_end":1720,"column_start":5,"column_end":64}},{"value":"/ calling the closure `f` on each element pair.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358286,"byte_end":358335,"line_start":1721,"line_end":1721,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358340,"byte_end":358343,"line_start":1722,"line_end":1722,"column_start":5,"column_end":8}},{"value":"/ If their shapes disagree, `rhs` is broadcast to the shape of `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358348,"byte_end":358420,"line_start":1723,"line_end":1723,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358425,"byte_end":358428,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ **Panics** if broadcasting isn’t possible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358433,"byte_end":358481,"line_start":1725,"line_end":1725,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":358486,"byte_end":358495,"line_start":1726,"line_end":1726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":359292,"byte_end":359296,"line_start":1748,"line_end":1748,"column_start":12,"column_end":16},"name":"fold","qualname":"<ArrayBase<S, D>>::fold","value":"pub fn fold<'a, F, B>(&'a Self, B, F) -> B where F: FnMut(B, &'a A) -> B,\nA: 'a","parent":null,"children":[],"decl_id":null,"docs":" Traverse the array elements and apply a fold,\n returning the resulting value.","sig":null,"attributes":[{"value":"/ Traverse the array elements and apply a fold,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":359135,"byte_end":359184,"line_start":1744,"line_end":1744,"column_start":5,"column_end":54}},{"value":"/ returning the resulting value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":359189,"byte_end":359223,"line_start":1745,"line_end":1745,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":359228,"byte_end":359231,"line_start":1746,"line_end":1746,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":359236,"byte_end":359280,"line_start":1747,"line_end":1747,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360547,"byte_end":360550,"line_start":1786,"line_end":1786,"column_start":12,"column_end":15},"name":"map","qualname":"<ArrayBase<S, D>>::map","value":"pub fn map<'a, B, F>(&'a Self, F) -> Array<B, D> where F: FnMut(&'a A) -> B,\nA: 'a","parent":null,"children":[],"decl_id":null,"docs":" Call `f` by reference on each element and create a new array\n with the new values.","sig":null,"attributes":[{"value":"/ Call `f` by reference on each element and create a new array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360049,"byte_end":360113,"line_start":1768,"line_end":1768,"column_start":5,"column_end":69}},{"value":"/ with the new values.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360118,"byte_end":360142,"line_start":1769,"line_end":1769,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360147,"byte_end":360150,"line_start":1770,"line_end":1770,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360155,"byte_end":360199,"line_start":1771,"line_end":1771,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360204,"byte_end":360207,"line_start":1772,"line_end":1772,"column_start":5,"column_end":8}},{"value":"/ Return an array with the same shape as `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360212,"byte_end":360262,"line_start":1773,"line_end":1773,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360267,"byte_end":360270,"line_start":1774,"line_end":1774,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360275,"byte_end":360282,"line_start":1775,"line_end":1775,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360287,"byte_end":360309,"line_start":1776,"line_end":1776,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360314,"byte_end":360317,"line_start":1777,"line_end":1777,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[ 0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360322,"byte_end":360351,"line_start":1778,"line_end":1778,"column_start":5,"column_end":34}},{"value":"/                [-1., 2.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360356,"byte_end":360387,"line_start":1779,"line_end":1779,"column_start":5,"column_end":36}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360392,"byte_end":360404,"line_start":1780,"line_end":1780,"column_start":5,"column_end":17}},{"value":"/     a.map(|x| *x >= 1.0)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360409,"byte_end":360437,"line_start":1781,"line_end":1781,"column_start":5,"column_end":33}},{"value":"/     == arr2(&[[false, true],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360442,"byte_end":360474,"line_start":1782,"line_end":1782,"column_start":5,"column_end":37}},{"value":"/               [false, true]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360479,"byte_end":360512,"line_start":1783,"line_end":1783,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360517,"byte_end":360523,"line_start":1784,"line_end":1784,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":360528,"byte_end":360535,"line_start":1785,"line_end":1785,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361380,"byte_end":361387,"line_start":1810,"line_end":1810,"column_start":12,"column_end":19},"name":"map_mut","qualname":"<ArrayBase<S, D>>::map_mut","value":"pub fn map_mut<'a, B, F>(&'a mut Self, F) -> Array<B, D> where\nF: FnMut(&'a mut A) -> B, A: 'a, S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Call `f` on a mutable reference of each element and create a new array\n with the new values.","sig":null,"attributes":[{"value":"/ Call `f` on a mutable reference of each element and create a new array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361145,"byte_end":361219,"line_start":1804,"line_end":1804,"column_start":5,"column_end":79}},{"value":"/ with the new values.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361224,"byte_end":361248,"line_start":1805,"line_end":1805,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361253,"byte_end":361256,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361261,"byte_end":361305,"line_start":1807,"line_end":1807,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361310,"byte_end":361313,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ Return an array with the same shape as `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":361318,"byte_end":361368,"line_start":1809,"line_end":1809,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362598,"byte_end":362602,"line_start":1849,"line_end":1849,"column_start":12,"column_end":16},"name":"mapv","qualname":"<ArrayBase<S, D>>::mapv","value":"pub fn mapv<B, F>(&Self, F) -> Array<B, D> where F: FnMut(A) -> B, A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Call `f` by **v**alue on each element and create a new array\n with the new values.","sig":null,"attributes":[{"value":"/ Call `f` by **v**alue on each element and create a new array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362109,"byte_end":362173,"line_start":1832,"line_end":1832,"column_start":5,"column_end":69}},{"value":"/ with the new values.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362178,"byte_end":362202,"line_start":1833,"line_end":1833,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362207,"byte_end":362210,"line_start":1834,"line_end":1834,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362215,"byte_end":362259,"line_start":1835,"line_end":1835,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362264,"byte_end":362267,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ Return an array with the same shape as `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362272,"byte_end":362322,"line_start":1837,"line_end":1837,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362327,"byte_end":362330,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362335,"byte_end":362342,"line_start":1839,"line_end":1839,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362347,"byte_end":362369,"line_start":1840,"line_end":1840,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362374,"byte_end":362377,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[ 0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362382,"byte_end":362411,"line_start":1842,"line_end":1842,"column_start":5,"column_end":34}},{"value":"/                [-1., 2.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362416,"byte_end":362447,"line_start":1843,"line_end":1843,"column_start":5,"column_end":36}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362452,"byte_end":362464,"line_start":1844,"line_end":1844,"column_start":5,"column_end":17}},{"value":"/     a.mapv(f32::abs) == arr2(&[[0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362469,"byte_end":362513,"line_start":1845,"line_end":1845,"column_start":5,"column_end":49}},{"value":"/                                [1., 2.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362518,"byte_end":362563,"line_start":1846,"line_end":1846,"column_start":5,"column_end":50}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362568,"byte_end":362574,"line_start":1847,"line_end":1847,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362579,"byte_end":362586,"line_start":1848,"line_end":1848,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362925,"byte_end":362934,"line_start":1860,"line_end":1860,"column_start":12,"column_end":21},"name":"mapv_into","qualname":"<ArrayBase<S, D>>::mapv_into","value":"pub fn mapv_into<F>(Self, F) -> Self where S: DataMut, F: FnMut(A) -> A,\nA: Clone","parent":null,"children":[],"decl_id":null,"docs":" Call `f` by **v**alue on each element, update the array with the new values\n and return it.","sig":null,"attributes":[{"value":"/ Call `f` by **v**alue on each element, update the array with the new values","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362754,"byte_end":362833,"line_start":1856,"line_end":1856,"column_start":5,"column_end":84}},{"value":"/ and return it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362838,"byte_end":362856,"line_start":1857,"line_end":1857,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362861,"byte_end":362864,"line_start":1858,"line_end":1858,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":362869,"byte_end":362913,"line_start":1859,"line_end":1859,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363255,"byte_end":363266,"line_start":1872,"line_end":1872,"column_start":12,"column_end":23},"name":"map_inplace","qualname":"<ArrayBase<S, D>>::map_inplace","value":"pub fn map_inplace<F>(&mut Self, F) where S: DataMut, F: FnMut(&mut A) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modify the array in place by calling `f` by mutable reference on each element.","sig":null,"attributes":[{"value":"/ Modify the array in place by calling `f` by mutable reference on each element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363104,"byte_end":363186,"line_start":1869,"line_end":1869,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363191,"byte_end":363194,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363199,"byte_end":363243,"line_start":1871,"line_end":1871,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363913,"byte_end":363925,"line_start":1895,"line_end":1895,"column_start":12,"column_end":24},"name":"mapv_inplace","qualname":"<ArrayBase<S, D>>::mapv_inplace","value":"pub fn mapv_inplace<F>(&mut Self, F) where S: DataMut, F: FnMut(A) -> A,\nA: Clone","parent":null,"children":[],"decl_id":null,"docs":" Modify the array in place by calling `f` by **v**alue on each element.\n The array is updated with the new values.","sig":null,"attributes":[{"value":"/ Modify the array in place by calling `f` by **v**alue on each element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363401,"byte_end":363475,"line_start":1879,"line_end":1879,"column_start":5,"column_end":79}},{"value":"/ The array is updated with the new values.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363480,"byte_end":363525,"line_start":1880,"line_end":1880,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363530,"byte_end":363533,"line_start":1881,"line_end":1881,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363538,"byte_end":363582,"line_start":1882,"line_end":1882,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363587,"byte_end":363590,"line_start":1883,"line_end":1883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363595,"byte_end":363602,"line_start":1884,"line_end":1884,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363607,"byte_end":363629,"line_start":1885,"line_end":1885,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363634,"byte_end":363637,"line_start":1886,"line_end":1886,"column_start":5,"column_end":8}},{"value":"/ let mut a = arr2(&[[ 0., 1.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363642,"byte_end":363675,"line_start":1887,"line_end":1887,"column_start":5,"column_end":38}},{"value":"/                    [-1., 2.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363680,"byte_end":363715,"line_start":1888,"line_end":1888,"column_start":5,"column_end":40}},{"value":"/ a.mapv_inplace(f32::exp);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363720,"byte_end":363749,"line_start":1889,"line_end":1889,"column_start":5,"column_end":34}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363754,"byte_end":363766,"line_start":1890,"line_end":1890,"column_start":5,"column_end":17}},{"value":"/     a.all_close(&arr2(&[[1.00000, 2.71828],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363771,"byte_end":363818,"line_start":1891,"line_end":1891,"column_start":5,"column_end":52}},{"value":"/                         [0.36788, 7.38906]]), 1e-5)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363823,"byte_end":363878,"line_start":1892,"line_end":1892,"column_start":5,"column_end":60}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363883,"byte_end":363889,"line_start":1893,"line_end":1893,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":363894,"byte_end":363901,"line_start":1894,"line_end":1894,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364270,"byte_end":364275,"line_start":1907,"line_end":1907,"column_start":12,"column_end":17},"name":"visit","qualname":"<ArrayBase<S, D>>::visit","value":"pub fn visit<'a, F>(&'a Self, F) where F: FnMut(&'a A) -> (), A: 'a","parent":null,"children":[],"decl_id":null,"docs":" Visit each element in the array by calling `f` by reference\n on each element.","sig":null,"attributes":[{"value":"/ Visit each element in the array by calling `f` by reference","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364113,"byte_end":364176,"line_start":1903,"line_end":1903,"column_start":5,"column_end":68}},{"value":"/ on each element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364181,"byte_end":364201,"line_start":1904,"line_end":1904,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364206,"byte_end":364209,"line_start":1905,"line_end":1905,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364214,"byte_end":364258,"line_start":1906,"line_end":1906,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364687,"byte_end":364696,"line_start":1922,"line_end":1922,"column_start":12,"column_end":21},"name":"fold_axis","qualname":"<ArrayBase<S, D>>::fold_axis","value":"pub fn fold_axis<B, F>(&Self, Axis, B, F) -> Array<B, D::Smaller> where\nD: RemoveAxis, F: FnMut(&B, &A) -> B, B: Clone","parent":null,"children":[],"decl_id":null,"docs":" Fold along an axis.","sig":null,"attributes":[{"value":"/ Fold along an axis.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364417,"byte_end":364440,"line_start":1914,"line_end":1914,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364445,"byte_end":364448,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ Combine the elements of each subview with the previous using the `fold`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364453,"byte_end":364528,"line_start":1916,"line_end":1916,"column_start":5,"column_end":80}},{"value":"/ function and initial value `init`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364533,"byte_end":364571,"line_start":1917,"line_end":1917,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364576,"byte_end":364579,"line_start":1918,"line_end":1918,"column_start":5,"column_end":8}},{"value":"/ Return the result as an `Array`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364584,"byte_end":364620,"line_start":1919,"line_end":1919,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364625,"byte_end":364628,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":364633,"byte_end":364675,"line_start":1921,"line_end":1921,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365379,"byte_end":365387,"line_start":1943,"line_end":1943,"column_start":12,"column_end":20},"name":"map_axis","qualname":"<ArrayBase<S, D>>::map_axis","value":"pub fn map_axis<'a, B, F>(&'a Self, Axis, F) -> Array<B, D::Smaller> where\nD: RemoveAxis, F: FnMut(ArrayView1) -> B, A: 'a","parent":null,"children":[],"decl_id":null,"docs":" Reduce the values along an axis into just one value, producing a new\n array with one less dimension.","sig":null,"attributes":[{"value":"/ Reduce the values along an axis into just one value, producing a new","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365095,"byte_end":365167,"line_start":1935,"line_end":1935,"column_start":5,"column_end":77}},{"value":"/ array with one less dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365172,"byte_end":365206,"line_start":1936,"line_end":1936,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365211,"byte_end":365214,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365219,"byte_end":365263,"line_start":1938,"line_end":1938,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365268,"byte_end":365271,"line_start":1939,"line_end":1939,"column_start":5,"column_end":8}},{"value":"/ Return the result as an `Array`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365276,"byte_end":365312,"line_start":1940,"line_end":1940,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365317,"byte_end":365320,"line_start":1941,"line_end":1941,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365325,"byte_end":365367,"line_start":1942,"line_end":1942,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366358,"byte_end":366370,"line_start":1970,"line_end":1970,"column_start":12,"column_end":24},"name":"map_axis_mut","qualname":"<ArrayBase<S, D>>::map_axis_mut","value":"pub fn map_axis_mut<'a, B, F>(&'a mut Self, Axis, F) -> Array<B, D::Smaller>\nwhere D: RemoveAxis, F: FnMut(ArrayViewMut1) -> B, A: 'a, S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Reduce the values along an axis into just one value, producing a new\n array with one less dimension.\n 1-dimensional lanes are passed as mutable references to the reducer,\n allowing for side-effects.","sig":null,"attributes":[{"value":"/ Reduce the values along an axis into just one value, producing a new","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":365962,"byte_end":366034,"line_start":1960,"line_end":1960,"column_start":5,"column_end":77}},{"value":"/ array with one less dimension.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366039,"byte_end":366073,"line_start":1961,"line_end":1961,"column_start":5,"column_end":39}},{"value":"/ 1-dimensional lanes are passed as mutable references to the reducer,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366078,"byte_end":366150,"line_start":1962,"line_end":1962,"column_start":5,"column_end":77}},{"value":"/ allowing for side-effects.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366155,"byte_end":366185,"line_start":1963,"line_end":1963,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366190,"byte_end":366193,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ Elements are visited in arbitrary order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366198,"byte_end":366242,"line_start":1965,"line_end":1965,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366247,"byte_end":366250,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ Return the result as an `Array`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366255,"byte_end":366291,"line_start":1967,"line_end":1967,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366296,"byte_end":366299,"line_start":1968,"line_end":1968,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":366304,"byte_end":366346,"line_start":1969,"line_end":1969,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367564,"byte_end":367575,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"into_scalar","qualname":"<Array<A, Ix0>>::into_scalar","value":"pub fn into_scalar(Self) -> A","parent":null,"children":[],"decl_id":null,"docs":" Returns the single element in the array without cloning it.","sig":null,"attributes":[{"value":"/ Returns the single element in the array without cloning it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367176,"byte_end":367239,"line_start":9,"line_end":9,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367244,"byte_end":367247,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367252,"byte_end":367259,"line_start":11,"line_end":11,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{arr0, Array0};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367264,"byte_end":367296,"line_start":12,"line_end":12,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367301,"byte_end":367304,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ // `Foo` doesn't implement `Clone`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367309,"byte_end":367348,"line_start":14,"line_end":14,"column_start":5,"column_end":44}},{"value":"/ #[derive(Debug, Eq, PartialEq)]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367353,"byte_end":367388,"line_start":15,"line_end":15,"column_start":5,"column_end":40}},{"value":"/ struct Foo;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367393,"byte_end":367408,"line_start":16,"line_end":16,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367413,"byte_end":367416,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ let array: Array0<Foo> = arr0(Foo);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367421,"byte_end":367460,"line_start":18,"line_end":18,"column_start":5,"column_end":44}},{"value":"/ let scalar: Foo = array.into_scalar();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367465,"byte_end":367507,"line_start":19,"line_end":19,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(scalar, Foo);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367512,"byte_end":367540,"line_start":20,"line_end":20,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367545,"byte_end":367552,"line_start":21,"line_end":21,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368864,"byte_end":368876,"line_start":55,"line_end":55,"column_start":12,"column_end":24},"name":"into_raw_vec","qualname":"<Array<A, D>>::into_raw_vec","value":"pub fn into_raw_vec(Self) -> Vec<A>","parent":null,"children":[],"decl_id":null,"docs":" Return a vector of the elements in the array, in the way they are\n stored internally.","sig":null,"attributes":[{"value":"/ Return a vector of the elements in the array, in the way they are","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368587,"byte_end":368656,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ stored internally.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368661,"byte_end":368683,"line_start":51,"line_end":51,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368688,"byte_end":368691,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ If the array is in standard memory layout, the logical element order","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368696,"byte_end":368768,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ of the array (`.iter()` order) and of the returned vector will be the same.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368773,"byte_end":368852,"line_start":54,"line_end":54,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2604},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_1d.rs","byte_start":369509,"byte_end":369515,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<ArrayBase<S, Ix1>>::to_vec","value":"pub fn to_vec(&Self) -> Vec<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Return an vector with the elements of the one-dimensional array.\n","sig":null,"attributes":[{"value":"/ Return an vector with the elements of the one-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_1d.rs","byte_start":369429,"byte_end":369497,"line_start":17,"line_end":17,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370352,"byte_end":370355,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"row","qualname":"<ArrayBase<S, Ix2>>::row","value":"pub fn row(&Self, Ix) -> ArrayView1<, A>","parent":null,"children":[],"decl_id":null,"docs":" Return an array view of row `index`.","sig":null,"attributes":[{"value":"/ Return an array view of row `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370244,"byte_end":370284,"line_start":17,"line_end":17,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370289,"byte_end":370292,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370297,"byte_end":370340,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370563,"byte_end":370570,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"row_mut","qualname":"<ArrayBase<S, Ix2>>::row_mut","value":"pub fn row_mut(&mut Self, Ix) -> ArrayViewMut1<, A> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable array view of row `index`.","sig":null,"attributes":[{"value":"/ Return a mutable array view of row `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370448,"byte_end":370495,"line_start":25,"line_end":25,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370500,"byte_end":370503,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370508,"byte_end":370551,"line_start":27,"line_end":27,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370792,"byte_end":370796,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"rows","qualname":"<ArrayBase<S, Ix2>>::rows","value":"pub fn rows(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of rows (length of `Axis(0)`) in the two-dimensional array.\n","sig":null,"attributes":[{"value":"/ Return the number of rows (length of `Axis(0)`) in the two-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370699,"byte_end":370780,"line_start":34,"line_end":34,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370966,"byte_end":370972,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"column","qualname":"<ArrayBase<S, Ix2>>::column","value":"pub fn column(&Self, Ix) -> ArrayView1<, A>","parent":null,"children":[],"decl_id":null,"docs":" Return an array view of column `index`.","sig":null,"attributes":[{"value":"/ Return an array view of column `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370855,"byte_end":370898,"line_start":39,"line_end":39,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370903,"byte_end":370906,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370911,"byte_end":370954,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2615},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371183,"byte_end":371193,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"column_mut","qualname":"<ArrayBase<S, Ix2>>::column_mut","value":"pub fn column_mut(&mut Self, Ix) -> ArrayViewMut1<, A> where S: DataMut","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable array view of column `index`.","sig":null,"attributes":[{"value":"/ Return a mutable array view of column `index`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371065,"byte_end":371115,"line_start":47,"line_end":47,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371120,"byte_end":371123,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371128,"byte_end":371171,"line_start":49,"line_end":49,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371418,"byte_end":371422,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"cols","qualname":"<ArrayBase<S, Ix2>>::cols","value":"pub fn cols(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of columns (length of `Axis(1)`) in the two-dimensional array.\n","sig":null,"attributes":[{"value":"/ Return the number of columns (length of `Axis(1)`) in the two-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371322,"byte_end":371406,"line_start":56,"line_end":56,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371549,"byte_end":371558,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"is_square","qualname":"<ArrayBase<S, Ix2>>::is_square","value":"pub fn is_square(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the array is square, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if the array is square, false otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":371481,"byte_end":371537,"line_start":61,"line_end":61,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2623},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372659,"byte_end":372678,"line_start":32,"line_end":32,"column_start":12,"column_end":31},"name":"insert_axis_inplace","qualname":"<ArrayBase<S, IxDyn>>::insert_axis_inplace","value":"pub fn insert_axis_inplace(&mut Self, Axis)","parent":null,"children":[],"decl_id":null,"docs":" Insert new array axis of length 1 at `axis`, modifying the shape and\n strides in-place.","sig":null,"attributes":[{"value":"/ Insert new array axis of length 1 at `axis`, modifying the shape and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372149,"byte_end":372221,"line_start":17,"line_end":17,"column_start":5,"column_end":77}},{"value":"/ strides in-place.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372226,"byte_end":372247,"line_start":18,"line_end":18,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372252,"byte_end":372255,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the axis is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372260,"byte_end":372304,"line_start":20,"line_end":20,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372309,"byte_end":372312,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372317,"byte_end":372324,"line_start":22,"line_end":22,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{Axis, arr2, arr3};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372329,"byte_end":372365,"line_start":23,"line_end":23,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372370,"byte_end":372373,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ let mut a = arr2(&[[1, 2, 3], [4, 5, 6]]).into_dyn();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372378,"byte_end":372435,"line_start":25,"line_end":25,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(a.shape(), &[2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372440,"byte_end":372475,"line_start":26,"line_end":26,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372480,"byte_end":372483,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ a.insert_axis_inplace(Axis(1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372488,"byte_end":372523,"line_start":28,"line_end":28,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a, arr3(&[[[1, 2, 3]], [[4, 5, 6]]]).into_dyn());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372528,"byte_end":372592,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(a.shape(), &[2, 1, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372597,"byte_end":372635,"line_start":30,"line_end":30,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372640,"byte_end":372647,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373381,"byte_end":373399,"line_start":53,"line_end":53,"column_start":12,"column_end":30},"name":"index_axis_inplace","qualname":"<ArrayBase<S, IxDyn>>::index_axis_inplace","value":"pub fn index_axis_inplace(&mut Self, Axis, usize)","parent":null,"children":[],"decl_id":null,"docs":" Collapses the array to `index` along the axis and removes the axis,\n modifying the shape and strides in-place.","sig":null,"attributes":[{"value":"/ Collapses the array to `index` along the axis and removes the axis,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372863,"byte_end":372934,"line_start":38,"line_end":38,"column_start":5,"column_end":76}},{"value":"/ modifying the shape and strides in-place.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372939,"byte_end":372984,"line_start":39,"line_end":39,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372989,"byte_end":372992,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372997,"byte_end":373050,"line_start":41,"line_end":41,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373055,"byte_end":373058,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373063,"byte_end":373070,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{Axis, arr1, arr2};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373075,"byte_end":373111,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373116,"byte_end":373119,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let mut a = arr2(&[[1, 2, 3], [4, 5, 6]]).into_dyn();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373124,"byte_end":373181,"line_start":46,"line_end":46,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(a.shape(), &[2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373186,"byte_end":373221,"line_start":47,"line_end":47,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373226,"byte_end":373229,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ a.index_axis_inplace(Axis(1), 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373234,"byte_end":373271,"line_start":49,"line_end":49,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(a, arr1(&[2, 5]).into_dyn());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373276,"byte_end":373320,"line_start":50,"line_end":50,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(a.shape(), &[2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373325,"byte_end":373357,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":373362,"byte_end":373369,"line_start":52,"line_end":52,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374484,"byte_end":374487,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"sum","qualname":"<ArrayBase<S, D>>::sum","value":"pub fn sum(&Self) -> A where A: Clone + Add<Output = A> + libnum::Zero","parent":null,"children":[],"decl_id":null,"docs":" Return the sum of all elements in the array.","sig":null,"attributes":[{"value":"/ Return the sum of all elements in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374255,"byte_end":374303,"line_start":23,"line_end":23,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374308,"byte_end":374311,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374316,"byte_end":374323,"line_start":25,"line_end":25,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374328,"byte_end":374350,"line_start":26,"line_end":26,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374355,"byte_end":374358,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374363,"byte_end":374391,"line_start":28,"line_end":28,"column_start":5,"column_end":33}},{"value":"/                [3., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374396,"byte_end":374426,"line_start":29,"line_end":29,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.sum(), 10.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374431,"byte_end":374460,"line_start":30,"line_end":30,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374465,"byte_end":374472,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375283,"byte_end":375293,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"scalar_sum","qualname":"<ArrayBase<S, D>>::scalar_sum","value":"pub fn scalar_sum(&Self) -> A where A: Clone + Add<Output = A> + libnum::Zero","parent":null,"children":[],"decl_id":null,"docs":" Return the sum of all elements in the array.","sig":null,"attributes":[{"value":"/ Return the sum of all elements in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375052,"byte_end":375100,"line_start":49,"line_end":49,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375105,"byte_end":375108,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ *This method has been renamed to `.sum()` and will be deprecated in the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375113,"byte_end":375188,"line_start":51,"line_end":51,"column_start":5,"column_end":80}},{"value":"/ next version.*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375193,"byte_end":375211,"line_start":52,"line_end":52,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375634,"byte_end":375641,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"product","qualname":"<ArrayBase<S, D>>::product","value":"pub fn product(&Self) -> A where A: Clone + Mul<Output = A> + libnum::One","parent":null,"children":[],"decl_id":null,"docs":" Return the product of all elements in the array.","sig":null,"attributes":[{"value":"/ Return the product of all elements in the array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375397,"byte_end":375449,"line_start":60,"line_end":60,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375454,"byte_end":375457,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375462,"byte_end":375469,"line_start":62,"line_end":62,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375474,"byte_end":375496,"line_start":63,"line_end":63,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375501,"byte_end":375504,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375509,"byte_end":375537,"line_start":65,"line_end":65,"column_start":5,"column_end":33}},{"value":"/                [3., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375542,"byte_end":375572,"line_start":66,"line_end":66,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.product(), 24.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375577,"byte_end":375610,"line_start":67,"line_end":67,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":375615,"byte_end":375622,"line_start":68,"line_end":68,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376669,"byte_end":376677,"line_start":102,"line_end":102,"column_start":12,"column_end":20},"name":"sum_axis","qualname":"<ArrayBase<S, D>>::sum_axis","value":"pub fn sum_axis(&Self, Axis) -> Array<A, D::Smaller> where A: Clone + Zero +\nAdd<Output = A>, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return sum along `axis`.","sig":null,"attributes":[{"value":"/ Return sum along `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376201,"byte_end":376229,"line_start":86,"line_end":86,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376234,"byte_end":376237,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376242,"byte_end":376249,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview0, aview1, arr2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376254,"byte_end":376300,"line_start":89,"line_end":89,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376305,"byte_end":376308,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376313,"byte_end":376341,"line_start":91,"line_end":91,"column_start":5,"column_end":33}},{"value":"/                [3., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376346,"byte_end":376376,"line_start":92,"line_end":92,"column_start":5,"column_end":35}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376381,"byte_end":376393,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/     a.sum_axis(Axis(0)) == aview1(&[4., 6.]) &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376398,"byte_end":376449,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/     a.sum_axis(Axis(1)) == aview1(&[3., 7.]) &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376454,"byte_end":376505,"line_start":95,"line_end":95,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376510,"byte_end":376513,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/     a.sum_axis(Axis(0)).sum_axis(Axis(0)) == aview0(&10.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376518,"byte_end":376579,"line_start":97,"line_end":97,"column_start":5,"column_end":66}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376584,"byte_end":376590,"line_start":98,"line_end":98,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376595,"byte_end":376602,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376607,"byte_end":376610,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":376615,"byte_end":376657,"line_start":101,"line_end":101,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377878,"byte_end":377887,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"mean_axis","qualname":"<ArrayBase<S, D>>::mean_axis","value":"pub fn mean_axis(&Self, Axis) -> Array<A, D::Smaller> where A: Clone + Zero +\nOne + Add<Output = A> + Div<Output = A>, D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return mean along `axis`.","sig":null,"attributes":[{"value":"/ Return mean along `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377402,"byte_end":377431,"line_start":124,"line_end":124,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377436,"byte_end":377439,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` is out of bounds or if the length of the axis is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377444,"byte_end":377517,"line_start":126,"line_end":126,"column_start":5,"column_end":78}},{"value":"/ zero and division by zero panics for type `A`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377522,"byte_end":377572,"line_start":127,"line_end":127,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377577,"byte_end":377580,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377585,"byte_end":377592,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview1, arr2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377597,"byte_end":377635,"line_start":130,"line_end":130,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377640,"byte_end":377643,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377648,"byte_end":377676,"line_start":132,"line_end":132,"column_start":5,"column_end":33}},{"value":"/                [3., 4.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377681,"byte_end":377711,"line_start":133,"line_end":133,"column_start":5,"column_end":35}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377716,"byte_end":377728,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/     a.mean_axis(Axis(0)) == aview1(&[2.0, 3.0]) &&","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377733,"byte_end":377787,"line_start":135,"line_end":135,"column_start":5,"column_end":59}},{"value":"/     a.mean_axis(Axis(1)) == aview1(&[1.5, 3.5])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377792,"byte_end":377843,"line_start":136,"line_end":136,"column_start":5,"column_end":56}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377848,"byte_end":377854,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":377859,"byte_end":377866,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379430,"byte_end":379438,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"var_axis","qualname":"<ArrayBase<S, D>>::var_axis","value":"pub fn var_axis(&Self, Axis, A) -> Array<A, D::Smaller> where A: Float,\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return variance along `axis`.","sig":null,"attributes":[{"value":"/ Return variance along `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378249,"byte_end":378282,"line_start":152,"line_end":152,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378287,"byte_end":378290,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The variance is computed using the [Welford one-pass","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378295,"byte_end":378351,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ algorithm](https://www.jstor.org/stable/1266577).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378356,"byte_end":378409,"line_start":155,"line_end":155,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378414,"byte_end":378417,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The parameter `ddof` specifies the \"delta degrees of freedom\". For","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378422,"byte_end":378492,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ example, to calculate the population variance, use `ddof = 0`, or to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378497,"byte_end":378569,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ calculate the sample variance, use `ddof = 1`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378574,"byte_end":378624,"line_start":159,"line_end":159,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378629,"byte_end":378632,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ The variance is defined as:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378637,"byte_end":378668,"line_start":161,"line_end":161,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378673,"byte_end":378676,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378681,"byte_end":378692,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/               1       n","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378697,"byte_end":378724,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ variance = ――――――――   ∑ (xᵢ - x̅)²","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378729,"byte_end":378789,"line_start":165,"line_end":165,"column_start":5,"column_end":43}},{"value":"/            n - ddof  i=1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378794,"byte_end":378822,"line_start":166,"line_end":166,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378827,"byte_end":378834,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378839,"byte_end":378842,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ where","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378847,"byte_end":378856,"line_start":169,"line_end":169,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378861,"byte_end":378864,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378869,"byte_end":378880,"line_start":171,"line_end":171,"column_start":5,"column_end":16}},{"value":"/     1   n","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378885,"byte_end":378898,"line_start":172,"line_end":172,"column_start":5,"column_end":18}},{"value":"/ x̅ = ―   ∑ xᵢ","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378903,"byte_end":378927,"line_start":173,"line_end":173,"column_start":5,"column_end":22}},{"value":"/     n  i=1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378932,"byte_end":378946,"line_start":174,"line_end":174,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378951,"byte_end":378958,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378963,"byte_end":378966,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `ddof` is greater than or equal to the length of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":378971,"byte_end":379041,"line_start":177,"line_end":177,"column_start":5,"column_end":75}},{"value":"/ axis, if `axis` is out of bounds, or if the length of the axis is zero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379046,"byte_end":379121,"line_start":178,"line_end":178,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379126,"byte_end":379129,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379134,"byte_end":379147,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379152,"byte_end":379155,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379160,"byte_end":379167,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview1, arr2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379172,"byte_end":379210,"line_start":183,"line_end":183,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379215,"byte_end":379218,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379223,"byte_end":379251,"line_start":185,"line_end":185,"column_start":5,"column_end":33}},{"value":"/                [3., 4.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379256,"byte_end":379284,"line_start":186,"line_end":186,"column_start":5,"column_end":33}},{"value":"/                [5., 6.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379289,"byte_end":379319,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/ let var = a.var_axis(Axis(0), 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379324,"byte_end":379362,"line_start":188,"line_end":188,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(var, aview1(&[4., 4.]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379367,"byte_end":379406,"line_start":189,"line_end":189,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":379411,"byte_end":379418,"line_start":190,"line_end":190,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381606,"byte_end":381614,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"std_axis","qualname":"<ArrayBase<S, D>>::std_axis","value":"pub fn std_axis(&Self, Axis, A) -> Array<A, D::Smaller> where A: Float,\nD: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return standard deviation along `axis`.","sig":null,"attributes":[{"value":"/ Return standard deviation along `axis`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380334,"byte_end":380377,"line_start":216,"line_end":216,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380382,"byte_end":380385,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The standard deviation is computed from the variance using","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380390,"byte_end":380452,"line_start":218,"line_end":218,"column_start":5,"column_end":67}},{"value":"/ the [Welford one-pass algorithm](https://www.jstor.org/stable/1266577).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380457,"byte_end":380532,"line_start":219,"line_end":219,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380537,"byte_end":380540,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The parameter `ddof` specifies the \"delta degrees of freedom\". For","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380545,"byte_end":380615,"line_start":221,"line_end":221,"column_start":5,"column_end":75}},{"value":"/ example, to calculate the population standard deviation, use `ddof = 0`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380620,"byte_end":380696,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ or to calculate the sample standard deviation, use `ddof = 1`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380701,"byte_end":380767,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380772,"byte_end":380775,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ The standard deviation is defined as:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380780,"byte_end":380821,"line_start":225,"line_end":225,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380826,"byte_end":380829,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380834,"byte_end":380845,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/                    1       n","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380850,"byte_end":380882,"line_start":228,"line_end":228,"column_start":5,"column_end":37}},{"value":"/ stddev = sqrt ( ――――――――   ∑ (xᵢ - x̅)² )","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380887,"byte_end":380954,"line_start":229,"line_end":229,"column_start":5,"column_end":50}},{"value":"/                 n - ddof  i=1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380959,"byte_end":380992,"line_start":230,"line_end":230,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":380997,"byte_end":381004,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381009,"byte_end":381012,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ where","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381017,"byte_end":381026,"line_start":233,"line_end":233,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381031,"byte_end":381034,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381039,"byte_end":381050,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/     1   n","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381055,"byte_end":381068,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/ x̅ = ―   ∑ xᵢ","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381073,"byte_end":381097,"line_start":237,"line_end":237,"column_start":5,"column_end":22}},{"value":"/     n  i=1","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381102,"byte_end":381116,"line_start":238,"line_end":238,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381121,"byte_end":381128,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381133,"byte_end":381136,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `ddof` is greater than or equal to the length of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381141,"byte_end":381211,"line_start":241,"line_end":241,"column_start":5,"column_end":75}},{"value":"/ axis, if `axis` is out of bounds, or if the length of the axis is zero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381216,"byte_end":381291,"line_start":242,"line_end":242,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381296,"byte_end":381299,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381304,"byte_end":381317,"line_start":244,"line_end":244,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381322,"byte_end":381325,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381330,"byte_end":381337,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"/ use ndarray::{aview1, arr2, Axis};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381342,"byte_end":381380,"line_start":247,"line_end":247,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381385,"byte_end":381388,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381393,"byte_end":381421,"line_start":249,"line_end":249,"column_start":5,"column_end":33}},{"value":"/                [3., 4.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381426,"byte_end":381454,"line_start":250,"line_end":250,"column_start":5,"column_end":33}},{"value":"/                [5., 6.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381459,"byte_end":381489,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/ let stddev = a.std_axis(Axis(0), 1.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381494,"byte_end":381535,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(stddev, aview1(&[2., 2.]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381540,"byte_end":381582,"line_start":253,"line_end":253,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381587,"byte_end":381594,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2657},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":382097,"byte_end":382106,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"all_close","qualname":"<ArrayBase<S, D>>::all_close","value":"pub fn all_close<S2, E>(&Self, &ArrayBase<S2, E>, A) -> bool where A: Float,\nS2: Data<Elem = A>, E: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the arrays' elementwise differences are all within\n the given absolute tolerance, `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if the arrays' elementwise differences are all within","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381793,"byte_end":381864,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ the given absolute tolerance, `false` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381869,"byte_end":381921,"line_start":264,"line_end":264,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381926,"byte_end":381929,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ If their shapes disagree, `rhs` is broadcast to the shape of `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":381934,"byte_end":382006,"line_start":266,"line_end":266,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":382011,"byte_end":382014,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ **Panics** if broadcasting to the same shape isn’t possible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":382019,"byte_end":382085,"line_start":268,"line_end":268,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":2661},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linalg","qualname":"::linalg","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","parent":null,"children":[{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665}],"decl_id":null,"docs":" Linear algebra.\n","sig":null,"attributes":[{"value":"/ Linear algebra.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/mod.rs","byte_start":382930,"byte_end":382949,"line_start":10,"line_end":10,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2675},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":385062,"byte_end":385065,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"dot","qualname":"<ArrayBase<S, Ix1>>::dot","value":"pub fn dot<Rhs>(&Self, &Rhs) -> <Self as Dot<Rhs>>::Output where\nSelf: Dot<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" Perform dot product or matrix multiplication of arrays `self` and `rhs`.","sig":null,"attributes":[{"value":"/ Perform dot product or matrix multiplication of arrays `self` and `rhs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384178,"byte_end":384254,"line_start":45,"line_end":45,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384259,"byte_end":384262,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ `Rhs` may be either a one-dimensional or a two-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384267,"byte_end":384336,"line_start":47,"line_end":47,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384341,"byte_end":384344,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ If `Rhs` is one-dimensional, then the operation is a vector dot","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384349,"byte_end":384416,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/ product, which is the sum of the elementwise products (no conjugation","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384421,"byte_end":384494,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ of complex operands, and thus not their inner product). In this case,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384499,"byte_end":384572,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ `self` and `rhs` must be the same length.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384577,"byte_end":384622,"line_start":52,"line_end":52,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384627,"byte_end":384630,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If `Rhs` is two-dimensional, then the operation is matrix","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384635,"byte_end":384696,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"/ multiplication, where `self` is treated as a row vector. In this case,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384701,"byte_end":384775,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ if `self` is shape *M*, then `rhs` is shape *M* × *N* and the result is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384780,"byte_end":384856,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ shape *N*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384861,"byte_end":384875,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384880,"byte_end":384883,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the array shapes are incompatible.<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384888,"byte_end":384944,"line_start":59,"line_end":59,"column_start":5,"column_end":61}},{"value":"/ *Note:* If enabled, uses blas `dot` for elements of `f32, f64` when memory","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384949,"byte_end":385027,"line_start":60,"line_end":60,"column_start":5,"column_end":83}},{"value":"/ layout allows.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":385032,"byte_end":385050,"line_start":61,"line_end":61,"column_start":5,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2681},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388291,"byte_end":388294,"line_start":159,"line_end":159,"column_start":11,"column_end":14},"name":"Dot","qualname":"::linalg::impl_linalg::Dot","value":"Dot<Rhs>","parent":null,"children":[{"krate":0,"index":2683},{"krate":0,"index":2684}],"decl_id":null,"docs":" Matrix Multiplication","sig":null,"attributes":[{"value":"/ Matrix Multiplication","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388164,"byte_end":388189,"line_start":155,"line_end":155,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388190,"byte_end":388193,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ For two-dimensional arrays, the dot method computes the matrix","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388194,"byte_end":388260,"line_start":157,"line_end":157,"column_start":1,"column_end":67}},{"value":"/ multiplication.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388261,"byte_end":388280,"line_start":158,"line_end":158,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":2683},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388413,"byte_end":388419,"line_start":163,"line_end":163,"column_start":10,"column_end":16},"name":"Output","qualname":"::linalg::impl_linalg::Dot::Output","value":"type Output;","parent":{"krate":0,"index":2681},"children":[],"decl_id":null,"docs":" The result of the operation.","sig":null,"attributes":[{"value":"/ The result of the operation.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388306,"byte_end":388338,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388343,"byte_end":388346,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ For two-dimensional arrays: a rectangular array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388351,"byte_end":388403,"line_start":162,"line_end":162,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388428,"byte_end":388431,"line_start":164,"line_end":164,"column_start":8,"column_end":11},"name":"dot","qualname":"::linalg::impl_linalg::Dot::dot","value":"pub fn dot(&Self, &Rhs) -> Self::Output","parent":{"krate":0,"index":2681},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390829,"byte_end":390832,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"dot","qualname":"<ArrayBase<S, Ix2>>::dot","value":"pub fn dot<Rhs>(&Self, &Rhs) -> <Self as Dot<Rhs>>::Output where\nSelf: Dot<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" Perform matrix multiplication of rectangular arrays `self` and `rhs`.","sig":null,"attributes":[{"value":"/ Perform matrix multiplication of rectangular arrays `self` and `rhs`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389784,"byte_end":389857,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389862,"byte_end":389865,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ `Rhs` may be either a one-dimensional or a two-dimensional array.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389870,"byte_end":389939,"line_start":215,"line_end":215,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389944,"byte_end":389947,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ If Rhs is two-dimensional, they array shapes must agree in the way that","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389952,"byte_end":390027,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ if `self` is *M* × *N*, then `rhs` is *N* × *K*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390032,"byte_end":390086,"line_start":218,"line_end":218,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390091,"byte_end":390094,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Return a result array with shape *M* × *K*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390099,"byte_end":390147,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390152,"byte_end":390155,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ **Panics** if shapes are incompatible or the number of elements in the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390160,"byte_end":390234,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"/ result would overflow `isize`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390239,"byte_end":390273,"line_start":223,"line_end":223,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390278,"byte_end":390281,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ *Note:* If enabled, uses blas `gemv/gemm` for elements of `f32, f64`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390286,"byte_end":390358,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ when memory layout allows. The default matrixmultiply backend","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390363,"byte_end":390428,"line_start":226,"line_end":226,"column_start":5,"column_end":70}},{"value":"/ is otherwise used for `f32, f64` for all memory layouts.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390433,"byte_end":390493,"line_start":227,"line_end":227,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390498,"byte_end":390501,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390506,"byte_end":390513,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ use ndarray::arr2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390518,"byte_end":390540,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390545,"byte_end":390548,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ let a = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390553,"byte_end":390581,"line_start":232,"line_end":232,"column_start":5,"column_end":33}},{"value":"/                [0., 1.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390586,"byte_end":390616,"line_start":233,"line_end":233,"column_start":5,"column_end":35}},{"value":"/ let b = arr2(&[[1., 2.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390621,"byte_end":390649,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/                [2., 3.]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390654,"byte_end":390684,"line_start":235,"line_end":235,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390689,"byte_end":390692,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390697,"byte_end":390709,"line_start":237,"line_end":237,"column_start":5,"column_end":17}},{"value":"/     a.dot(&b) == arr2(&[[5., 8.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390714,"byte_end":390751,"line_start":238,"line_end":238,"column_start":5,"column_end":42}},{"value":"/                         [2., 3.]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390756,"byte_end":390794,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390799,"byte_end":390805,"line_start":240,"line_end":240,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":390810,"byte_end":390817,"line_start":241,"line_end":241,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393900,"byte_end":393910,"line_start":340,"line_end":340,"column_start":12,"column_end":22},"name":"scaled_add","qualname":"<ArrayBase<S, D>>::scaled_add","value":"pub fn scaled_add<S2, E>(&mut Self, A, &ArrayBase<S2, E>) where S: DataMut,\nS2: Data<Elem = A>, A: LinalgScalar, E: Dimension","parent":null,"children":[],"decl_id":null,"docs":" Perform the operation `self += alpha * rhs` efficiently, where\n `alpha` is a scalar and `rhs` is another array. This operation is\n also known as `axpy` in BLAS.","sig":null,"attributes":[{"value":"/ Perform the operation `self += alpha * rhs` efficiently, where","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393564,"byte_end":393630,"line_start":333,"line_end":333,"column_start":5,"column_end":71}},{"value":"/ `alpha` is a scalar and `rhs` is another array. This operation is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393635,"byte_end":393704,"line_start":334,"line_end":334,"column_start":5,"column_end":74}},{"value":"/ also known as `axpy` in BLAS.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393709,"byte_end":393742,"line_start":335,"line_end":335,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393747,"byte_end":393750,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ If their shapes disagree, `rhs` is broadcast to the shape of `self`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393755,"byte_end":393827,"line_start":337,"line_end":337,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393832,"byte_end":393835,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ **Panics** if broadcasting isn’t possible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393840,"byte_end":393888,"line_start":339,"line_end":339,"column_start":5,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":2728},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400608,"byte_end":400623,"line_start":538,"line_end":538,"column_start":8,"column_end":23},"name":"general_mat_mul","qualname":"::linalg::impl_linalg::general_mat_mul","value":"pub fn general_mat_mul<A, S1, S2,\n                       S3>(A, &ArrayBase<S1, Ix2>, &ArrayBase<S2, Ix2>, A,\n                           &mut ArrayBase<S3, Ix2>) where S1: Data<Elem = A>,\nS2: Data<Elem = A>, S3: DataMut<Elem = A>, A: LinalgScalar","parent":null,"children":[],"decl_id":null,"docs":" General matrix-matrix multiplication.","sig":null,"attributes":[{"value":"/ General matrix-matrix multiplication.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400143,"byte_end":400184,"line_start":527,"line_end":527,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400185,"byte_end":400188,"line_start":528,"line_end":528,"column_start":1,"column_end":4}},{"value":"/ Compute C ← α A B + β C","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400189,"byte_end":400220,"line_start":529,"line_end":529,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400221,"byte_end":400224,"line_start":530,"line_end":530,"column_start":1,"column_end":4}},{"value":"/ The array shapes must agree in the way that","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400225,"byte_end":400272,"line_start":531,"line_end":531,"column_start":1,"column_end":48}},{"value":"/ if `a` is *M* × *N*, then `b` is *N* × *K* and `c` is *M* × *K*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400273,"byte_end":400344,"line_start":532,"line_end":532,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400345,"byte_end":400348,"line_start":533,"line_end":533,"column_start":1,"column_end":4}},{"value":"/ ***Panics*** if array shapes are not compatible<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400349,"byte_end":400404,"line_start":534,"line_end":534,"column_start":1,"column_end":56}},{"value":"/ *Note:* If enabled, uses blas `gemm` for elements of `f32, f64` when memory","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400405,"byte_end":400484,"line_start":535,"line_end":535,"column_start":1,"column_end":80}},{"value":"/ layout allows.  The default matrixmultiply backend is otherwise used for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400485,"byte_end":400561,"line_start":536,"line_end":536,"column_start":1,"column_end":77}},{"value":"/ `f32, f64` for all memory layouts.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":400562,"byte_end":400600,"line_start":537,"line_end":537,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":2733},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401655,"byte_end":401674,"line_start":567,"line_end":567,"column_start":8,"column_end":27},"name":"general_mat_vec_mul","qualname":"::linalg::impl_linalg::general_mat_vec_mul","value":"pub fn general_mat_vec_mul<A, S1, S2,\n                           S3>(A, &ArrayBase<S1, Ix2>, &ArrayBase<S2, Ix1>, A,\n                               &mut ArrayBase<S3, Ix1>) where S1: Data<Elem =\nA>, S2: Data<Elem = A>, S3: DataMut<Elem = A>, A: LinalgScalar","parent":null,"children":[],"decl_id":null,"docs":" General matrix-vector multiplication.","sig":null,"attributes":[{"value":"/ General matrix-vector multiplication.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401269,"byte_end":401310,"line_start":557,"line_end":557,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401311,"byte_end":401314,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ Compute y ← α A x + β y","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401315,"byte_end":401346,"line_start":559,"line_end":559,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401347,"byte_end":401350,"line_start":560,"line_end":560,"column_start":1,"column_end":4}},{"value":"/ where A is a *M* × *N* matrix and x is an *N*-element column vector and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401351,"byte_end":401427,"line_start":561,"line_end":561,"column_start":1,"column_end":76}},{"value":"/ y an *M*-element column vector (one dimensional arrays).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401428,"byte_end":401488,"line_start":562,"line_end":562,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401489,"byte_end":401492,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ ***Panics*** if array shapes are not compatible<br>","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401493,"byte_end":401548,"line_start":564,"line_end":564,"column_start":1,"column_end":56}},{"value":"/ *Note:* If enabled, uses blas `gemv` for elements of `f32, f64` when memory","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401549,"byte_end":401628,"line_start":565,"line_end":565,"column_start":1,"column_end":80}},{"value":"/ layout allows.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":401629,"byte_end":401647,"line_start":566,"line_end":566,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":2748},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410019,"byte_end":410032,"line_start":32,"line_end":32,"column_start":11,"column_end":24},"name":"ScalarOperand","qualname":"::impl_ops::ScalarOperand","value":"ScalarOperand: 'static + Clone","parent":null,"children":[],"decl_id":null,"docs":" Elements that can be used as direct operands in arithmetic with arrays.","sig":null,"attributes":[{"value":"/ Elements that can be used as direct operands in arithmetic with arrays.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":408936,"byte_end":409011,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409012,"byte_end":409015,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ For example, `f64` is a `ScalarOperand` which means that for an array `a`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409016,"byte_end":409094,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ arithmetic like `a + 1.0`, and, `a * 2.`, and `a += 3.` are allowed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409095,"byte_end":409167,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409168,"byte_end":409171,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In the description below, let `A` be an array or array view,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409172,"byte_end":409236,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/ let `B` be an array with owned data,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409237,"byte_end":409277,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/ and let `C` be an array with mutable data.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409278,"byte_end":409324,"line_start":18,"line_end":18,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409325,"byte_end":409328,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ `ScalarOperand` determines for which scalars `K` operations `&A @ K`, and `B @ K`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409329,"byte_end":409415,"line_start":20,"line_end":20,"column_start":1,"column_end":87}},{"value":"/ and `C @= K` are defined, as ***right hand side operands***, for applicable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409416,"byte_end":409495,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ arithmetic operators (denoted `@`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409496,"byte_end":409535,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409536,"byte_end":409539,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ***Left hand side*** scalar operands are not related to this trait","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409540,"byte_end":409610,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/ (they need one `impl` per concrete scalar type); but they are still","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409611,"byte_end":409682,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ implemented for the same types, allowing operations","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409683,"byte_end":409738,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ `K @ &A`, and `K @ B` for primitive numeric types `K`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409739,"byte_end":409797,"line_start":27,"line_end":27,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409798,"byte_end":409801,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This trait ***does not*** limit which elements can be stored in an array in general.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409802,"byte_end":409890,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ Non-`ScalarOperand` types can still participate in arithmetic as array elements in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409891,"byte_end":409977,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"/ in array-array operations.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":409978,"byte_end":410008,"line_start":31,"line_end":31,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424356,"byte_end":424366,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"from_shape","qualname":"<ArrayView>::from_shape","value":"pub fn from_shape<Sh>(Sh, &'a [A]) -> Result<Self, ShapeError> where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Create a read-only array view borrowing its data from a slice.","sig":null,"attributes":[{"value":"/ Create a read-only array view borrowing its data from a slice.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423556,"byte_end":423622,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423627,"byte_end":423630,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Checks whether `shape` are compatible with the slice's","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423635,"byte_end":423693,"line_start":39,"line_end":39,"column_start":5,"column_end":63}},{"value":"/ length, returning an `Err` if not compatible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423698,"byte_end":423747,"line_start":40,"line_end":40,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423752,"byte_end":423755,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423760,"byte_end":423767,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use ndarray::ArrayView;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423772,"byte_end":423799,"line_start":43,"line_end":43,"column_start":5,"column_end":32}},{"value":"/ use ndarray::arr3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423804,"byte_end":423826,"line_start":44,"line_end":44,"column_start":5,"column_end":27}},{"value":"/ use ndarray::ShapeBuilder;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423831,"byte_end":423861,"line_start":45,"line_end":45,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423866,"byte_end":423869,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ let s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423874,"byte_end":423929,"line_start":47,"line_end":47,"column_start":5,"column_end":60}},{"value":"/ let a = ArrayView::from_shape((2, 3, 2).strides((1, 4, 2)),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423934,"byte_end":423997,"line_start":48,"line_end":48,"column_start":5,"column_end":68}},{"value":"/                               &s).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424002,"byte_end":424049,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424054,"byte_end":424057,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424062,"byte_end":424074,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/     a == arr3(&[[[0, 2],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424079,"byte_end":424107,"line_start":52,"line_end":52,"column_start":5,"column_end":33}},{"value":"/                  [4, 6],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424112,"byte_end":424140,"line_start":53,"line_end":53,"column_start":5,"column_end":33}},{"value":"/                  [8, 10]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424145,"byte_end":424175,"line_start":54,"line_end":54,"column_start":5,"column_end":35}},{"value":"/                 [[1, 3],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424180,"byte_end":424208,"line_start":55,"line_end":55,"column_start":5,"column_end":33}},{"value":"/                  [5, 7],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424213,"byte_end":424241,"line_start":56,"line_end":56,"column_start":5,"column_end":33}},{"value":"/                  [9, 11]]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424246,"byte_end":424277,"line_start":57,"line_end":57,"column_start":5,"column_end":36}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424282,"byte_end":424288,"line_start":58,"line_end":58,"column_start":5,"column_end":11}},{"value":"/ assert!(a.strides() == &[1, 4, 2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424293,"byte_end":424332,"line_start":59,"line_end":59,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":424337,"byte_end":424344,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427049,"byte_end":427063,"line_start":117,"line_end":117,"column_start":19,"column_end":33},"name":"from_shape_ptr","qualname":"<ArrayView>::from_shape_ptr","value":"pub unsafe fn from_shape_ptr<Sh>(Sh, *const A) -> Self where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Create an `ArrayView<A, D>` from shape information and a raw pointer to\n the elements.","sig":null,"attributes":[{"value":"/ Create an `ArrayView<A, D>` from shape information and a raw pointer to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425006,"byte_end":425081,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ the elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425086,"byte_end":425103,"line_start":81,"line_end":81,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425108,"byte_end":425111,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Unsafe because caller is responsible for ensuring all of the following:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425116,"byte_end":425191,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425196,"byte_end":425199,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ * The elements seen by moving `ptr` according to the shape and strides","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425204,"byte_end":425278,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/   must live at least as long as `'a` and must not be not mutably","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425283,"byte_end":425351,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"/   aliased for the duration of `'a`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425356,"byte_end":425395,"line_start":87,"line_end":87,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425400,"byte_end":425403,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ * `ptr` must be non-null and aligned, and it must be safe to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425408,"byte_end":425472,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/   [`.offset()`] `ptr` by zero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425477,"byte_end":425511,"line_start":90,"line_end":90,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425516,"byte_end":425519,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ * It must be safe to [`.offset()`] the pointer repeatedly along all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425524,"byte_end":425595,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/   axes and calculate the `count`s for the `.offset()` calls without","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425600,"byte_end":425671,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/   overflow, even if the array is empty or the elements are zero-sized.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425676,"byte_end":425750,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425755,"byte_end":425758,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/   In other words,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425763,"byte_end":425784,"line_start":96,"line_end":96,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425789,"byte_end":425792,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/   * All possible pointers generated by moving along all axes must be in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425797,"byte_end":425872,"line_start":98,"line_end":98,"column_start":5,"column_end":80}},{"value":"/     bounds or one byte past the end of a single allocation with element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425877,"byte_end":425952,"line_start":99,"line_end":99,"column_start":5,"column_end":80}},{"value":"/     type `A`. The only exceptions are if the array is empty or the element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":425957,"byte_end":426035,"line_start":100,"line_end":100,"column_start":5,"column_end":83}},{"value":"/     type is zero-sized. In these cases, `ptr` may be dangling, but it must","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426040,"byte_end":426118,"line_start":101,"line_end":101,"column_start":5,"column_end":83}},{"value":"/     still be safe to [`.offset()`] the pointer along the axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426123,"byte_end":426189,"line_start":102,"line_end":102,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426194,"byte_end":426197,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/   * The offset in units of bytes between the least address and greatest","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426202,"byte_end":426277,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/     address by moving along all axes must not exceed `isize::MAX`. This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426282,"byte_end":426357,"line_start":105,"line_end":105,"column_start":5,"column_end":80}},{"value":"/     constraint prevents the computed offset, in bytes, from overflowing","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426362,"byte_end":426437,"line_start":106,"line_end":106,"column_start":5,"column_end":80}},{"value":"/     `isize` regardless of the starting point due to past offsets.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426442,"byte_end":426511,"line_start":107,"line_end":107,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426516,"byte_end":426519,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/   * The offset in units of `A` between the least address and greatest","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426524,"byte_end":426597,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/     address by moving along all axes must not exceed `isize::MAX`. This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426602,"byte_end":426677,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/     constraint prevents overflow when calculating the `count` parameter to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426682,"byte_end":426760,"line_start":111,"line_end":111,"column_start":5,"column_end":83}},{"value":"/     [`.offset()`] regardless of the starting point due to past offsets.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426765,"byte_end":426840,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426845,"byte_end":426848,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ * The product of non-zero axis lengths must not exceed `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426853,"byte_end":426925,"line_start":114,"line_end":114,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426930,"byte_end":426933,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ [`.offset()`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":426938,"byte_end":427030,"line_start":116,"line_end":116,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427688,"byte_end":427696,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<ArrayView>::reborrow","value":"pub fn reborrow<'b>(Self) -> ArrayView where 'a:'b","parent":null,"children":[],"decl_id":null,"docs":" Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime\n outlived by `'a'`.\n","sig":null,"attributes":[{"value":"/ Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427574,"byte_end":427649,"line_start":131,"line_end":131,"column_start":5,"column_end":80}},{"value":"/ outlived by `'a'`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427654,"byte_end":427676,"line_start":132,"line_end":132,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428287,"byte_end":428295,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"split_at","qualname":"<ArrayView>::split_at","value":"pub fn split_at(Self, Axis, Ix) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the array view along `axis` and return one view strictly before the\n split and one view after the split.","sig":null,"attributes":[{"value":"/ Split the array view along `axis` and return one view strictly before the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427862,"byte_end":427939,"line_start":141,"line_end":141,"column_start":5,"column_end":82}},{"value":"/ split and one view after the split.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427944,"byte_end":427983,"line_start":142,"line_end":142,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427988,"byte_end":427991,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":427996,"byte_end":428049,"line_start":144,"line_end":144,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428054,"byte_end":428057,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Below, an illustration of `.split_at(Axis(2), 2)` on","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428062,"byte_end":428118,"line_start":146,"line_end":146,"column_start":5,"column_end":61}},{"value":"/ an array with shape 3 × 5 × 5.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428123,"byte_end":428159,"line_start":147,"line_end":147,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428164,"byte_end":428167,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ <img src=\"https://rust-ndarray.github.io/ndarray/images/split_at.svg\" width=\"300px\" height=\"271px\">","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":428172,"byte_end":428275,"line_start":149,"line_end":149,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429341,"byte_end":429351,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"into_slice","qualname":"<ArrayView>::into_slice","value":"pub fn into_slice(&Self) -> Option<&'a [A]>","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice, if it is contiguous and in standard order.\n Return `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice, if it is contiguous and in standard order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429212,"byte_end":429296,"line_start":181,"line_end":181,"column_start":5,"column_end":87}},{"value":"/ Return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429301,"byte_end":429329,"line_start":182,"line_end":182,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":2843},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430988,"byte_end":430999,"line_start":231,"line_end":231,"column_start":11,"column_end":22},"name":"IndexLonger","qualname":"::impl_views::IndexLonger","value":"IndexLonger<I>","parent":null,"children":[{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848}],"decl_id":null,"docs":" Extra indexing methods for array views","sig":null,"attributes":[{"value":"/ Extra indexing methods for array views","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429574,"byte_end":429616,"line_start":195,"line_end":195,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429617,"byte_end":429620,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ These methods are very similar to regular indexing or calling of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429621,"byte_end":429693,"line_start":197,"line_end":197,"column_start":1,"column_end":73}},{"value":"/ `get`/`get_mut` methods that we can use on any array or array view. The","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429694,"byte_end":429769,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/ difference here is in the length of lifetime in the resulting reference.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429770,"byte_end":429846,"line_start":199,"line_end":199,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429847,"byte_end":429850,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ **Note** that the `ArrayView` (read-only) and `ArrayViewMut` (read-write) differ","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429851,"byte_end":429935,"line_start":201,"line_end":201,"column_start":1,"column_end":85}},{"value":"/ in how they are allowed implement this trait -- `ArrayView`'s implementation","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":429936,"byte_end":430016,"line_start":202,"line_end":202,"column_start":1,"column_end":81}},{"value":"/ is usual. If you put in a `ArrayView<'a, T, D>` here, you get references","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430017,"byte_end":430093,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ `&'a T` out.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430094,"byte_end":430110,"line_start":204,"line_end":204,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430111,"byte_end":430114,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ For `ArrayViewMut` to obey the borrowing rules we have to consume the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430115,"byte_end":430188,"line_start":206,"line_end":206,"column_start":1,"column_end":74}},{"value":"/ view if we call any of these methods. (The equivalent of reborrow is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430189,"byte_end":430261,"line_start":207,"line_end":207,"column_start":1,"column_end":73}},{"value":"/ `.view_mut()` for read-write array views, but if you can use that,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430262,"byte_end":430332,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/ then the regular indexing / `get_mut` should suffice, too.)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430333,"byte_end":430396,"line_start":209,"line_end":209,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430397,"byte_end":430400,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430401,"byte_end":430408,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ use ndarray::IndexLonger;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430409,"byte_end":430438,"line_start":212,"line_end":212,"column_start":1,"column_end":30}},{"value":"/ use ndarray::ArrayView;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430439,"byte_end":430466,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430467,"byte_end":430470,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ let data = [0.; 256];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430471,"byte_end":430496,"line_start":215,"line_end":215,"column_start":1,"column_end":26}},{"value":"/ let long_life_ref = {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430497,"byte_end":430522,"line_start":216,"line_end":216,"column_start":1,"column_end":26}},{"value":"/     // make a 16 × 16 array view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430523,"byte_end":430560,"line_start":217,"line_end":217,"column_start":1,"column_end":37}},{"value":"/     let view = ArrayView::from(&data[..]).into_shape((16, 16)).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430561,"byte_end":430637,"line_start":218,"line_end":218,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430638,"byte_end":430641,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/     // index the view and with `IndexLonger`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430642,"byte_end":430691,"line_start":220,"line_end":220,"column_start":1,"column_end":50}},{"value":"/     // Note here that we get a reference with a life that is derived from","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430692,"byte_end":430769,"line_start":221,"line_end":221,"column_start":1,"column_end":78}},{"value":"/     // `data`, the base data, instead of being derived from the view","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430770,"byte_end":430842,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"/     IndexLonger::index(&view, [0, 1])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430843,"byte_end":430884,"line_start":223,"line_end":223,"column_start":1,"column_end":42}},{"value":"/ };","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430885,"byte_end":430891,"line_start":224,"line_end":224,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430892,"byte_end":430895,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ // view goes out of scope","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430896,"byte_end":430925,"line_start":226,"line_end":226,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430926,"byte_end":430929,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(long_life_ref, &0.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430930,"byte_end":430965,"line_start":228,"line_end":228,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430966,"byte_end":430969,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":430970,"byte_end":430977,"line_start":230,"line_end":230,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":2845},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431113,"byte_end":431119,"line_start":234,"line_end":234,"column_start":10,"column_end":16},"name":"Output","qualname":"::impl_views::IndexLonger::Output","value":"type Output;","parent":{"krate":0,"index":2843},"children":[],"decl_id":null,"docs":" The type of the reference to the element that is produced, including\n its lifetime.\n","sig":null,"attributes":[{"value":"/ The type of the reference to the element that is produced, including","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431009,"byte_end":431081,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ its lifetime.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431086,"byte_end":431103,"line_start":233,"line_end":233,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431581,"byte_end":431586,"line_start":247,"line_end":247,"column_start":8,"column_end":13},"name":"index","qualname":"::impl_views::IndexLonger::index","value":"pub fn index(Self, I) -> Self::Output","parent":{"krate":0,"index":2843},"children":[],"decl_id":null,"docs":" Get a reference of a element through the view.","sig":null,"attributes":[{"value":"/ Get a reference of a element through the view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431125,"byte_end":431175,"line_start":235,"line_end":235,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431180,"byte_end":431183,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method is like `Index::index` but with a longer lifetime (matching","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431188,"byte_end":431263,"line_start":237,"line_end":237,"column_start":5,"column_end":80}},{"value":"/ the array view); which we can only do for the array view and not in the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431268,"byte_end":431343,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ `Index` trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431348,"byte_end":431366,"line_start":239,"line_end":239,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431371,"byte_end":431374,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ See also [the `get` method][1] which works for all arrays and array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431379,"byte_end":431450,"line_start":241,"line_end":241,"column_start":5,"column_end":76}},{"value":"/ views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431455,"byte_end":431465,"line_start":242,"line_end":242,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431470,"byte_end":431473,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.ArrayBase.html#method.get","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431478,"byte_end":431519,"line_start":244,"line_end":244,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431524,"byte_end":431527,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ **Panics** if index is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431532,"byte_end":431573,"line_start":246,"line_end":246,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2847},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432154,"byte_end":432157,"line_start":262,"line_end":262,"column_start":8,"column_end":11},"name":"get","qualname":"::impl_views::IndexLonger::get","value":"pub fn get(Self, I) -> Option<Self::Output>","parent":{"krate":0,"index":2843},"children":[],"decl_id":null,"docs":" Get a reference of a element through the view.","sig":null,"attributes":[{"value":"/ Get a reference of a element through the view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431625,"byte_end":431675,"line_start":249,"line_end":249,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431680,"byte_end":431683,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This method is like `ArrayBase::get` but with a longer lifetime (matching","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431688,"byte_end":431765,"line_start":251,"line_end":251,"column_start":5,"column_end":82}},{"value":"/ the array view); which we can only do for the array view and not in the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431770,"byte_end":431845,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/ `Index` trait.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431850,"byte_end":431868,"line_start":253,"line_end":253,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431873,"byte_end":431876,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ See also [the `get` method][1] (and [`get_mut`][2]) which works for all arrays and array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431881,"byte_end":431973,"line_start":255,"line_end":255,"column_start":5,"column_end":97}},{"value":"/ views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431978,"byte_end":431988,"line_start":256,"line_end":256,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":431993,"byte_end":431996,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.ArrayBase.html#method.get","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432001,"byte_end":432042,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/ [2]: struct.ArrayBase.html#method.get_mut","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432047,"byte_end":432092,"line_start":259,"line_end":259,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432097,"byte_end":432100,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ **Panics** if index is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432105,"byte_end":432146,"line_start":261,"line_end":261,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2848},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432659,"byte_end":432663,"line_start":275,"line_end":275,"column_start":15,"column_end":19},"name":"uget","qualname":"::impl_views::IndexLonger::uget","value":"pub unsafe fn uget(Self, I) -> Self::Output","parent":{"krate":0,"index":2843},"children":[],"decl_id":null,"docs":" Get a reference of a element through the view without boundary check","sig":null,"attributes":[{"value":"/ Get a reference of a element through the view without boundary check","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432204,"byte_end":432276,"line_start":264,"line_end":264,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432281,"byte_end":432284,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This method is like `elem` with a longer lifetime (matching the array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432289,"byte_end":432362,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ view); which we can't do for general arrays.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432367,"byte_end":432415,"line_start":267,"line_end":267,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432420,"byte_end":432423,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ See also [the `uget` method][1] which works for all arrays and array","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432428,"byte_end":432500,"line_start":269,"line_end":269,"column_start":5,"column_end":77}},{"value":"/ views.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432505,"byte_end":432515,"line_start":270,"line_end":270,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432520,"byte_end":432523,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.ArrayBase.html#method.uget","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432528,"byte_end":432570,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432575,"byte_end":432578,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ **Note:** only unchecked for non-debug builds of ndarray.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":432583,"byte_end":432644,"line_start":274,"line_end":274,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2865},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435210,"byte_end":435220,"line_start":358,"line_end":358,"column_start":12,"column_end":22},"name":"from_shape","qualname":"<ArrayViewMut>::from_shape","value":"pub fn from_shape<Sh>(Sh, &'a mut [A]) -> Result<Self, ShapeError> where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Create a read-write array view borrowing its data from a slice.","sig":null,"attributes":[{"value":"/ Create a read-write array view borrowing its data from a slice.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434346,"byte_end":434413,"line_start":333,"line_end":333,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434418,"byte_end":434421,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Checks whether `dim` and `strides` are compatible with the slice's","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434426,"byte_end":434496,"line_start":335,"line_end":335,"column_start":5,"column_end":75}},{"value":"/ length, returning an `Err` if not compatible.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434501,"byte_end":434550,"line_start":336,"line_end":336,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434555,"byte_end":434558,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434563,"byte_end":434570,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use ndarray::ArrayViewMut;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434575,"byte_end":434605,"line_start":339,"line_end":339,"column_start":5,"column_end":35}},{"value":"/ use ndarray::arr3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434610,"byte_end":434632,"line_start":340,"line_end":340,"column_start":5,"column_end":27}},{"value":"/ use ndarray::ShapeBuilder;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434637,"byte_end":434667,"line_start":341,"line_end":341,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434672,"byte_end":434675,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434680,"byte_end":434739,"line_start":343,"line_end":343,"column_start":5,"column_end":64}},{"value":"/ let mut a = ArrayViewMut::from_shape((2, 3, 2).strides((1, 4, 2)),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434744,"byte_end":434814,"line_start":344,"line_end":344,"column_start":5,"column_end":75}},{"value":"/                                      &mut s).unwrap();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434819,"byte_end":434877,"line_start":345,"line_end":345,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434882,"byte_end":434885,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ a[[0, 0, 0]] = 1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434890,"byte_end":434911,"line_start":347,"line_end":347,"column_start":5,"column_end":26}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434916,"byte_end":434928,"line_start":348,"line_end":348,"column_start":5,"column_end":17}},{"value":"/     a == arr3(&[[[1, 2],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434933,"byte_end":434961,"line_start":349,"line_end":349,"column_start":5,"column_end":33}},{"value":"/                  [4, 6],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434966,"byte_end":434994,"line_start":350,"line_end":350,"column_start":5,"column_end":33}},{"value":"/                  [8, 10]],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434999,"byte_end":435029,"line_start":351,"line_end":351,"column_start":5,"column_end":35}},{"value":"/                 [[1, 3],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435034,"byte_end":435062,"line_start":352,"line_end":352,"column_start":5,"column_end":33}},{"value":"/                  [5, 7],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435067,"byte_end":435095,"line_start":353,"line_end":353,"column_start":5,"column_end":33}},{"value":"/                  [9, 11]]])","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435100,"byte_end":435131,"line_start":354,"line_end":354,"column_start":5,"column_end":36}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435136,"byte_end":435142,"line_start":355,"line_end":355,"column_start":5,"column_end":11}},{"value":"/ assert!(a.strides() == &[1, 4, 2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435147,"byte_end":435186,"line_start":356,"line_end":356,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435191,"byte_end":435198,"line_start":357,"line_end":357,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437906,"byte_end":437920,"line_start":414,"line_end":414,"column_start":19,"column_end":33},"name":"from_shape_ptr","qualname":"<ArrayViewMut>::from_shape_ptr","value":"pub unsafe fn from_shape_ptr<Sh>(Sh, *mut A) -> Self where\nSh: Into<StrideShape<D>>","parent":null,"children":[],"decl_id":null,"docs":" Create an `ArrayViewMut<A, D>` from shape information and a\n raw pointer to the elements.","sig":null,"attributes":[{"value":"/ Create an `ArrayViewMut<A, D>` from shape information and a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435872,"byte_end":435935,"line_start":377,"line_end":377,"column_start":5,"column_end":68}},{"value":"/ raw pointer to the elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435940,"byte_end":435972,"line_start":378,"line_end":378,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435977,"byte_end":435980,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ Unsafe because caller is responsible for ensuring all of the following:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":435985,"byte_end":436060,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436065,"byte_end":436068,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ * The elements seen by moving `ptr` according to the shape and strides","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436073,"byte_end":436147,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"/   must live at least as long as `'a` and must not be aliased for the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436152,"byte_end":436224,"line_start":383,"line_end":383,"column_start":5,"column_end":77}},{"value":"/   duration of `'a`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436229,"byte_end":436252,"line_start":384,"line_end":384,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436257,"byte_end":436260,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ * `ptr` must be non-null and aligned, and it must be safe to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436265,"byte_end":436329,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/   [`.offset()`] `ptr` by zero.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436334,"byte_end":436368,"line_start":387,"line_end":387,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436373,"byte_end":436376,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ * It must be safe to [`.offset()`] the pointer repeatedly along all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436381,"byte_end":436452,"line_start":389,"line_end":389,"column_start":5,"column_end":76}},{"value":"/   axes and calculate the `count`s for the `.offset()` calls without","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436457,"byte_end":436528,"line_start":390,"line_end":390,"column_start":5,"column_end":76}},{"value":"/   overflow, even if the array is empty or the elements are zero-sized.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436533,"byte_end":436607,"line_start":391,"line_end":391,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436612,"byte_end":436615,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/   In other words,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436620,"byte_end":436641,"line_start":393,"line_end":393,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436646,"byte_end":436649,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/   * All possible pointers generated by moving along all axes must be in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436654,"byte_end":436729,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/     bounds or one byte past the end of a single allocation with element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436734,"byte_end":436809,"line_start":396,"line_end":396,"column_start":5,"column_end":80}},{"value":"/     type `A`. The only exceptions are if the array is empty or the element","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436814,"byte_end":436892,"line_start":397,"line_end":397,"column_start":5,"column_end":83}},{"value":"/     type is zero-sized. In these cases, `ptr` may be dangling, but it must","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436897,"byte_end":436975,"line_start":398,"line_end":398,"column_start":5,"column_end":83}},{"value":"/     still be safe to [`.offset()`] the pointer along the axes.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":436980,"byte_end":437046,"line_start":399,"line_end":399,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437051,"byte_end":437054,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/   * The offset in units of bytes between the least address and greatest","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437059,"byte_end":437134,"line_start":401,"line_end":401,"column_start":5,"column_end":80}},{"value":"/     address by moving along all axes must not exceed `isize::MAX`. This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437139,"byte_end":437214,"line_start":402,"line_end":402,"column_start":5,"column_end":80}},{"value":"/     constraint prevents the computed offset, in bytes, from overflowing","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437219,"byte_end":437294,"line_start":403,"line_end":403,"column_start":5,"column_end":80}},{"value":"/     `isize` regardless of the starting point due to past offsets.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437299,"byte_end":437368,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437373,"byte_end":437376,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/   * The offset in units of `A` between the least address and greatest","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437381,"byte_end":437454,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/     address by moving along all axes must not exceed `isize::MAX`. This","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437459,"byte_end":437534,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/     constraint prevents overflow when calculating the `count` parameter to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437539,"byte_end":437617,"line_start":408,"line_end":408,"column_start":5,"column_end":83}},{"value":"/     [`.offset()`] regardless of the starting point due to past offsets.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437622,"byte_end":437697,"line_start":409,"line_end":409,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437702,"byte_end":437705,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ * The product of non-zero axis lengths must not exceed `isize::MAX`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437710,"byte_end":437782,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437787,"byte_end":437790,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ [`.offset()`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":437795,"byte_end":437887,"line_start":413,"line_end":413,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438549,"byte_end":438557,"line_start":430,"line_end":430,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<ArrayViewMut>::reborrow","value":"pub fn reborrow<'b>(Self) -> ArrayViewMut where 'a:'b","parent":null,"children":[],"decl_id":null,"docs":" Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime\n outlived by `'a'`.\n","sig":null,"attributes":[{"value":"/ Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438432,"byte_end":438510,"line_start":428,"line_end":428,"column_start":5,"column_end":83}},{"value":"/ outlived by `'a'`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438515,"byte_end":438537,"line_start":429,"line_end":429,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438952,"byte_end":438960,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"split_at","qualname":"<ArrayViewMut>::split_at","value":"pub fn split_at(Self, Axis, Ix) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the array view along `axis` and return one mutable view strictly\n before the split and one mutable view after the split.","sig":null,"attributes":[{"value":"/ Split the array view along `axis` and return one mutable view strictly","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438737,"byte_end":438811,"line_start":438,"line_end":438,"column_start":5,"column_end":79}},{"value":"/ before the split and one mutable view after the split.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438816,"byte_end":438874,"line_start":439,"line_end":439,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438879,"byte_end":438882,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `axis` or `index` is out of bounds.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":438887,"byte_end":438940,"line_start":441,"line_end":441,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2873},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":440003,"byte_end":440013,"line_start":475,"line_end":475,"column_start":12,"column_end":22},"name":"into_slice","qualname":"<ArrayViewMut>::into_slice","value":"pub fn into_slice(Self) -> Option<&'a mut [A]>","parent":null,"children":[],"decl_id":null,"docs":" Return the array’s data as a slice, if it is contiguous and in standard order.\n Return `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Return the array’s data as a slice, if it is contiguous and in standard order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":439874,"byte_end":439958,"line_start":473,"line_end":473,"column_start":5,"column_end":87}},{"value":"/ Return `None` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":439963,"byte_end":439991,"line_start":474,"line_end":474,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2891},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":443038,"byte_end":443053,"line_start":578,"line_end":578,"column_start":12,"column_end":27},"name":"into_outer_iter","qualname":"<ArrayView>::into_outer_iter","value":"pub fn into_outer_iter(Self) -> iter::AxisIter where D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an outer iterator for this view.\n","sig":null,"attributes":[{"value":"/ Return an outer iterator for this view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":442892,"byte_end":442935,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"This method will be replaced.\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":442975,"byte_end":443026,"line_start":577,"line_end":577,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2902},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":444878,"byte_end":444893,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"into_outer_iter","qualname":"<ArrayViewMut>::into_outer_iter","value":"pub fn into_outer_iter(Self) -> iter::AxisIterMut where D: RemoveAxis","parent":null,"children":[],"decl_id":null,"docs":" Return an outer iterator for this view.\n","sig":null,"attributes":[{"value":"/ Return an outer iterator for this view.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":444732,"byte_end":444775,"line_start":640,"line_end":640,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"This method will be replaced.\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":444815,"byte_end":444866,"line_start":642,"line_end":642,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":6386},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43646,"byte_end":43651,"line_start":1289,"line_end":1289,"column_start":12,"column_end":17},"name":"Shape","qualname":"::Shape","value":"Shape {  }","parent":null,"children":[{"krate":0,"index":6388},{"krate":0,"index":6389}],"decl_id":null,"docs":" A contiguous array shape of n dimensions.","sig":null,"attributes":[{"value":"/ A contiguous array shape of n dimensions.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43480,"byte_end":43525,"line_start":1285,"line_end":1285,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43526,"byte_end":43529,"line_start":1286,"line_end":1286,"column_start":1,"column_end":4}},{"value":"/ Either c- or f- memory ordered (*c* a.k.a *row major* is the default).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43530,"byte_end":43604,"line_start":1287,"line_end":1287,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":6398},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43803,"byte_end":43814,"line_start":1296,"line_end":1296,"column_start":12,"column_end":23},"name":"StrideShape","qualname":"::StrideShape","value":"StrideShape {  }","parent":null,"children":[{"krate":0,"index":6400},{"krate":0,"index":6401},{"krate":0,"index":6402}],"decl_id":null,"docs":" An array shape of n dimensions in c-order, f-order or custom strides.\n","sig":null,"attributes":[{"value":"/ An array shape of n dimensions in c-order, f-order or custom strides.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43688,"byte_end":43761,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":52651,"byte_end":52660,"line_start":48,"line_end":48,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":53175,"byte_end":53184,"line_start":67,"line_end":67,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":53755,"byte_end":53764,"line_start":84,"line_end":84,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":54463,"byte_end":54472,"line_start":110,"line_end":110,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":54581,"byte_end":54590,"line_start":116,"line_end":116,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55310,"byte_end":55319,"line_start":150,"line_end":150,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55525,"byte_end":55537,"line_start":161,"line_end":161,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55748,"byte_end":55757,"line_start":172,"line_end":172,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":56715,"byte_end":56724,"line_start":202,"line_end":202,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":56849,"byte_end":56858,"line_start":207,"line_end":207,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":57415,"byte_end":57424,"line_start":222,"line_end":222,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":57992,"byte_end":58001,"line_start":242,"line_end":242,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":58429,"byte_end":58441,"line_start":256,"line_end":256,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59029,"byte_end":59041,"line_start":276,"line_end":276,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59801,"byte_end":59802,"line_start":307,"line_end":307,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":60416,"byte_end":60425,"line_start":324,"line_end":324,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":63516,"byte_end":63525,"line_start":91,"line_end":91,"column_start":61,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":63869,"byte_end":63878,"line_start":103,"line_end":103,"column_start":57,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":64590,"byte_end":64599,"line_start":123,"line_end":123,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":64952,"byte_end":64961,"line_start":135,"line_end":135,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":65313,"byte_end":65322,"line_start":146,"line_end":146,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":65669,"byte_end":65678,"line_start":158,"line_end":158,"column_start":59,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":68053,"byte_end":68065,"line_start":84,"line_end":84,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":2904}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":68636,"byte_end":68648,"line_start":107,"line_end":107,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":69867,"byte_end":69879,"line_start":144,"line_end":144,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70065,"byte_end":70074,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":2905}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70384,"byte_end":70393,"line_start":167,"line_end":167,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70431,"byte_end":70440,"line_start":169,"line_end":169,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71295,"byte_end":71303,"line_start":195,"line_end":195,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":2906}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71625,"byte_end":71633,"line_start":210,"line_end":210,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71788,"byte_end":71796,"line_start":216,"line_end":216,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72120,"byte_end":72128,"line_start":231,"line_end":231,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72792,"byte_end":72803,"line_start":255,"line_end":255,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72844,"byte_end":72852,"line_start":256,"line_end":256,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72893,"byte_end":72902,"line_start":258,"line_end":258,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":73103,"byte_end":73115,"line_start":267,"line_end":267,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94141,"byte_end":94145,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96292,"byte_end":96294,"line_start":46,"line_end":46,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96417,"byte_end":96418,"line_start":52,"line_end":52,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96551,"byte_end":96560,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96693,"byte_end":96696,"line_start":64,"line_end":64,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100078,"byte_end":100081,"line_start":44,"line_end":44,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100582,"byte_end":100585,"line_start":65,"line_end":65,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100718,"byte_end":100721,"line_start":73,"line_end":73,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100875,"byte_end":100878,"line_start":81,"line_end":81,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":114816,"byte_end":114819,"line_start":365,"line_end":365,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":3181},{"krate":0,"index":635},{"krate":0,"index":3183}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":115709,"byte_end":115712,"line_start":402,"line_end":402,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":3184},{"krate":0,"index":660},{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":118028,"byte_end":118031,"line_start":500,"line_end":500,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":3187},{"krate":0,"index":687},{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":121646,"byte_end":121649,"line_start":646,"line_end":646,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":3190},{"krate":0,"index":707},{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":126681,"byte_end":126686,"line_start":815,"line_end":815,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":3246}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":127710,"byte_end":127713,"line_start":859,"line_end":859,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":127895,"byte_end":127898,"line_start":867,"line_end":867,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":128261,"byte_end":128270,"line_start":19,"line_end":19,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":128654,"byte_end":128663,"line_start":34,"line_end":34,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129101,"byte_end":129110,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129226,"byte_end":129235,"line_start":58,"line_end":58,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129564,"byte_end":129573,"line_start":72,"line_end":72,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129815,"byte_end":129824,"line_start":83,"line_end":83,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130020,"byte_end":130029,"line_start":93,"line_end":93,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130267,"byte_end":130276,"line_start":104,"line_end":104,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130318,"byte_end":130327,"line_start":106,"line_end":106,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131040,"byte_end":131049,"line_start":126,"line_end":126,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131074,"byte_end":131083,"line_start":127,"line_end":127,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131093,"byte_end":131102,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132492,"byte_end":132501,"line_start":170,"line_end":170,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132630,"byte_end":132639,"line_start":177,"line_end":177,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132769,"byte_end":132778,"line_start":184,"line_end":184,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132958,"byte_end":132967,"line_start":193,"line_end":193,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133111,"byte_end":133120,"line_start":201,"line_end":201,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133235,"byte_end":133244,"line_start":209,"line_end":209,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133572,"byte_end":133575,"line_start":225,"line_end":225,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133751,"byte_end":133756,"line_start":232,"line_end":232,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134766,"byte_end":134767,"line_start":31,"line_end":31,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":136900,"byte_end":136902,"line_start":99,"line_end":99,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":137219,"byte_end":137221,"line_start":110,"line_end":110,"column_start":32,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141741,"byte_end":141744,"line_start":20,"line_end":20,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141911,"byte_end":141914,"line_start":28,"line_end":28,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144059,"byte_end":144074,"line_start":49,"line_end":49,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144395,"byte_end":144399,"line_start":63,"line_end":63,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144946,"byte_end":144950,"line_start":84,"line_end":84,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/mod.rs","byte_start":83299,"byte_end":83300,"line_start":273,"line_end":273,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":153031,"byte_end":153037,"line_start":229,"line_end":229,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":153143,"byte_end":153149,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":154268,"byte_end":154274,"line_start":264,"line_end":264,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157958,"byte_end":157963,"line_start":41,"line_end":41,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160483,"byte_end":160495,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161643,"byte_end":161655,"line_start":150,"line_end":150,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164438,"byte_end":164443,"line_start":238,"line_end":238,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164623,"byte_end":164635,"line_start":249,"line_end":249,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164832,"byte_end":164844,"line_start":260,"line_end":260,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165851,"byte_end":165860,"line_start":299,"line_end":299,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165995,"byte_end":166004,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166415,"byte_end":166424,"line_start":326,"line_end":326,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167014,"byte_end":167023,"line_start":347,"line_end":347,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167699,"byte_end":167708,"line_start":370,"line_end":370,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167903,"byte_end":167912,"line_start":380,"line_end":380,"column_start":52,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168447,"byte_end":168456,"line_start":397,"line_end":397,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168526,"byte_end":168535,"line_start":404,"line_end":404,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/layoutfmt.rs","byte_start":178012,"byte_end":178018,"line_start":18,"line_end":18,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":176662,"byte_end":176668,"line_start":17,"line_end":17,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177009,"byte_end":177015,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179916,"byte_end":179927,"line_start":49,"line_end":49,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":180834,"byte_end":180845,"line_start":80,"line_end":80,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":180901,"byte_end":180908,"line_start":84,"line_end":84,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181553,"byte_end":181561,"line_start":115,"line_end":115,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":3699}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181865,"byte_end":181872,"line_start":128,"line_end":128,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":3700},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":183886,"byte_end":183898,"line_start":221,"line_end":221,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":184866,"byte_end":184878,"line_start":255,"line_end":255,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224296,"byte_end":224307,"line_start":41,"line_end":41,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225139,"byte_end":225150,"line_start":68,"line_end":68,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226521,"byte_end":226535,"line_start":124,"line_end":124,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":227373,"byte_end":227387,"line_start":151,"line_end":151,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229290,"byte_end":229297,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":230727,"byte_end":230734,"line_start":66,"line_end":66,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":232474,"byte_end":232479,"line_start":34,"line_end":34,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":233523,"byte_end":233528,"line_start":79,"line_end":79,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":234136,"byte_end":234144,"line_start":102,"line_end":102,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":234821,"byte_end":234829,"line_start":129,"line_end":129,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":186779,"byte_end":186787,"line_start":57,"line_end":57,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":187239,"byte_end":187247,"line_start":72,"line_end":72,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":188753,"byte_end":188761,"line_start":119,"line_end":119,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":189287,"byte_end":189295,"line_start":136,"line_end":136,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":190561,"byte_end":190573,"line_start":192,"line_end":192,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":190786,"byte_end":190798,"line_start":201,"line_end":201,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":191282,"byte_end":191294,"line_start":221,"line_end":221,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":191680,"byte_end":191692,"line_start":236,"line_end":236,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":192379,"byte_end":192383,"line_start":271,"line_end":271,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":192739,"byte_end":192746,"line_start":287,"line_end":287,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194115,"byte_end":194130,"line_start":339,"line_end":339,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194809,"byte_end":194820,"line_start":358,"line_end":358,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194962,"byte_end":194976,"line_start":366,"line_end":366,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195149,"byte_end":195153,"line_start":375,"line_end":375,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195626,"byte_end":195630,"line_start":393,"line_end":393,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195978,"byte_end":195982,"line_start":406,"line_end":406,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196148,"byte_end":196159,"line_start":415,"line_end":415,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196661,"byte_end":196672,"line_start":434,"line_end":434,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196812,"byte_end":196819,"line_start":442,"line_end":442,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197300,"byte_end":197307,"line_start":460,"line_end":460,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197659,"byte_end":197666,"line_start":473,"line_end":473,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197831,"byte_end":197846,"line_start":481,"line_end":481,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198345,"byte_end":198360,"line_start":501,"line_end":501,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198757,"byte_end":198772,"line_start":516,"line_end":516,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198911,"byte_end":198925,"line_start":525,"line_end":525,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199431,"byte_end":199445,"line_start":544,"line_end":544,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200085,"byte_end":200094,"line_start":575,"line_end":575,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200494,"byte_end":200503,"line_start":590,"line_end":590,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":201145,"byte_end":201157,"line_start":613,"line_end":613,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":201592,"byte_end":201604,"line_start":630,"line_end":630,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":202088,"byte_end":202100,"line_start":662,"line_end":662,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":203823,"byte_end":203835,"line_start":717,"line_end":717,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204298,"byte_end":204310,"line_start":738,"line_end":738,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205453,"byte_end":205461,"line_start":782,"line_end":782,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206291,"byte_end":206299,"line_start":812,"line_end":812,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206673,"byte_end":206681,"line_start":830,"line_end":830,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206936,"byte_end":206944,"line_start":842,"line_end":842,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207797,"byte_end":207808,"line_start":869,"line_end":869,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208650,"byte_end":208661,"line_start":899,"line_end":899,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209038,"byte_end":209049,"line_start":917,"line_end":917,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1709}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209304,"byte_end":209315,"line_start":929,"line_end":929,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209457,"byte_end":209465,"line_start":937,"line_end":937,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":3919}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":210595,"byte_end":210606,"line_start":984,"line_end":984,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":3920}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":213775,"byte_end":213789,"line_start":1096,"line_end":1096,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216728,"byte_end":216745,"line_start":1185,"line_end":1185,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":217887,"byte_end":217895,"line_start":1224,"line_end":1224,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":217945,"byte_end":217949,"line_start":1225,"line_end":1225,"column_start":43,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218006,"byte_end":218013,"line_start":1226,"line_end":1226,"column_start":43,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218077,"byte_end":218080,"line_start":1227,"line_end":1227,"column_start":50,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218166,"byte_end":218170,"line_start":1229,"line_end":1229,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218228,"byte_end":218235,"line_start":1230,"line_end":1230,"column_start":47,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218291,"byte_end":218296,"line_start":1231,"line_end":1231,"column_start":45,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218422,"byte_end":218433,"line_start":1233,"line_end":1233,"column_start":36,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218495,"byte_end":218507,"line_start":1234,"line_end":1234,"column_start":36,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236755,"byte_end":236756,"line_start":34,"line_end":34,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":238110,"byte_end":238118,"line_start":20,"line_end":20,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":238659,"byte_end":238667,"line_start":44,"line_end":44,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":239054,"byte_end":239062,"line_start":60,"line_end":60,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244478,"byte_end":244488,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245453,"byte_end":245462,"line_start":63,"line_end":63,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1882}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245588,"byte_end":245598,"line_start":70,"line_end":70,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245716,"byte_end":245726,"line_start":77,"line_end":77,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":246316,"byte_end":246326,"line_start":91,"line_end":91,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":246491,"byte_end":246501,"line_start":97,"line_end":97,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247402,"byte_end":247407,"line_start":21,"line_end":21,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247616,"byte_end":247627,"line_start":30,"line_end":30,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":248350,"byte_end":248351,"line_start":62,"line_end":62,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":248866,"byte_end":248871,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":249296,"byte_end":249301,"line_start":103,"line_end":103,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":253830,"byte_end":253839,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":254289,"byte_end":254298,"line_start":67,"line_end":67,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":4092}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":254776,"byte_end":254777,"line_start":85,"line_end":85,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255598,"byte_end":255599,"line_start":114,"line_end":114,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":260675,"byte_end":260684,"line_start":277,"line_end":277,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":4096},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":261757,"byte_end":261769,"line_start":329,"line_end":329,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":4097},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265403,"byte_end":265406,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266002,"byte_end":266005,"line_start":476,"line_end":476,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266603,"byte_end":266606,"line_start":495,"line_end":495,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":267779,"byte_end":267782,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2127},{"krate":0,"index":2130},{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277216,"byte_end":277225,"line_start":823,"line_end":823,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39988,"byte_end":40000,"line_start":1147,"line_end":1147,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40437,"byte_end":40445,"line_start":1165,"line_end":1165,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2261}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_clone.rs","byte_start":285192,"byte_end":285201,"line_start":11,"line_end":11,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2268},{"krate":0,"index":2269}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_clone.rs","byte_start":286014,"byte_end":286023,"line_start":36,"line_end":36,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":286901,"byte_end":286910,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2299}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289189,"byte_end":289198,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2303}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291164,"byte_end":291173,"line_start":165,"line_end":165,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2318},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":300986,"byte_end":300995,"line_start":48,"line_end":48,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2423},{"krate":0,"index":2425},{"krate":0,"index":2427},{"krate":0,"index":2429},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2455},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2484},{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2512},{"krate":0,"index":2519},{"krate":0,"index":2523},{"krate":0,"index":2528},{"krate":0,"index":2535},{"krate":0,"index":2539},{"krate":0,"index":2543},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2554},{"krate":0,"index":2558},{"krate":0,"index":2562},{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367156,"byte_end":367161,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2576}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368546,"byte_end":368551,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40660,"byte_end":40669,"line_start":1180,"line_end":1180,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2585},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_1d.rs","byte_start":369378,"byte_end":369387,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370193,"byte_end":370202,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372094,"byte_end":372103,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2623},{"krate":0,"index":2624}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374182,"byte_end":374191,"line_start":19,"line_end":19,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2655},{"krate":0,"index":2657}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384127,"byte_end":384136,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388513,"byte_end":388522,"line_start":167,"line_end":167,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2689},{"krate":0,"index":2690}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389158,"byte_end":389167,"line_start":188,"line_end":188,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2695},{"krate":0,"index":2696}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389733,"byte_end":389742,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2700}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":391001,"byte_end":391010,"line_start":249,"line_end":249,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2707}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":392905,"byte_end":392914,"line_start":307,"line_end":307,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2714},{"krate":0,"index":2715}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393491,"byte_end":393500,"line_start":329,"line_end":329,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410548,"byte_end":410555,"line_start":48,"line_end":48,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410588,"byte_end":410595,"line_start":49,"line_end":49,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":418630,"byte_end":418639,"line_start":284,"line_end":284,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2779},{"krate":0,"index":2780}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":419457,"byte_end":419466,"line_start":312,"line_end":312,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2793},{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423506,"byte_end":423515,"line_start":34,"line_end":34,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2839},{"krate":0,"index":2841},{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434293,"byte_end":434305,"line_start":330,"line_end":330,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2865},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2870},{"krate":0,"index":2872},{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":440124,"byte_end":440136,"line_start":481,"line_end":481,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":442090,"byte_end":442099,"line_start":543,"line_end":543,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":443194,"byte_end":443206,"line_start":586,"line_end":586,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":186103,"byte_end":186107,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1334}},{"kind":"Mod","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":6306,"byte_end":6313,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2169}},{"kind":"Mod","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":43384,"byte_end":43390,"line_start":1277,"line_end":1277,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2661}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":52651,"byte_end":52660,"line_start":48,"line_end":48,"column_start":28,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":2192}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":53175,"byte_end":53184,"line_start":67,"line_end":67,"column_start":31,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":2196}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":53755,"byte_end":53764,"line_start":84,"line_end":84,"column_start":48,"column_end":57},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1666}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":54463,"byte_end":54472,"line_start":110,"line_end":110,"column_start":19,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1671}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":54581,"byte_end":54590,"line_start":116,"line_end":116,"column_start":32,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":4891}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55310,"byte_end":55319,"line_start":150,"line_end":150,"column_start":33,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55525,"byte_end":55537,"line_start":161,"line_end":161,"column_start":33,"column_end":45},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2251},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":55748,"byte_end":55757,"line_start":172,"line_end":172,"column_start":31,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6447}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":56715,"byte_end":56724,"line_start":202,"line_end":202,"column_start":28,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":56849,"byte_end":56858,"line_start":207,"line_end":207,"column_start":28,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":57415,"byte_end":57424,"line_start":222,"line_end":222,"column_start":48,"column_end":57},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":57992,"byte_end":58001,"line_start":242,"line_end":242,"column_start":49,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2247},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":58429,"byte_end":58441,"line_start":256,"line_end":256,"column_start":52,"column_end":64},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2251},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59029,"byte_end":59041,"line_start":276,"line_end":276,"column_start":53,"column_end":65},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2251},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59708,"byte_end":59712,"line_start":306,"line_end":306,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":1855},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":59801,"byte_end":59802,"line_start":307,"line_end":307,"column_start":45,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":276},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arraytraits.rs","byte_start":60416,"byte_end":60425,"line_start":324,"line_end":324,"column_start":27,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1928}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":63516,"byte_end":63525,"line_start":91,"line_end":91,"column_start":61,"column_end":70},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6264}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":63869,"byte_end":63878,"line_start":103,"line_end":103,"column_start":57,"column_end":66},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":64590,"byte_end":64599,"line_start":123,"line_end":123,"column_start":63,"column_end":72},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6276}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":64952,"byte_end":64961,"line_start":135,"line_end":135,"column_start":63,"column_end":72},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6278}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":65313,"byte_end":65322,"line_start":146,"line_end":146,"column_start":63,"column_end":72},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6270}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/arrayformat.rs","byte_start":65669,"byte_end":65678,"line_start":158,"line_end":158,"column_start":59,"column_end":68},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":6268}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":66644,"byte_end":66649,"line_start":28,"line_end":28,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1945},"to":{"krate":0,"index":343}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67230,"byte_end":67234,"line_start":51,"line_end":51,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":343},"to":{"krate":0,"index":348}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":67630,"byte_end":67634,"line_start":71,"line_end":71,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":343},"to":{"krate":0,"index":352}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":68053,"byte_end":68065,"line_start":84,"line_end":84,"column_start":25,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":4386},"to":{"krate":0,"index":343}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":68636,"byte_end":68648,"line_start":107,"line_end":107,"column_start":28,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":4386},"to":{"krate":0,"index":348}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":69867,"byte_end":69879,"line_start":144,"line_end":144,"column_start":30,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":4386},"to":{"krate":0,"index":352}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70065,"byte_end":70074,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":343}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70384,"byte_end":70393,"line_start":167,"line_end":167,"column_start":28,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":348}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":70431,"byte_end":70440,"line_start":169,"line_end":169,"column_start":30,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":352}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71295,"byte_end":71303,"line_start":195,"line_end":195,"column_start":29,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":4393},"to":{"krate":0,"index":343}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71625,"byte_end":71633,"line_start":210,"line_end":210,"column_start":34,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":4393},"to":{"krate":0,"index":352}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":71788,"byte_end":71796,"line_start":216,"line_end":216,"column_start":29,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4393},"to":{"krate":0,"index":343}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72120,"byte_end":72128,"line_start":231,"line_end":231,"column_start":32,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4393},"to":{"krate":0,"index":348}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72319,"byte_end":72323,"line_start":238,"line_end":238,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":343},"to":{"krate":0,"index":402}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72739,"byte_end":72744,"line_start":253,"line_end":253,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1638},"to":{"krate":0,"index":405}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72747,"byte_end":72756,"line_start":253,"line_end":253,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":352},"to":{"krate":0,"index":405}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72792,"byte_end":72803,"line_start":255,"line_end":255,"column_start":31,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4386},"to":{"krate":0,"index":405}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72844,"byte_end":72852,"line_start":256,"line_end":256,"column_start":35,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4393},"to":{"krate":0,"index":405}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":72893,"byte_end":72902,"line_start":258,"line_end":258,"column_start":30,"column_end":39},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4376},"to":{"krate":0,"index":402}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/data_traits.rs","byte_start":73103,"byte_end":73115,"line_start":267,"line_end":267,"column_start":30,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":4386},"to":{"krate":0,"index":402}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axis.rs","byte_start":94141,"byte_end":94145,"line_start":21,"line_end":21,"column_start":6,"column_end":10},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96292,"byte_end":96294,"line_start":46,"line_end":46,"column_start":24,"column_end":26},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2229},"to":{"krate":0,"index":469}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96417,"byte_end":96418,"line_start":52,"line_end":52,"column_start":27,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":476},"to":{"krate":0,"index":469}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96551,"byte_end":96560,"line_start":58,"line_end":58,"column_start":24,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3260},"to":{"krate":0,"index":469}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/conversion.rs","byte_start":96693,"byte_end":96696,"line_start":64,"line_end":64,"column_start":24,"column_end":27},"kind":{"Impl":{"id":42}},"from":{"krate":5,"index":4319},"to":{"krate":0,"index":469}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100078,"byte_end":100081,"line_start":44,"line_end":44,"column_start":9,"column_end":12},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100582,"byte_end":100585,"line_start":65,"line_end":65,"column_start":34,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":1666}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100718,"byte_end":100721,"line_start":73,"line_end":73,"column_start":32,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":6447}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dim.rs","byte_start":100875,"byte_end":100878,"line_start":81,"line_end":81,"column_start":24,"column_end":27},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104390,"byte_end":104395,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1638},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104398,"byte_end":104400,"line_start":34,"line_end":34,"column_start":31,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1671},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104403,"byte_end":104408,"line_start":34,"line_end":34,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":6259},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104411,"byte_end":104415,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1940},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104418,"byte_end":104422,"line_start":34,"line_end":34,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1952},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104425,"byte_end":104432,"line_start":34,"line_end":34,"column_start":58,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":1928},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104439,"byte_end":104447,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2196},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104475,"byte_end":104478,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2005},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104504,"byte_end":104513,"line_start":37,"line_end":37,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2036},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104524,"byte_end":104533,"line_start":37,"line_end":37,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2036},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104550,"byte_end":104553,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2010},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104579,"byte_end":104588,"line_start":39,"line_end":39,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104599,"byte_end":104608,"line_start":39,"line_end":39,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104625,"byte_end":104628,"line_start":40,"line_end":40,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2015},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104651,"byte_end":104654,"line_start":40,"line_end":40,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2015},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104680,"byte_end":104689,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104700,"byte_end":104709,"line_start":41,"line_end":41,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":104722,"byte_end":104731,"line_start":41,"line_end":41,"column_start":47,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":114816,"byte_end":114819,"line_start":365,"line_end":365,"column_start":20,"column_end":23},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":115709,"byte_end":115712,"line_start":402,"line_end":402,"column_start":20,"column_end":23},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":118028,"byte_end":118031,"line_start":500,"line_end":500,"column_start":20,"column_end":23},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":121646,"byte_end":121649,"line_start":646,"line_end":646,"column_start":20,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":126681,"byte_end":126686,"line_start":815,"line_end":815,"column_start":20,"column_end":25},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":87},"to":{"krate":0,"index":571}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":127710,"byte_end":127713,"line_start":859,"line_end":859,"column_start":23,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":2192}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dimension_trait.rs","byte_start":127895,"byte_end":127898,"line_start":867,"line_end":867,"column_start":26,"column_end":29},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":2196}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":128261,"byte_end":128270,"line_start":19,"line_end":19,"column_start":19,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":2111}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":128654,"byte_end":128663,"line_start":34,"line_end":34,"column_start":22,"column_end":31},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":2124}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129101,"byte_end":129110,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":1928}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129226,"byte_end":129235,"line_start":58,"line_end":58,"column_start":22,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129564,"byte_end":129573,"line_start":72,"line_end":72,"column_start":22,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":129815,"byte_end":129824,"line_start":83,"line_end":83,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130020,"byte_end":130029,"line_start":93,"line_end":93,"column_start":25,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130267,"byte_end":130276,"line_start":104,"line_end":104,"column_start":20,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":1671}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":130318,"byte_end":130327,"line_start":106,"line_end":106,"column_start":34,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3247},"to":{"krate":2,"index":1666}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131040,"byte_end":131049,"line_start":126,"line_end":126,"column_start":22,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131074,"byte_end":131083,"line_start":127,"line_end":127,"column_start":22,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":131093,"byte_end":131102,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132492,"byte_end":132501,"line_start":170,"line_end":170,"column_start":29,"column_end":38},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132630,"byte_end":132639,"line_start":177,"line_end":177,"column_start":24,"column_end":33},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132769,"byte_end":132778,"line_start":184,"line_end":184,"column_start":22,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":2192}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":132958,"byte_end":132967,"line_start":193,"line_end":193,"column_start":25,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":2196}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133111,"byte_end":133120,"line_start":201,"line_end":201,"column_start":16,"column_end":25},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":2111}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133235,"byte_end":133244,"line_start":209,"line_end":209,"column_start":19,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3260},"to":{"krate":2,"index":2124}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133572,"byte_end":133575,"line_start":225,"line_end":225,"column_start":21,"column_end":24},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":879}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/dynindeximpl.rs","byte_start":133751,"byte_end":133756,"line_start":232,"line_end":232,"column_start":6,"column_end":11},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134566,"byte_end":134571,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":6259},"to":{"krate":0,"index":826}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":134766,"byte_end":134767,"line_start":31,"line_end":31,"column_start":31,"column_end":32},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":831},"to":{"krate":0,"index":826}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":136900,"byte_end":136902,"line_start":99,"line_end":99,"column_start":30,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2229},"to":{"krate":0,"index":826}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/ndindex.rs","byte_start":137219,"byte_end":137221,"line_start":110,"line_end":110,"column_start":32,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2229},"to":{"krate":0,"index":826}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141650,"byte_end":141659,"line_start":16,"line_end":16,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":571},"to":{"krate":0,"index":879}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141741,"byte_end":141744,"line_start":20,"line_end":20,"column_start":21,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":879}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/remove_axis.rs","byte_start":141911,"byte_end":141914,"line_start":28,"line_end":28,"column_start":21,"column_end":24},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3103},"to":{"krate":0,"index":879}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144059,"byte_end":144074,"line_start":49,"line_end":49,"column_start":6,"column_end":21},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144395,"byte_end":144399,"line_start":63,"line_end":63,"column_start":26,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":144946,"byte_end":144950,"line_start":84,"line_end":84,"column_start":37,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/axes.rs","byte_start":145259,"byte_end":145263,"line_start":97,"line_end":97,"column_start":16,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":1950},"to":{"krate":0,"index":911}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/dimension/mod.rs","byte_start":83299,"byte_end":83300,"line_start":273,"line_end":273,"column_start":26,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":945},"to":{"krate":0,"index":941}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":153031,"byte_end":153037,"line_start":229,"line_end":229,"column_start":26,"column_end":32},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":153143,"byte_end":153149,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/free_functions.rs","byte_start":154268,"byte_end":154274,"line_start":264,"line_end":264,"column_start":32,"column_end":38},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":94},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":157958,"byte_end":157963,"line_start":41,"line_end":41,"column_start":6,"column_end":11},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":160483,"byte_end":160495,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":161643,"byte_end":161655,"line_start":150,"line_end":150,"column_start":23,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":6264}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164438,"byte_end":164443,"line_start":238,"line_end":238,"column_start":26,"column_end":31},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3509},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164623,"byte_end":164635,"line_start":249,"line_end":249,"column_start":26,"column_end":38},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":164832,"byte_end":164844,"line_start":260,"line_end":260,"column_start":22,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3528},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165851,"byte_end":165860,"line_start":299,"line_end":299,"column_start":30,"column_end":39},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3617},"to":{"krate":2,"index":2111}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":165995,"byte_end":166004,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":166415,"byte_end":166424,"line_start":326,"line_end":326,"column_start":12,"column_end":21},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167014,"byte_end":167023,"line_start":347,"line_end":347,"column_start":20,"column_end":29},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167699,"byte_end":167708,"line_start":370,"line_end":370,"column_start":38,"column_end":47},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3617},"to":{"krate":2,"index":1849}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":167903,"byte_end":167912,"line_start":380,"line_end":380,"column_start":52,"column_end":61},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3617},"to":{"krate":2,"index":1849}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168447,"byte_end":168456,"line_start":397,"line_end":397,"column_start":21,"column_end":30},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3617},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/slice.rs","byte_start":168526,"byte_end":168535,"line_start":404,"line_end":404,"column_start":22,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3617},"to":{"krate":2,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/layoutfmt.rs","byte_start":178012,"byte_end":178018,"line_start":18,"line_end":18,"column_start":21,"column_end":27},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3663},"to":{"krate":2,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":176503,"byte_end":176508,"line_start":10,"line_end":10,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1945},"to":{"krate":0,"index":1101}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":176662,"byte_end":176668,"line_start":17,"line_end":17,"column_start":21,"column_end":27},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3663},"to":{"krate":0,"index":1101}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/layout/mod.rs","byte_start":177009,"byte_end":177015,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":179916,"byte_end":179927,"line_start":49,"line_end":49,"column_start":22,"column_end":33},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3669},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":180834,"byte_end":180845,"line_start":80,"line_end":80,"column_start":31,"column_end":42},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3669},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":180901,"byte_end":180908,"line_start":84,"line_end":84,"column_start":26,"column_end":33},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3676},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181553,"byte_end":181561,"line_start":115,"line_end":115,"column_start":20,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":2006}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":181865,"byte_end":181872,"line_start":128,"line_end":128,"column_start":42,"column_end":49},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3676},"to":{"krate":0,"index":1992}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":183886,"byte_end":183898,"line_start":221,"line_end":221,"column_start":22,"column_end":34},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3701},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/indexes.rs","byte_start":184866,"byte_end":184878,"line_start":255,"line_end":255,"column_start":31,"column_end":43},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3701},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":224296,"byte_end":224307,"line_start":41,"line_end":41,"column_start":27,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":225139,"byte_end":225150,"line_start":68,"line_end":68,"column_start":33,"column_end":44},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1199},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":226521,"byte_end":226535,"line_start":124,"line_end":124,"column_start":27,"column_end":41},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/chunks.rs","byte_start":227373,"byte_end":227387,"line_start":151,"line_end":151,"column_start":33,"column_end":47},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1226},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":229290,"byte_end":229297,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/windows.rs","byte_start":230727,"byte_end":230734,"line_start":66,"line_end":66,"column_start":33,"column_end":40},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1259},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":232474,"byte_end":232479,"line_start":34,"line_end":34,"column_start":27,"column_end":32},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":233523,"byte_end":233528,"line_start":79,"line_end":79,"column_start":33,"column_end":38},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1294},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":234136,"byte_end":234144,"line_start":102,"line_end":102,"column_start":27,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/lanes.rs","byte_start":234821,"byte_end":234829,"line_start":129,"line_end":129,"column_start":33,"column_end":41},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1314},"to":{"krate":2,"index":4895}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":186779,"byte_end":186787,"line_start":57,"line_end":57,"column_start":23,"column_end":31},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":187239,"byte_end":187247,"line_start":72,"line_end":72,"column_start":36,"column_end":44},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":188753,"byte_end":188761,"line_start":119,"line_end":119,"column_start":49,"column_end":57},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":189287,"byte_end":189295,"line_start":136,"line_end":136,"column_start":33,"column_end":41},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":190561,"byte_end":190573,"line_start":192,"line_end":192,"column_start":27,"column_end":39},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":190786,"byte_end":190798,"line_start":201,"line_end":201,"column_start":40,"column_end":52},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":191282,"byte_end":191294,"line_start":221,"line_end":221,"column_start":37,"column_end":49},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":191680,"byte_end":191692,"line_start":236,"line_end":236,"column_start":38,"column_end":50},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":192379,"byte_end":192383,"line_start":271,"line_end":271,"column_start":16,"column_end":20},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":192739,"byte_end":192746,"line_start":287,"line_end":287,"column_start":16,"column_end":23},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194115,"byte_end":194130,"line_start":339,"line_end":339,"column_start":27,"column_end":42},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194809,"byte_end":194820,"line_start":358,"line_end":358,"column_start":16,"column_end":27},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":194962,"byte_end":194976,"line_start":366,"line_end":366,"column_start":16,"column_end":30},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195149,"byte_end":195153,"line_start":375,"line_end":375,"column_start":40,"column_end":44},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1461},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195626,"byte_end":195630,"line_start":393,"line_end":393,"column_start":37,"column_end":41},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1461},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":195978,"byte_end":195982,"line_start":406,"line_end":406,"column_start":38,"column_end":42},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1461},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196148,"byte_end":196159,"line_start":415,"line_end":415,"column_start":40,"column_end":51},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3870},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196661,"byte_end":196672,"line_start":434,"line_end":434,"column_start":38,"column_end":49},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3870},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":196812,"byte_end":196819,"line_start":442,"line_end":442,"column_start":40,"column_end":47},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1472},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197300,"byte_end":197307,"line_start":460,"line_end":460,"column_start":37,"column_end":44},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1472},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197659,"byte_end":197666,"line_start":473,"line_end":473,"column_start":38,"column_end":45},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1472},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":197831,"byte_end":197846,"line_start":481,"line_end":481,"column_start":40,"column_end":55},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198345,"byte_end":198360,"line_start":501,"line_end":501,"column_start":37,"column_end":52},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198757,"byte_end":198772,"line_start":516,"line_end":516,"column_start":38,"column_end":53},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":198911,"byte_end":198925,"line_start":525,"line_end":525,"column_start":40,"column_end":54},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1488},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":199431,"byte_end":199445,"line_start":544,"line_end":544,"column_start":38,"column_end":52},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1488},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200085,"byte_end":200094,"line_start":575,"line_end":575,"column_start":29,"column_end":38},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1598},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":200494,"byte_end":200503,"line_start":590,"line_end":590,"column_start":38,"column_end":47},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1598},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":201145,"byte_end":201157,"line_start":613,"line_end":613,"column_start":29,"column_end":41},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1619},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":201592,"byte_end":201604,"line_start":630,"line_end":630,"column_start":38,"column_end":50},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1619},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":202088,"byte_end":202100,"line_start":662,"line_end":662,"column_start":23,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":3886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":203823,"byte_end":203835,"line_start":717,"line_end":717,"column_start":25,"column_end":37},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":3886},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":204298,"byte_end":204310,"line_start":738,"line_end":738,"column_start":36,"column_end":48},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3886},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":205453,"byte_end":205461,"line_start":782,"line_end":782,"column_start":27,"column_end":35},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":3903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206291,"byte_end":206299,"line_start":812,"line_end":812,"column_start":29,"column_end":37},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":3903},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206673,"byte_end":206681,"line_start":830,"line_end":830,"column_start":40,"column_end":48},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":3903},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":206936,"byte_end":206944,"line_start":842,"line_end":842,"column_start":38,"column_end":46},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3903},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":207797,"byte_end":207808,"line_start":869,"line_end":869,"column_start":27,"column_end":38},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":208650,"byte_end":208661,"line_start":899,"line_end":899,"column_start":29,"column_end":40},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1684},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209038,"byte_end":209049,"line_start":917,"line_end":917,"column_start":40,"column_end":51},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1684},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209304,"byte_end":209315,"line_start":929,"line_end":929,"column_start":38,"column_end":49},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1684},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":209457,"byte_end":209465,"line_start":937,"line_end":937,"column_start":42,"column_end":50},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":3903},"to":{"krate":0,"index":1992}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":210595,"byte_end":210606,"line_start":984,"line_end":984,"column_start":42,"column_end":53},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1684},"to":{"krate":0,"index":1992}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":213775,"byte_end":213789,"line_start":1096,"line_end":1096,"column_start":27,"column_end":41},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":216728,"byte_end":216745,"line_start":1185,"line_end":1185,"column_start":27,"column_end":44},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":217887,"byte_end":217895,"line_start":1224,"line_end":1224,"column_start":36,"column_end":44},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1841},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":217945,"byte_end":217949,"line_start":1225,"line_end":1225,"column_start":43,"column_end":47},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1461},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218006,"byte_end":218013,"line_start":1226,"line_end":1226,"column_start":43,"column_end":50},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1472},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218077,"byte_end":218080,"line_start":1227,"line_end":1227,"column_start":50,"column_end":53},"kind":{"Impl":{"id":228}},"from":{"krate":2,"index":29528},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218166,"byte_end":218170,"line_start":1229,"line_end":1229,"column_start":47,"column_end":51},"kind":{"Impl":{"id":229}},"from":{"krate":2,"index":6955},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218228,"byte_end":218235,"line_start":1230,"line_end":1230,"column_start":47,"column_end":54},"kind":{"Impl":{"id":230}},"from":{"krate":2,"index":6978},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218291,"byte_end":218296,"line_start":1231,"line_end":1231,"column_start":45,"column_end":50},"kind":{"Impl":{"id":231}},"from":{"krate":2,"index":28893},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218422,"byte_end":218433,"line_start":1233,"line_end":1233,"column_start":36,"column_end":47},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3669},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/iterators/mod.rs","byte_start":218495,"byte_end":218507,"line_start":1234,"line_end":1234,"column_start":36,"column_end":48},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3701},"to":{"krate":0,"index":1778}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236611,"byte_end":236615,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1950},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236622,"byte_end":236626,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":20,"index":295},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236629,"byte_end":236632,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":20,"index":305},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236639,"byte_end":236642,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2005},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236662,"byte_end":236665,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2010},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236685,"byte_end":236688,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2015},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236708,"byte_end":236711,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":2,"index":2020},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":236755,"byte_end":236756,"line_start":34,"line_end":34,"column_start":26,"column_end":27},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1835},"to":{"krate":0,"index":1833}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237292,"byte_end":237297,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":20,"index":228},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237304,"byte_end":237313,"line_start":55,"line_end":55,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":2036},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237316,"byte_end":237325,"line_start":55,"line_end":55,"column_start":17,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237328,"byte_end":237337,"line_start":55,"line_end":55,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2044},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237340,"byte_end":237349,"line_start":55,"line_end":55,"column_start":41,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":2048},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237352,"byte_end":237361,"line_start":55,"line_end":55,"column_start":53,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":2052},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237373,"byte_end":237380,"line_start":56,"line_end":56,"column_start":10,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":6264},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237388,"byte_end":237393,"line_start":56,"line_end":56,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":6259},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237401,"byte_end":237409,"line_start":56,"line_end":56,"column_start":38,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":6276},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237417,"byte_end":237425,"line_start":56,"line_end":56,"column_start":54,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":6278},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237432,"byte_end":237445,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":2748},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237448,"byte_end":237460,"line_start":57,"line_end":57,"column_start":21,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1833},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237463,"byte_end":237467,"line_start":57,"line_end":57,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1940},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg_traits.rs","byte_start":237470,"byte_end":237474,"line_start":57,"line_end":57,"column_start":43,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1952},"to":{"krate":0,"index":1836}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":238110,"byte_end":238118,"line_start":20,"line_end":20,"column_start":22,"column_end":30},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1841},"to":{"krate":2,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":238659,"byte_end":238667,"line_start":44,"line_end":44,"column_start":33,"column_end":41},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1841},"to":{"krate":2,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linspace.rs","byte_start":239054,"byte_end":239062,"line_start":60,"line_end":60,"column_start":31,"column_end":39},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1841},"to":{"krate":2,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":244478,"byte_end":244488,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245453,"byte_end":245462,"line_start":63,"line_end":63,"column_start":20,"column_end":29},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":4070},"to":{"krate":2,"index":1666}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245588,"byte_end":245598,"line_start":70,"line_end":70,"column_start":20,"column_end":30},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4066},"to":{"krate":2,"index":1666}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":245716,"byte_end":245726,"line_start":77,"line_end":77,"column_start":16,"column_end":26},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":4066},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":246316,"byte_end":246326,"line_start":91,"line_end":91,"column_start":23,"column_end":33},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4066},"to":{"krate":2,"index":6264}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/error.rs","byte_start":246491,"byte_end":246501,"line_start":97,"line_end":97,"column_start":21,"column_end":31},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":4066},"to":{"krate":2,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247402,"byte_end":247407,"line_start":21,"line_end":21,"column_start":21,"column_end":26},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":6386},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":247616,"byte_end":247627,"line_start":30,"line_end":30,"column_start":24,"column_end":35},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":248350,"byte_end":248351,"line_start":62,"line_end":62,"column_start":26,"column_end":27},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1915},"to":{"krate":0,"index":1900}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":248866,"byte_end":248871,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":6386},"to":{"krate":0,"index":1900}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/shape_builder.rs","byte_start":249296,"byte_end":249301,"line_start":103,"line_end":103,"column_start":9,"column_end":14},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":6386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":253830,"byte_end":253839,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":254289,"byte_end":254298,"line_start":67,"line_end":67,"column_start":36,"column_end":45},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2247},"to":{"krate":0,"index":1961}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":254693,"byte_end":254698,"line_start":81,"line_end":81,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1945},"to":{"krate":0,"index":1976}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":254776,"byte_end":254777,"line_start":85,"line_end":85,"column_start":24,"column_end":25},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1979},"to":{"krate":0,"index":1976}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":255598,"byte_end":255599,"line_start":114,"line_end":114,"column_start":28,"column_end":29},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1987},"to":{"krate":0,"index":1981}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":257934,"byte_end":257938,"line_start":182,"line_end":182,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1950},"to":{"krate":0,"index":2006}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":258282,"byte_end":258287,"line_start":196,"line_end":196,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1945},"to":{"krate":0,"index":2013}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":260675,"byte_end":260684,"line_start":277,"line_end":277,"column_start":42,"column_end":51},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2247},"to":{"krate":0,"index":1992}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":261757,"byte_end":261769,"line_start":329,"line_end":329,"column_start":42,"column_end":54},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2251},"to":{"krate":0,"index":1992}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":265403,"byte_end":265406,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":4098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266002,"byte_end":266005,"line_start":476,"line_end":476,"column_start":12,"column_end":15},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":4098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":266603,"byte_end":266606,"line_start":495,"line_end":495,"column_start":16,"column_end":19},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":4098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":267779,"byte_end":267782,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":4098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/zip/mod.rs","byte_start":277216,"byte_end":277225,"line_start":823,"line_end":823,"column_start":9,"column_end":18},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":4360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":39988,"byte_end":40000,"line_start":1147,"line_end":1147,"column_start":19,"column_end":31},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":4386},"to":{"krate":2,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40437,"byte_end":40445,"line_start":1165,"line_end":1165,"column_start":9,"column_end":17},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":4393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_clone.rs","byte_start":285192,"byte_end":285201,"line_start":11,"line_end":11,"column_start":40,"column_end":49},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_clone.rs","byte_start":286014,"byte_end":286023,"line_start":36,"line_end":36,"column_start":45,"column_end":54},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":1950}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":286901,"byte_end":286910,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":289189,"byte_end":289198,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_constructors.rs","byte_start":291164,"byte_end":291173,"line_start":165,"line_end":165,"column_start":15,"column_end":24},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_methods.rs","byte_start":300986,"byte_end":300995,"line_start":48,"line_end":48,"column_start":15,"column_end":24},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":367156,"byte_end":367161,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_owned_array.rs","byte_start":368546,"byte_end":368551,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/lib.rs","byte_start":40660,"byte_end":40669,"line_start":1180,"line_end":1180,"column_start":15,"column_end":24},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_1d.rs","byte_start":369378,"byte_end":369387,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_2d.rs","byte_start":370193,"byte_end":370202,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_dyn.rs","byte_start":372094,"byte_end":372103,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/numeric/impl_numeric.rs","byte_start":374182,"byte_end":374191,"line_start":19,"line_end":19,"column_start":15,"column_end":24},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":384127,"byte_end":384136,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":388513,"byte_end":388522,"line_start":167,"line_end":167,"column_start":44,"column_end":53},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":2681}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389158,"byte_end":389167,"line_start":188,"line_end":188,"column_start":44,"column_end":53},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":2681}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":389733,"byte_end":389742,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":391001,"byte_end":391010,"line_start":249,"line_end":249,"column_start":44,"column_end":53},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":2681}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":392905,"byte_end":392914,"line_start":307,"line_end":307,"column_start":44,"column_end":53},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2231},"to":{"krate":0,"index":2681}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/linalg/impl_linalg.rs","byte_start":393491,"byte_end":393500,"line_start":329,"line_end":329,"column_start":15,"column_end":24},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410045,"byte_end":410050,"line_start":32,"line_end":32,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1638},"to":{"krate":0,"index":2748}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410548,"byte_end":410555,"line_start":48,"line_end":48,"column_start":24,"column_end":31},"kind":{"Impl":{"id":299}},"from":{"krate":21,"index":565},"to":{"krate":0,"index":2748}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":410588,"byte_end":410595,"line_start":49,"line_end":49,"column_start":24,"column_end":31},"kind":{"Impl":{"id":300}},"from":{"krate":21,"index":565},"to":{"krate":0,"index":2748}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":418630,"byte_end":418639,"line_start":284,"line_end":284,"column_start":27,"column_end":36},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":2032}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_ops.rs","byte_start":419457,"byte_end":419466,"line_start":312,"line_end":312,"column_start":27,"column_end":36},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":2231},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":423506,"byte_end":423515,"line_start":34,"line_end":34,"column_start":16,"column_end":25},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":2247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":434293,"byte_end":434305,"line_start":330,"line_end":330,"column_start":16,"column_end":28},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":2251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":440124,"byte_end":440136,"line_start":481,"line_end":481,"column_start":38,"column_end":50},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":2251},"to":{"krate":0,"index":2843}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":442090,"byte_end":442099,"line_start":543,"line_end":543,"column_start":16,"column_end":25},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":2247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.12.1/src/impl_views.rs","byte_start":443194,"byte_end":443206,"line_start":586,"line_end":586,"column_start":16,"column_end":28},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":2251},"to":{"krate":4294967295,"index":4294967295}}]}