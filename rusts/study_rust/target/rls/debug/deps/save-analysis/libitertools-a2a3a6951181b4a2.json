{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11","program":"/Users/lmq/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","itertools","/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=a2a3a6951181b4a2","-C","extra-filename=-a2a3a6951181b4a2","--out-dir","/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps","-L","dependency=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps","--extern","either=/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libeither-b34dd5d65d2df8b8.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/lmq/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/lmq/Documents/code/github/myself/tommyjarvis/rusts/study_rust/target/rls/debug/deps/libitertools-a2a3a6951181b4a2.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[17646519499586679624,5604900302350197222]},"crate_root":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src","external_crates":[{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[708786888276500661,1869679905933516582]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17797614960292103009,1417850245447323047]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6720920595826051040,11215649358134471660]}},{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","num":4,"id":{"name":"either","disambiguator":[10401463782313016052,9782655421637807745]}}],"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":0,"byte_end":70486,"line_start":1,"line_end":2121,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":161},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":825,"byte_end":831,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":3239},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1164,"byte_end":1168,"line_start":49,"line_end":49,"column_start":14,"column_end":18},"alias_span":null,"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1268,"byte_end":1273,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1283,"byte_end":1293,"line_start":55,"line_end":55,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":966},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1303,"byte_end":1321,"line_start":56,"line_end":56,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1331,"byte_end":1338,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":980},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1348,"byte_end":1355,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1005},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1365,"byte_end":1373,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1015},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1383,"byte_end":1387,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1397,"byte_end":1407,"line_start":61,"line_end":61,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":171},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1417,"byte_end":1422,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1432,"byte_end":1439,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1449,"byte_end":1461,"line_start":64,"line_end":64,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1040},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1471,"byte_end":1480,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":223},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1490,"byte_end":1498,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1049},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1508,"byte_end":1525,"line_start":67,"line_end":67,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1535,"byte_end":1542,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":355},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1552,"byte_end":1561,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1571,"byte_end":1577,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1339},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1756,"byte_end":1766,"line_start":76,"line_end":76,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1347},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1789,"byte_end":1795,"line_start":77,"line_end":77,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1797,"byte_end":1807,"line_start":77,"line_end":77,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1945,"byte_end":1956,"line_start":80,"line_end":80,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2059,"byte_end":2070,"line_start":83,"line_end":83,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1431},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2165,"byte_end":2173,"line_start":86,"line_end":86,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":601},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2207,"byte_end":2223,"line_start":87,"line_end":87,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1477},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2259,"byte_end":2273,"line_start":88,"line_end":88,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2432,"byte_end":2439,"line_start":93,"line_end":93,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2463,"byte_end":2473,"line_start":94,"line_end":94,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1497},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2475,"byte_end":2481,"line_start":94,"line_end":94,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1506},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2483,"byte_end":2490,"line_start":94,"line_end":94,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1516},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2572,"byte_end":2583,"line_start":97,"line_end":97,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1523},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2585,"byte_end":2597,"line_start":97,"line_end":97,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":717},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2599,"byte_end":2605,"line_start":97,"line_end":97,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":757},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2712,"byte_end":2724,"line_start":100,"line_end":100,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1608},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2751,"byte_end":2756,"line_start":101,"line_end":101,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1621},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2783,"byte_end":2793,"line_start":102,"line_end":102,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1634},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2817,"byte_end":2820,"line_start":103,"line_end":103,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2841,"byte_end":2842,"line_start":105,"line_end":105,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"Interleave, ZipEq, Positions, Coalesce, MergeBy, ZipLongest, Step, Intersperse, Tuples, Product, Dedup, PadUsing, FormatWith, Flatten, PeekingTakeWhile, Merge, Batching, InterleaveShortest, MergeJoinBy, TupleWindows, WhileSome, WithPosition, Format, Update, TupleCombinations, TakeWhileRef, MapResults, PutBack","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2862,"byte_end":2869,"line_start":106,"line_end":106,"column_start":19,"column_end":26},"alias_span":null,"name":"flatten","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2892,"byte_end":2898,"line_start":107,"line_end":107,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":465},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2926,"byte_end":2937,"line_start":108,"line_end":108,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2953,"byte_end":2962,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":471},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2978,"byte_end":2982,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1406},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3062,"byte_end":3074,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3104,"byte_end":3115,"line_start":114,"line_end":114,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":627},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3147,"byte_end":3162,"line_start":115,"line_end":115,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":635},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3181,"byte_end":3189,"line_start":116,"line_end":116,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3209,"byte_end":3220,"line_start":117,"line_end":117,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":678},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3222,"byte_end":3228,"line_start":117,"line_end":117,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":701},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3230,"byte_end":3237,"line_start":117,"line_end":117,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1580},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3263,"byte_end":3271,"line_start":118,"line_end":118,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3291,"byte_end":3299,"line_start":119,"line_end":119,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1153},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3359,"byte_end":3371,"line_start":122,"line_end":122,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112847,"byte_end":112857,"line_start":13,"line_end":13,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112863,"byte_end":112868,"line_start":14,"line_end":14,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112874,"byte_end":112882,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113093,"byte_end":113099,"line_start":23,"line_end":23,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":0,"index":537},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113121,"byte_end":113134,"line_start":24,"line_end":24,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":414}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":2841,"byte_end":2842,"line_start":105,"line_end":105,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"merge, interleave, zip_eq, merge_join_by, fold","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":0,"byte_end":70486,"line_start":1,"line_end":2121,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":402},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":459},{"krate":0,"index":468},{"krate":0,"index":492},{"krate":0,"index":519},{"krate":0,"index":529},{"krate":0,"index":559},{"krate":0,"index":568},{"krate":0,"index":587},{"krate":0,"index":618},{"krate":0,"index":634},{"krate":0,"index":647},{"krate":0,"index":661},{"krate":0,"index":704},{"krate":0,"index":753},{"krate":0,"index":773},{"krate":0,"index":787},{"krate":0,"index":811},{"krate":0,"index":819},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":1807},{"krate":0,"index":1832},{"krate":0,"index":1829},{"krate":0,"index":1826},{"krate":0,"index":1821},{"krate":0,"index":1823},{"krate":0,"index":1815},{"krate":0,"index":1817},{"krate":0,"index":948}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":88,"byte_end":94,"line_start":3,"line_end":3,"column_start":39,"column_end":45}},{"value":"/ Itertools — extra iterator adaptors, functions and macros.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":98,"byte_end":162,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":163,"byte_end":166,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ To use the iterator methods in this crate, import the [`Itertools` trait](./trait.Itertools.html):","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":167,"byte_end":269,"line_start":7,"line_end":7,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":270,"byte_end":273,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":274,"byte_end":281,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":282,"byte_end":311,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":312,"byte_end":319,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":320,"byte_end":323,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":324,"byte_end":345,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":346,"byte_end":349,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ - `use_std`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":350,"byte_end":365,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/   - Enabled by default.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":366,"byte_end":393,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/   - Disable to compile itertools using `#![no_std]`. This disables","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":394,"byte_end":464,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/     any items that depend on collections (like `group_by`, `unique`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":465,"byte_end":537,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/     `kmerge`, `join` and many more).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":538,"byte_end":578,"line_start":19,"line_end":19,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":579,"byte_end":582,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":583,"byte_end":602,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":603,"byte_end":606,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.12 or later.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":607,"byte_end":665,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":666,"byte_end":669,"line_start":24,"line_end":24,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1226,"byte_end":1233,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":1185,"byte_end":1217,"line_start":51,"line_end":51,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":952},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71898,"byte_end":71908,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71568,"byte_end":71646,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71647,"byte_end":71659,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71660,"byte_end":71663,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71664,"byte_end":71693,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71694,"byte_end":71697,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](../trait.Itertools.html#method.interleave) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71698,"byte_end":71788,"line_start":33,"line_end":33,"column_start":1,"column_end":91}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71813,"byte_end":71886,"line_start":35,"line_end":35,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72238,"byte_end":72248,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"pub fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":71968,"byte_end":72032,"line_start":42,"line_end":42,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72033,"byte_end":72036,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.interleave(j)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72037,"byte_end":72093,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72094,"byte_end":72097,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72098,"byte_end":72105,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72106,"byte_end":72136,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72137,"byte_end":72140,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72141,"byte_end":72192,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72193,"byte_end":72216,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72217,"byte_end":72222,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72223,"byte_end":72230,"line_start":52,"line_end":52,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":966},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73513,"byte_end":73531,"line_start":99,"line_end":99,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73149,"byte_end":73226,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73227,"byte_end":73252,"line_start":91,"line_end":91,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73253,"byte_end":73256,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73257,"byte_end":73286,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73287,"byte_end":73290,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](../trait.Itertools.html#method.interleave_shortest)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73291,"byte_end":73377,"line_start":95,"line_end":95,"column_start":1,"column_end":87}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73378,"byte_end":73403,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73428,"byte_end":73501,"line_start":98,"line_end":98,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":980},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":75933,"byte_end":75940,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":75781,"byte_end":75838,"line_start":184,"line_end":184,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":75839,"byte_end":75877,"line_start":185,"line_end":185,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":75878,"byte_end":75881,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":75882,"byte_end":75921,"line_start":187,"line_end":187,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76077,"byte_end":76085,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"pub fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76010,"byte_end":76069,"line_start":195,"line_end":195,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76334,"byte_end":76344,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"pub fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76279,"byte_end":76322,"line_start":208,"line_end":208,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76500,"byte_end":76510,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"pub fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76435,"byte_end":76474,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76479,"byte_end":76488,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76775,"byte_end":76783,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76613,"byte_end":76670,"line_start":221,"line_end":221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76675,"byte_end":76678,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76683,"byte_end":76749,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76754,"byte_end":76763,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":990},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78244,"byte_end":78251,"line_start":277,"line_end":277,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":77876,"byte_end":77943,"line_start":270,"line_end":270,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":77944,"byte_end":77994,"line_start":271,"line_end":271,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":77995,"byte_end":77998,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":77999,"byte_end":78049,"line_start":273,"line_end":273,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78050,"byte_end":78053,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](../trait.Itertools.html#method.cartesian_product) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78054,"byte_end":78158,"line_start":275,"line_end":275,"column_start":1,"column_end":105}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78159,"byte_end":78232,"line_start":276,"line_end":276,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81091,"byte_end":81099,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80643,"byte_end":80726,"line_start":365,"line_end":365,"column_start":1,"column_end":80}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80727,"byte_end":80815,"line_start":366,"line_end":366,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80816,"byte_end":80819,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80820,"byte_end":80897,"line_start":368,"line_end":368,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80898,"byte_end":80901,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](../trait.Itertools.html#method.batching) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":80902,"byte_end":80988,"line_start":370,"line_end":370,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81006,"byte_end":81079,"line_start":372,"line_end":372,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1015},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":82140,"byte_end":82144,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81728,"byte_end":81801,"line_start":404,"line_end":404,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81802,"byte_end":81825,"line_start":405,"line_end":405,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81826,"byte_end":81829,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81830,"byte_end":81905,"line_start":407,"line_end":407,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81906,"byte_end":81947,"line_start":408,"line_end":408,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81948,"byte_end":81951,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](../trait.Itertools.html#method.step) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81952,"byte_end":82030,"line_start":410,"line_end":410,"column_start":1,"column_end":79}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":82055,"byte_end":82128,"line_start":412,"line_end":412,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":171},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84892,"byte_end":84897,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":174}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84523,"byte_end":84601,"line_start":520,"line_end":520,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84602,"byte_end":84674,"line_start":521,"line_end":521,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84675,"byte_end":84678,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84679,"byte_end":84718,"line_start":523,"line_end":523,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84719,"byte_end":84722,"line_start":524,"line_end":524,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84723,"byte_end":84806,"line_start":525,"line_end":525,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":84807,"byte_end":84880,"line_start":526,"line_end":526,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85685,"byte_end":85690,"line_start":563,"line_end":563,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"pub fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85435,"byte_end":85494,"line_start":552,"line_end":552,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85495,"byte_end":85498,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.merge(j)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85499,"byte_end":85550,"line_start":554,"line_end":554,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85551,"byte_end":85554,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85555,"byte_end":85562,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85563,"byte_end":85588,"line_start":557,"line_end":557,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85589,"byte_end":85592,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85593,"byte_end":85639,"line_start":559,"line_end":559,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85640,"byte_end":85663,"line_start":560,"line_end":560,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85664,"byte_end":85669,"line_start":561,"line_end":561,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85670,"byte_end":85677,"line_start":562,"line_end":562,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":192},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86763,"byte_end":86770,"line_start":600,"line_end":600,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86391,"byte_end":86469,"line_start":593,"line_end":593,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86470,"byte_end":86542,"line_start":594,"line_end":594,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86543,"byte_end":86546,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86547,"byte_end":86586,"line_start":596,"line_end":596,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86587,"byte_end":86590,"line_start":597,"line_end":597,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86591,"byte_end":86677,"line_start":598,"line_end":598,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86678,"byte_end":86751,"line_start":599,"line_end":599,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":223},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89321,"byte_end":89329,"line_start":701,"line_end":701,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89079,"byte_end":89144,"line_start":697,"line_end":697,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89145,"byte_end":89148,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](../trait.Itertools.html#method.coalesce) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89149,"byte_end":89235,"line_start":699,"line_end":699,"column_start":1,"column_end":87}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89236,"byte_end":89309,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90560,"byte_end":90565,"line_start":756,"line_end":756,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":246}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90332,"byte_end":90389,"line_start":752,"line_end":752,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90390,"byte_end":90393,"line_start":753,"line_end":753,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](../trait.Itertools.html#method.dedup) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90394,"byte_end":90474,"line_start":754,"line_end":754,"column_start":1,"column_end":81}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90475,"byte_end":90548,"line_start":755,"line_end":755,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":264},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92276,"byte_end":92288,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":91956,"byte_end":92021,"line_start":824,"line_end":824,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92022,"byte_end":92087,"line_start":825,"line_end":825,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92088,"byte_end":92091,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](../trait.Itertools.html#method.take_while_ref) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92092,"byte_end":92190,"line_start":827,"line_end":827,"column_start":1,"column_end":99}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92191,"byte_end":92264,"line_start":828,"line_end":828,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1040},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93661,"byte_end":93670,"line_start":880,"line_end":880,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1042}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93329,"byte_end":93395,"line_start":874,"line_end":874,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93396,"byte_end":93456,"line_start":875,"line_end":875,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93457,"byte_end":93460,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](../trait.Itertools.html#method.while_some) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93461,"byte_end":93551,"line_start":877,"line_end":877,"column_start":1,"column_end":91}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93576,"byte_end":93649,"line_start":879,"line_end":879,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94521,"byte_end":94538,"line_start":914,"line_end":914,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94180,"byte_end":94279,"line_start":907,"line_end":907,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94280,"byte_end":94303,"line_start":908,"line_end":908,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94304,"byte_end":94307,"line_start":909,"line_end":909,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](../trait.Itertools.html#method.tuple_combinations) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94308,"byte_end":94401,"line_start":910,"line_end":910,"column_start":1,"column_end":94}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94402,"byte_end":94418,"line_start":911,"line_end":911,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94436,"byte_end":94509,"line_start":913,"line_end":913,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94689,"byte_end":94703,"line_start":923,"line_end":923,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":294}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94725,"byte_end":94736,"line_start":924,"line_end":924,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95357,"byte_end":95374,"line_start":952,"line_end":952,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1061}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97595,"byte_end":97612,"line_start":1033,"line_end":1033,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1107},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97671,"byte_end":97688,"line_start":1034,"line_end":1034,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97752,"byte_end":97769,"line_start":1035,"line_end":1035,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98068,"byte_end":98075,"line_start":1043,"line_end":1043,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"/ An iterator adapter to simply flatten a structure.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97815,"byte_end":97869,"line_start":1038,"line_end":1038,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97870,"byte_end":97873,"line_start":1039,"line_end":1039,"column_start":1,"column_end":4}},{"value":"/ See [`.flatten()`](../trait.Itertools.html#method.flatten) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97874,"byte_end":97958,"line_start":1040,"line_end":1040,"column_start":1,"column_end":85}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":97983,"byte_end":98056,"line_start":1042,"line_end":1042,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98660,"byte_end":98667,"line_start":1066,"line_end":1066,"column_start":8,"column_end":15},"name":"flatten","qualname":"::adaptors::flatten","value":"pub fn flatten<I, J>(I) -> Flatten<I::IntoIter, J> where I: IntoIterator,\nI::Item: IntoIterator<IntoIter = J, Item = J>, J: Iterator","parent":null,"children":[],"decl_id":null,"docs":" Flatten an iterable of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[{"value":"/ Flatten an iterable of iterables into a single combined sequence of all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98122,"byte_end":98197,"line_start":1048,"line_end":1048,"column_start":1,"column_end":76}},{"value":"/ the elements in the iterables.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98198,"byte_end":98232,"line_start":1049,"line_end":1049,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98233,"byte_end":98236,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ This is more or less equivalent to `.flat_map` with an identity","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98237,"byte_end":98304,"line_start":1051,"line_end":1051,"column_start":1,"column_end":68}},{"value":"/ function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98305,"byte_end":98318,"line_start":1052,"line_end":1052,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98319,"byte_end":98322,"line_start":1053,"line_end":1053,"column_start":1,"column_end":4}},{"value":"/ This is an `IntoIterator`-enabled version of the [`.flatten()`][1] adaptor.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98323,"byte_end":98402,"line_start":1054,"line_end":1054,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98403,"byte_end":98406,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ [1]: trait.Itertools.html#method.flatten","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98407,"byte_end":98451,"line_start":1056,"line_end":1056,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98452,"byte_end":98455,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98456,"byte_end":98463,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ use itertools::flatten;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98464,"byte_end":98491,"line_start":1059,"line_end":1059,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98492,"byte_end":98495,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ let data = vec![vec![1, 2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98496,"byte_end":98546,"line_start":1061,"line_end":1061,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98547,"byte_end":98550,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(flatten(&data),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98551,"byte_end":98594,"line_start":1063,"line_end":1063,"column_start":1,"column_end":44}},{"value":"/                         &[1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98595,"byte_end":98644,"line_start":1064,"line_end":1064,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98645,"byte_end":98652,"line_start":1065,"line_end":1065,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":327},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100190,"byte_end":100200,"line_start":1117,"line_end":1117,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":99932,"byte_end":100007,"line_start":1113,"line_end":1113,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100008,"byte_end":100011,"line_start":1114,"line_end":1114,"column_start":1,"column_end":4}},{"value":"/ See [`.map_results()`](../trait.Itertools.html#method.map_results) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100012,"byte_end":100104,"line_start":1115,"line_end":1115,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100105,"byte_end":100178,"line_start":1116,"line_end":1116,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":355},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101491,"byte_end":101500,"line_start":1166,"line_end":1166,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101226,"byte_end":101312,"line_start":1162,"line_end":1162,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101313,"byte_end":101316,"line_start":1163,"line_end":1163,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](../trait.Itertools.html#method.positions) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101317,"byte_end":101405,"line_start":1164,"line_end":1164,"column_start":1,"column_end":89}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101406,"byte_end":101479,"line_start":1165,"line_end":1165,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":374},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102916,"byte_end":102922,"line_start":1224,"line_end":1224,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a mutating function to each element before yielding it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102655,"byte_end":102743,"line_start":1220,"line_end":1220,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102744,"byte_end":102747,"line_start":1221,"line_end":1221,"column_start":1,"column_end":4}},{"value":"/ See [`.update()`](../trait.Itertools.html#method.update) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102748,"byte_end":102830,"line_start":1222,"line_end":1222,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102831,"byte_end":102904,"line_start":1223,"line_end":1223,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110850,"byte_end":110854,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[{"value":"/ Both values are present.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110817,"byte_end":110845,"line_start":6,"line_end":6,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110918,"byte_end":110922,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[{"value":"/ Only the left value of type `A` is present.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110866,"byte_end":110913,"line_start":8,"line_end":8,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110984,"byte_end":110989,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1153},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[{"value":"/ Only the right value of type `B` is present.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110931,"byte_end":110979,"line_start":10,"line_end":10,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1153},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110792,"byte_end":110804,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"pub enum EitherOrBoth<A, B> {\n\n    /// Both values are present.\n    Both(A, B),\n\n    /// Only the left value of type `A` is present.\n    Left(A),\n\n    /// Only the right value of type `B` is present.\n    Right(B),\n}","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1160},{"krate":0,"index":1163}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"/ Value that either holds a single A or B, or both.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":110690,"byte_end":110743,"line_start":3,"line_end":3,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111108,"byte_end":111116,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"pub fn has_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111033,"byte_end":111096,"line_start":15,"line_end":15,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111260,"byte_end":111269,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"pub fn has_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111184,"byte_end":111248,"line_start":20,"line_end":20,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111436,"byte_end":111440,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"pub fn left(Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111338,"byte_end":111424,"line_start":25,"line_end":25,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111680,"byte_end":111685,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"pub fn right(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111580,"byte_end":111668,"line_start":33,"line_end":33,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111907,"byte_end":111913,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"pub fn as_ref(&Self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111829,"byte_end":111895,"line_start":41,"line_end":41,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":112228,"byte_end":112234,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"pub fn as_mut(&mut Self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":112138,"byte_end":112216,"line_start":50,"line_end":50,"column_start":5,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":414},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":434},{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":450}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112485,"byte_end":112559,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112560,"byte_end":112563,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any `IntoIterator` as","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112564,"byte_end":112639,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":112640,"byte_end":112698,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":424},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113432,"byte_end":113441,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"pub fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113194,"byte_end":113238,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113239,"byte_end":113242,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.enumerate()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113243,"byte_end":113296,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113297,"byte_end":113300,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113301,"byte_end":113308,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113309,"byte_end":113338,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113339,"byte_end":113342,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113343,"byte_end":113386,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113387,"byte_end":113410,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113411,"byte_end":113416,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113417,"byte_end":113424,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113763,"byte_end":113766,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"pub fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113558,"byte_end":113592,"line_start":45,"line_end":45,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113593,"byte_end":113596,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.rev()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113597,"byte_end":113644,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113645,"byte_end":113648,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113649,"byte_end":113656,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113657,"byte_end":113680,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113681,"byte_end":113684,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113685,"byte_end":113717,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113718,"byte_end":113741,"line_start":53,"line_end":53,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113742,"byte_end":113747,"line_start":54,"line_end":54,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113748,"byte_end":113755,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":428},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114167,"byte_end":114170,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"pub fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113915,"byte_end":113952,"line_start":63,"line_end":63,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113953,"byte_end":113956,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip(j)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":113957,"byte_end":114006,"line_start":65,"line_end":65,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114007,"byte_end":114010,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114011,"byte_end":114018,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114019,"byte_end":114042,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114043,"byte_end":114046,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114047,"byte_end":114078,"line_start":70,"line_end":70,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip(&data, &data[1..]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114079,"byte_end":114121,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114122,"byte_end":114145,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114146,"byte_end":114151,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114152,"byte_end":114159,"line_start":74,"line_end":74,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":431},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114550,"byte_end":114555,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"pub fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that first iterates `i` and then `j`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114305,"byte_end":114365,"line_start":82,"line_end":82,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114366,"byte_end":114369,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.chain(j)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114370,"byte_end":114421,"line_start":84,"line_end":84,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114422,"byte_end":114425,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114426,"byte_end":114433,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114434,"byte_end":114459,"line_start":87,"line_end":87,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114460,"byte_end":114463,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ for elt in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114464,"byte_end":114504,"line_start":89,"line_end":89,"column_start":1,"column_end":41}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114505,"byte_end":114528,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114529,"byte_end":114534,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114535,"byte_end":114542,"line_start":92,"line_end":92,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":434},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114978,"byte_end":114984,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"pub fn cloned<'a, I, T: 'a>(I) -> iter::Cloned<I::IntoIter> where\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114752,"byte_end":114812,"line_start":100,"line_end":100,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114813,"byte_end":114816,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.cloned()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114817,"byte_end":114868,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114869,"byte_end":114872,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114873,"byte_end":114880,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114881,"byte_end":114907,"line_start":105,"line_end":105,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114908,"byte_end":114911,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114912,"byte_end":114962,"line_start":107,"line_end":107,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":114963,"byte_end":114970,"line_start":108,"line_end":108,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115372,"byte_end":115376,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"pub fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item)\n-> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115139,"byte_end":115186,"line_start":116,"line_end":116,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115187,"byte_end":115190,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.fold(init, f)`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115191,"byte_end":115246,"line_start":118,"line_end":118,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115247,"byte_end":115250,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115251,"byte_end":115258,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115259,"byte_end":115283,"line_start":121,"line_end":121,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115284,"byte_end":115287,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115288,"byte_end":115356,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115357,"byte_end":115364,"line_start":124,"line_end":124,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115751,"byte_end":115754,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"pub fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115526,"byte_end":115596,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115597,"byte_end":115600,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.all(f)`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115601,"byte_end":115649,"line_start":134,"line_end":134,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115650,"byte_end":115653,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115654,"byte_end":115661,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115662,"byte_end":115685,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115686,"byte_end":115689,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115690,"byte_end":115735,"line_start":139,"line_end":139,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115736,"byte_end":115743,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116114,"byte_end":116117,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"pub fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115888,"byte_end":115958,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115959,"byte_end":115962,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.any(f)`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":115963,"byte_end":116011,"line_start":150,"line_end":150,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116012,"byte_end":116015,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116016,"byte_end":116023,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116024,"byte_end":116047,"line_start":153,"line_end":153,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116048,"byte_end":116051,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116052,"byte_end":116098,"line_start":155,"line_end":155,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116099,"byte_end":116106,"line_start":156,"line_end":156,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":448},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116442,"byte_end":116445,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"pub fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116251,"byte_end":116296,"line_start":164,"line_end":164,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116297,"byte_end":116300,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.max()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116301,"byte_end":116349,"line_start":166,"line_end":166,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116350,"byte_end":116353,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116354,"byte_end":116361,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116362,"byte_end":116385,"line_start":169,"line_end":169,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116386,"byte_end":116389,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116390,"byte_end":116426,"line_start":171,"line_end":171,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116427,"byte_end":116434,"line_start":172,"line_end":172,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116758,"byte_end":116761,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"pub fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116567,"byte_end":116612,"line_start":180,"line_end":180,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116613,"byte_end":116616,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.min()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116617,"byte_end":116665,"line_start":182,"line_end":182,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116666,"byte_end":116669,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116670,"byte_end":116677,"line_start":184,"line_end":184,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116678,"byte_end":116701,"line_start":185,"line_end":185,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116702,"byte_end":116705,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116706,"byte_end":116742,"line_start":187,"line_end":187,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/free.rs","byte_start":116743,"byte_end":116750,"line_start":188,"line_end":188,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":455},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118242,"byte_end":118248,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"pub fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117756,"byte_end":117830,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117831,"byte_end":117834,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator`-enabled version of `.concat()`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117835,"byte_end":117884,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117885,"byte_end":117888,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117889,"byte_end":117964,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":117965,"byte_end":118038,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118039,"byte_end":118065,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118066,"byte_end":118069,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118070,"byte_end":118081,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118082,"byte_end":118108,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118109,"byte_end":118113,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118114,"byte_end":118171,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118172,"byte_end":118226,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/concat_impl.rs","byte_start":118227,"byte_end":118234,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120024,"byte_end":120034,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1342}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":119779,"byte_end":119831,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":119832,"byte_end":119880,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":119881,"byte_end":119884,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":119885,"byte_end":119921,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":119922,"byte_end":119995,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":465},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120375,"byte_end":120386,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"pub fn cons_tuples<I, J>(I) -> ConsTuples<I, J> where I: Iterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120276,"byte_end":120333,"line_start":62,"line_end":62,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120334,"byte_end":120367,"line_start":63,"line_end":63,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":474},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121318,"byte_end":121331,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121177,"byte_end":121270,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121275,"byte_end":121313,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":479},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121464,"byte_end":121471,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121368,"byte_end":121459,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121592,"byte_end":121598,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121496,"byte_end":121587,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":471},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121115,"byte_end":121119,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"pub enum Diff<I, J> where I: Iterator, J: Iterator {\n\n    /// The index of the first non-matching element along with both iterator's remaining elements\n    /// starting with the first mis-match.\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n\n    /// The total number of elements that were in `J` along with the remaining elements of `I`.\n    Shorter(usize, PutBack<I>),\n\n    /// The total number of elements that were in `I` along with the remaining elements of `J`.\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":479},{"krate":0,"index":483}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`](./fn.diff_with.html) function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":120917,"byte_end":120988,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":120989,"byte_end":120992,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":120993,"byte_end":121087,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121088,"byte_end":121105,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":487},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122347,"byte_end":122356,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"pub fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>>\nwhere I: IntoIterator, J: IntoIterator, F: Fn(&I::Item, &J::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121622,"byte_end":121717,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a `Diff` which describes how `j` differs from `i`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121718,"byte_end":121780,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121781,"byte_end":121784,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121785,"byte_end":121881,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121882,"byte_end":121976,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121977,"byte_end":121997,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":121998,"byte_end":122001,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122002,"byte_end":122096,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122097,"byte_end":122168,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122169,"byte_end":122172,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122173,"byte_end":122272,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/diff.rs","byte_start":122273,"byte_end":122339,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":495},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123476,"byte_end":123486,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123212,"byte_end":123272,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123273,"byte_end":123276,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123277,"byte_end":123352,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123353,"byte_end":123367,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123368,"byte_end":123371,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](../trait.Itertools.html#method.format_with) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123372,"byte_end":123464,"line_start":9,"line_end":9,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123909,"byte_end":123915,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123634,"byte_end":123694,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123695,"byte_end":123698,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123699,"byte_end":123774,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123775,"byte_end":123789,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123790,"byte_end":123793,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](../trait.Itertools.html#method.format)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123794,"byte_end":123854,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":123855,"byte_end":123880,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126917,"byte_end":126928,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126538,"byte_end":126590,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126591,"byte_end":126640,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126641,"byte_end":126644,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126645,"byte_end":126683,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126684,"byte_end":126687,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126688,"byte_end":126717,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126718,"byte_end":126721,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](../trait.Itertools.html#method.intersperse) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126722,"byte_end":126814,"line_start":12,"line_end":12,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":126815,"byte_end":126888,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128316,"byte_end":128329,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"pub fn merge_join_by<I, J, F>(I, J, F)\n-> MergeJoinBy<I::IntoIter, J::IntoIter, F> where I: IntoIterator,\nJ: IntoIterator, F: FnMut(&I::Item, &J::Item) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128109,"byte_end":128210,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128211,"byte_end":128214,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](trait.Itertools.html#method.merge_join_by) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128215,"byte_end":128308,"line_start":10,"line_end":10,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128955,"byte_end":128966,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128674,"byte_end":128768,"line_start":24,"line_end":24,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128769,"byte_end":128772,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](../trait.Itertools.html#method.merge_join_by) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128773,"byte_end":128869,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":128870,"byte_end":128943,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1408},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130975,"byte_end":130985,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130952,"byte_end":130970,"line_start":6,"line_end":6,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131067,"byte_end":131077,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130992,"byte_end":131062,"line_start":9,"line_end":9,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1413},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131190,"byte_end":131196,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131087,"byte_end":131161,"line_start":12,"line_end":12,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131166,"byte_end":131185,"line_start":13,"line_end":13,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1406},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130930,"byte_end":130942,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"pub enum MinMaxResult<T> {\n\n    /// Empty iterator\n    NoElements,\n\n    /// Iterator with one element, so the minimum and maximum are the same\n    OneElement(T),\n\n    /// More than one element in the iterator, the first element is not larger\n    /// than the second\n    MinMax(T, T),\n}","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1413}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130781,"byte_end":130862,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"/ more detail.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":130863,"byte_end":130879,"line_start":3,"line_end":3,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":132014,"byte_end":132025,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"pub fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131243,"byte_end":131320,"line_start":18,"line_end":18,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131325,"byte_end":131393,"line_start":19,"line_end":19,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131398,"byte_end":131468,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131473,"byte_end":131543,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131548,"byte_end":131589,"line_start":22,"line_end":22,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131594,"byte_end":131597,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131602,"byte_end":131616,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131621,"byte_end":131624,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131629,"byte_end":131636,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131641,"byte_end":131713,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131718,"byte_end":131721,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131726,"byte_end":131768,"line_start":29,"line_end":29,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131773,"byte_end":131811,"line_start":30,"line_end":30,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131816,"byte_end":131819,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131824,"byte_end":131850,"line_start":32,"line_end":32,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131855,"byte_end":131901,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131906,"byte_end":131909,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131914,"byte_end":131939,"line_start":35,"line_end":35,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131944,"byte_end":131990,"line_start":36,"line_end":36,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131995,"byte_end":132002,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":135024,"byte_end":135032,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134671,"byte_end":134746,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134747,"byte_end":134784,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134785,"byte_end":134788,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134789,"byte_end":134828,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134829,"byte_end":134832,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](../trait.Itertools.html#method.pad_using) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134833,"byte_end":134921,"line_start":9,"line_end":9,"column_start":1,"column_end":89}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":134939,"byte_end":135012,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":590},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137230,"byte_end":137241,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":591}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":136824,"byte_end":136903,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":136904,"byte_end":136907,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":136908,"byte_end":136989,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":136990,"byte_end":137015,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137016,"byte_end":137019,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137020,"byte_end":137091,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137092,"byte_end":137171,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137172,"byte_end":137219,"line_start":14,"line_end":14,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137425,"byte_end":137437,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"pub fn peeking_next<F>(&mut Self, F) -> Option<Self::Item> where\nF: FnOnce(&Self::Item) -> bool","parent":{"krate":0,"index":590},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137259,"byte_end":137333,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137338,"byte_end":137398,"line_start":17,"line_end":17,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137403,"byte_end":137417,"line_start":18,"line_end":18,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":601},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138956,"byte_end":138972,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138683,"byte_end":138755,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138756,"byte_end":138759,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](../trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138760,"byte_end":138844,"line_start":77,"line_end":77,"column_start":1,"column_end":85}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138845,"byte_end":138870,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":138871,"byte_end":138944,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141458,"byte_end":141472,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141150,"byte_end":141214,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141215,"byte_end":141251,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141252,"byte_end":141255,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](../fn.process_results.html), see its docs","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141256,"byte_end":141329,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141330,"byte_end":141355,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141356,"byte_end":141429,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143377,"byte_end":143392,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"pub fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>,\nF: FnOnce(ProcessResults<, I::IntoIter, E>) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142044,"byte_end":142121,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142122,"byte_end":142165,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142166,"byte_end":142169,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142170,"byte_end":142247,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142248,"byte_end":142297,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142298,"byte_end":142301,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142302,"byte_end":142379,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142380,"byte_end":142460,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142461,"byte_end":142519,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142520,"byte_end":142523,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142524,"byte_end":142596,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142597,"byte_end":142665,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142666,"byte_end":142682,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142683,"byte_end":142686,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142687,"byte_end":142755,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142756,"byte_end":142772,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142773,"byte_end":142776,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142777,"byte_end":142790,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142791,"byte_end":142794,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142795,"byte_end":142802,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142803,"byte_end":142838,"line_start":56,"line_end":56,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142839,"byte_end":142842,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142843,"byte_end":142882,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142883,"byte_end":142886,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142887,"byte_end":142944,"line_start":60,"line_end":60,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":142945,"byte_end":143013,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143014,"byte_end":143017,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143018,"byte_end":143117,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143118,"byte_end":143121,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143122,"byte_end":143204,"line_start":65,"line_end":65,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143205,"byte_end":143289,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143290,"byte_end":143293,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143294,"byte_end":143327,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143328,"byte_end":143361,"line_start":69,"line_end":69,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":143362,"byte_end":143369,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":143958,"byte_end":143965,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1491}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":143733,"byte_end":143793,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":143794,"byte_end":143797,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](../fn.repeat_n.html) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":143798,"byte_end":143863,"line_start":4,"line_end":4,"column_start":1,"column_end":66}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":143864,"byte_end":143929,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144082,"byte_end":144090,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"pub fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144008,"byte_end":144074,"line_start":12,"line_end":12,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147701,"byte_end":147711,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":666}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](../fn.repeat_call.html) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147620,"byte_end":147689,"line_start":7,"line_end":7,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148403,"byte_end":148414,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"pub fn repeat_call<F, A>(F) -> RepeatCall<F> where F: FnMut() -> A","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147809,"byte_end":147878,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147879,"byte_end":147899,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147900,"byte_end":147903,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147904,"byte_end":147964,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147965,"byte_end":147968,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147969,"byte_end":147976,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147977,"byte_end":148008,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148009,"byte_end":148038,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148039,"byte_end":148076,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148077,"byte_end":148080,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148081,"byte_end":148138,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148139,"byte_end":148142,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148143,"byte_end":148186,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148187,"byte_end":148247,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148248,"byte_end":148278,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148279,"byte_end":148284,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148285,"byte_end":148288,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148289,"byte_end":148317,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148318,"byte_end":148352,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148353,"byte_end":148380,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148381,"byte_end":148387,"line_start":37,"line_end":37,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148388,"byte_end":148395,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150021,"byte_end":150027,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"pub fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: FnMut(&mut St) ->\nOption<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148779,"byte_end":148854,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148855,"byte_end":148923,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148924,"byte_end":148927,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148928,"byte_end":149001,"line_start":63,"line_end":63,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149002,"byte_end":149074,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149075,"byte_end":149078,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an `Iterator`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149079,"byte_end":149150,"line_start":66,"line_end":66,"column_start":1,"column_end":72}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149151,"byte_end":149207,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149208,"byte_end":149211,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149212,"byte_end":149219,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149220,"byte_end":149280,"line_start":70,"line_end":70,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149281,"byte_end":149333,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149334,"byte_end":149337,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149338,"byte_end":149364,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149365,"byte_end":149368,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let (mut x1, mut x2) = (1u32, 1u32);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149369,"byte_end":149409,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"/ let mut fibonacci = unfold((), move |_| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149410,"byte_end":149455,"line_start":76,"line_end":76,"column_start":1,"column_end":46}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149456,"byte_end":149507,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(x2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149508,"byte_end":149549,"line_start":78,"line_end":78,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149550,"byte_end":149553,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149554,"byte_end":149600,"line_start":80,"line_end":80,"column_start":1,"column_end":47}},{"value":"/     let ret = x1;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149601,"byte_end":149622,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/     x1 = x2;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149623,"byte_end":149639,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/     x2 = next;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149640,"byte_end":149658,"line_start":83,"line_end":83,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149659,"byte_end":149662,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149663,"byte_end":149731,"line_start":85,"line_end":85,"column_start":1,"column_end":69}},{"value":"/     if ret == x1 && ret > 1 {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149732,"byte_end":149765,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/         return None;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149766,"byte_end":149790,"line_start":87,"line_end":87,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149791,"byte_end":149800,"line_start":88,"line_end":88,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149801,"byte_end":149804,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/     Some(ret)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149805,"byte_end":149822,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"/ });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149823,"byte_end":149830,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149831,"byte_end":149834,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149835,"byte_end":149890,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149891,"byte_end":149951,"line_start":94,"line_end":94,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":149952,"byte_end":150005,"line_start":95,"line_end":95,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150006,"byte_end":150013,"line_start":96,"line_end":96,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150453,"byte_end":150459,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](../fn.unfold.html) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150299,"byte_end":150358,"line_start":112,"line_end":112,"column_start":1,"column_end":60}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150376,"byte_end":150441,"line_start":114,"line_end":114,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150567,"byte_end":150572,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150483,"byte_end":150558,"line_start":117,"line_end":117,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151232,"byte_end":151239,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":1509},{"krate":0,"index":1510}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150922,"byte_end":150999,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151000,"byte_end":151003,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`] function. See its documentation for more.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151004,"byte_end":151095,"line_start":140,"line_end":140,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151096,"byte_end":151099,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`iterate()`]: ../fn.iterate.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151100,"byte_end":151137,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151155,"byte_end":151220,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151996,"byte_end":152003,"line_start":180,"line_end":180,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"pub fn iterate<St, F>(St, F) -> Iterate<St, F> where F: FnMut(&St) -> St","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151764,"byte_end":151852,"line_start":173,"line_end":173,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151853,"byte_end":151856,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151857,"byte_end":151864,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151865,"byte_end":151892,"line_start":176,"line_end":176,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151893,"byte_end":151896,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151897,"byte_end":151980,"line_start":178,"line_end":178,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151981,"byte_end":151988,"line_start":179,"line_end":179,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1516},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152423,"byte_end":152434,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1519}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152215,"byte_end":152255,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152256,"byte_end":152259,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152260,"byte_end":152324,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`Tuples::into_buffer()`](struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152325,"byte_end":152394,"line_start":8,"line_end":8,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":717},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153660,"byte_end":153666,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153420,"byte_end":153487,"line_start":61,"line_end":61,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153488,"byte_end":153491,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153492,"byte_end":153574,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153575,"byte_end":153648,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154705,"byte_end":154716,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"pub fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154336,"byte_end":154425,"line_start":99,"line_end":99,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154430,"byte_end":154433,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154438,"byte_end":154445,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154450,"byte_end":154479,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154484,"byte_end":154487,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154492,"byte_end":154527,"line_start":104,"line_end":104,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154532,"byte_end":154577,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154582,"byte_end":154616,"line_start":106,"line_end":106,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154621,"byte_end":154681,"line_start":107,"line_end":107,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154686,"byte_end":154693,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":155080,"byte_end":155092,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1527}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154788,"byte_end":154872,"line_start":115,"line_end":115,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154873,"byte_end":154876,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](../trait.Itertools.html#method.tuple_windows) for more","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154877,"byte_end":154960,"line_start":117,"line_end":117,"column_start":1,"column_end":84}},{"value":"/ information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154961,"byte_end":154977,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154978,"byte_end":155051,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":743},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156389,"byte_end":156401,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":744},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156420,"byte_end":156424,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":745},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156435,"byte_end":156441,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156520,"byte_end":156537,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"pub fn collect_from_iter<I>(I, &mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156648,"byte_end":156672,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"pub fn collect_from_iter_no_buf<I>(I) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156759,"byte_end":156768,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"pub fn num_items() -> usize","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156789,"byte_end":156804,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"pub fn left_shift_push(&mut Self, Self::Item)","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":757},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159536,"byte_end":159548,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159205,"byte_end":159295,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159296,"byte_end":159299,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159300,"byte_end":159349,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159350,"byte_end":159353,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](../trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159354,"byte_end":159450,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159451,"byte_end":159524,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160165,"byte_end":160170,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":1580},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160130,"byte_end":160160,"line_start":32,"line_end":32,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160235,"byte_end":160241,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":1580},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160179,"byte_end":160230,"line_start":34,"line_end":34,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160284,"byte_end":160288,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":1580},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160250,"byte_end":160279,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160331,"byte_end":160335,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":1580},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160297,"byte_end":160326,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160112,"byte_end":160120,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"pub enum Position<T> {\n\n    /// This is the first element.\n    First(T),\n\n    /// This is neither the first nor the last element.\n    Middle(T),\n\n    /// This is the last element.\n    Last(T),\n\n    /// This is the only element.\n    Only(T),\n}","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1588},{"krate":0,"index":1591}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159857,"byte_end":159895,"line_start":26,"line_end":26,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159896,"byte_end":159963,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159964,"byte_end":159967,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":159968,"byte_end":160061,"line_start":29,"line_end":29,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160408,"byte_end":160418,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160369,"byte_end":160396,"line_start":43,"line_end":43,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162224,"byte_end":162229,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":161962,"byte_end":162027,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162028,"byte_end":162031,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](../trait.Itertools.html#method.zip_eq) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162032,"byte_end":162114,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162139,"byte_end":162212,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162604,"byte_end":162610,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"pub fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162261,"byte_end":162298,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162299,"byte_end":162302,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162303,"byte_end":162362,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162363,"byte_end":162366,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip_eq(j)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162367,"byte_end":162419,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162420,"byte_end":162423,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162424,"byte_end":162431,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162432,"byte_end":162458,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162459,"byte_end":162462,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162463,"byte_end":162494,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162495,"byte_end":162558,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162559,"byte_end":162582,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162583,"byte_end":162588,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162589,"byte_end":162596,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":164035,"byte_end":164045,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":1624},{"krate":0,"index":1625}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163729,"byte_end":163794,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163795,"byte_end":163798,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163799,"byte_end":163828,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163829,"byte_end":163832,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](../trait.Itertools.html#method.zip_longest) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163833,"byte_end":163925,"line_start":14,"line_end":14,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":163950,"byte_end":164023,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166069,"byte_end":166072,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":1636}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`](../fn.multizip.html) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":165896,"byte_end":165959,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":165984,"byte_end":166057,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167236,"byte_end":167244,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"pub fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166091,"byte_end":166183,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166184,"byte_end":166187,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166188,"byte_end":166278,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ implement `IntoIterator`) and yields elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166279,"byte_end":166328,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166329,"byte_end":166377,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166378,"byte_end":166381,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166382,"byte_end":166474,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166475,"byte_end":166512,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166513,"byte_end":166516,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Note:** The result of this macro is a value of a named type (`Zip<(I, J,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166517,"byte_end":166595,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ ..)>` of each component iterator `I, J, ...`) if each component iterator is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166596,"byte_end":166675,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ nameable.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166676,"byte_end":166689,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166690,"byte_end":166693,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Prefer [`izip!()`] over `multizip` for the performance benefits of using the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166694,"byte_end":166774,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ standard library `.zip()`. Prefer `multizip` if a nameable type is needed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166775,"byte_end":166853,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166854,"byte_end":166857,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [`izip!()`]: macro.izip.html","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166858,"byte_end":166890,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166891,"byte_end":166894,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166895,"byte_end":166902,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166903,"byte_end":166931,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166932,"byte_end":166935,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // iterate over three sequences side-by-side","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166936,"byte_end":166984,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/ let mut results = [0, 0, 0, 0];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":166985,"byte_end":167020,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/ let inputs = [3, 7, 9, 6];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167021,"byte_end":167051,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167052,"byte_end":167055,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ for (r, index, input) in multizip((&mut results, 0..10, &inputs)) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167056,"byte_end":167127,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     *r = index * 10 + input;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167128,"byte_end":167160,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167161,"byte_end":167166,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167167,"byte_end":167170,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(results, [0 + 3, 10 + 7, 29, 36]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167171,"byte_end":167220,"line_start":39,"line_end":39,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/ziptuple.rs","byte_start":167221,"byte_end":167228,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":819},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8105,"byte_end":8114,"line_start":283,"line_end":283,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":869},{"krate":0,"index":871},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":896},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":931}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[{"value":"/ The trait `Itertools`: extra iterator adaptors and methods for iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7502,"byte_end":7579,"line_start":271,"line_end":271,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7580,"byte_end":7583,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7584,"byte_end":7661,"line_start":273,"line_end":273,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7662,"byte_end":7665,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7666,"byte_end":7734,"line_start":275,"line_end":275,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7735,"byte_end":7808,"line_start":276,"line_end":276,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](#method.interleave)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7809,"byte_end":7867,"line_start":277,"line_end":277,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7868,"byte_end":7871,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7872,"byte_end":7945,"line_start":279,"line_end":279,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7946,"byte_end":7992,"line_start":280,"line_end":280,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](#method.next_tuple) is an example and the first regular","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":7993,"byte_end":8070,"line_start":281,"line_end":281,"column_start":1,"column_end":78}},{"value":"/ method in the list.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8071,"byte_end":8094,"line_start":282,"line_end":282,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8513,"byte_end":8523,"line_start":298,"line_end":298,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"pub fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8149,"byte_end":8215,"line_start":286,"line_end":286,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8220,"byte_end":8223,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8228,"byte_end":8270,"line_start":288,"line_end":288,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8275,"byte_end":8278,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8283,"byte_end":8312,"line_start":290,"line_end":290,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8317,"byte_end":8320,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8325,"byte_end":8332,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8337,"byte_end":8366,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8371,"byte_end":8374,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8379,"byte_end":8424,"line_start":295,"line_end":295,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8429,"byte_end":8493,"line_start":296,"line_end":296,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8498,"byte_end":8505,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9046,"byte_end":9065,"line_start":316,"line_end":316,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"pub fn interleave_shortest<J>(Self, J)\n-> InterleaveShortest<Self, J::IntoIter> where J: IntoIterator<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8701,"byte_end":8777,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8782,"byte_end":8790,"line_start":306,"line_end":306,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8795,"byte_end":8798,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8803,"byte_end":8845,"line_start":308,"line_end":308,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8850,"byte_end":8853,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8858,"byte_end":8865,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8870,"byte_end":8899,"line_start":311,"line_end":311,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8904,"byte_end":8907,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8912,"byte_end":8966,"line_start":313,"line_end":313,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8971,"byte_end":9026,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9031,"byte_end":9038,"line_start":315,"line_end":315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9644,"byte_end":9655,"line_start":335,"line_end":335,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9282,"byte_end":9334,"line_start":323,"line_end":323,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9339,"byte_end":9388,"line_start":324,"line_end":324,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9393,"byte_end":9396,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9401,"byte_end":9443,"line_start":326,"line_end":326,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9448,"byte_end":9451,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9456,"byte_end":9485,"line_start":328,"line_end":328,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9490,"byte_end":9493,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9498,"byte_end":9505,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9510,"byte_end":9539,"line_start":331,"line_end":331,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9544,"byte_end":9547,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9552,"byte_end":9624,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9629,"byte_end":9636,"line_start":334,"line_end":334,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10898,"byte_end":10909,"line_start":369,"line_end":369,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"pub fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9828,"byte_end":9898,"line_start":342,"line_end":342,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9903,"byte_end":9972,"line_start":343,"line_end":343,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9977,"byte_end":9980,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":9985,"byte_end":10014,"line_start":345,"line_end":345,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10019,"byte_end":10022,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ As long as neither input iterator is exhausted yet, it yields two values","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10027,"byte_end":10103,"line_start":347,"line_end":347,"column_start":5,"column_end":81}},{"value":"/ via `EitherOrBoth::Both`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10108,"byte_end":10137,"line_start":348,"line_end":348,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10142,"byte_end":10145,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ When the parameter iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10150,"byte_end":10227,"line_start":350,"line_end":350,"column_start":5,"column_end":82}},{"value":"/ `self` iterator via `EitherOrBoth::Left`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10232,"byte_end":10277,"line_start":351,"line_end":351,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10282,"byte_end":10285,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ When the `self` iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10290,"byte_end":10364,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"/ parameter iterator via `EitherOrBoth::Right`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10369,"byte_end":10418,"line_start":354,"line_end":354,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10423,"byte_end":10426,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10431,"byte_end":10506,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10511,"byte_end":10534,"line_start":357,"line_end":357,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10539,"byte_end":10542,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10547,"byte_end":10575,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](enum.EitherOrBoth.html).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10580,"byte_end":10646,"line_start":360,"line_end":360,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10651,"byte_end":10654,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10659,"byte_end":10670,"line_start":362,"line_end":362,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10675,"byte_end":10722,"line_start":363,"line_end":363,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10727,"byte_end":10756,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10761,"byte_end":10799,"line_start":365,"line_end":365,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10804,"byte_end":10864,"line_start":366,"line_end":366,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10869,"byte_end":10876,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":10881,"byte_end":10890,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11347,"byte_end":11353,"line_start":382,"line_end":382,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"pub fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11094,"byte_end":11164,"line_start":376,"line_end":376,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11169,"byte_end":11225,"line_start":377,"line_end":377,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11230,"byte_end":11233,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11238,"byte_end":11308,"line_start":379,"line_end":379,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11313,"byte_end":11325,"line_start":380,"line_end":380,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11330,"byte_end":11339,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12269,"byte_end":12277,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"pub fn batching<B, F>(Self, F) -> Batching<Self, F> where F: FnMut(&mut Self)\n-> Option<B>, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11503,"byte_end":11577,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11582,"byte_end":11656,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11661,"byte_end":11687,"line_start":391,"line_end":391,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11692,"byte_end":11695,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11700,"byte_end":11733,"line_start":393,"line_end":393,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11738,"byte_end":11741,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11746,"byte_end":11753,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11758,"byte_end":11787,"line_start":396,"line_end":396,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11792,"byte_end":11795,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11800,"byte_end":11848,"line_start":398,"line_end":398,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11853,"byte_end":11889,"line_start":399,"line_end":399,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11894,"byte_end":11926,"line_start":400,"line_end":400,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11931,"byte_end":11963,"line_start":401,"line_end":401,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":11968,"byte_end":12015,"line_start":402,"line_end":402,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12020,"byte_end":12056,"line_start":403,"line_end":403,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12061,"byte_end":12108,"line_start":404,"line_end":404,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12113,"byte_end":12133,"line_start":405,"line_end":405,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12138,"byte_end":12154,"line_start":406,"line_end":406,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12159,"byte_end":12173,"line_start":407,"line_end":407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12178,"byte_end":12181,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12186,"byte_end":12241,"line_start":409,"line_end":409,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12246,"byte_end":12253,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":12258,"byte_end":12261,"line_start":411,"line_end":411,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16557,"byte_end":16570,"line_start":527,"line_end":527,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"pub fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: tuple_impl::TupleCollect, T::Item: Clone","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15357,"byte_end":15427,"line_start":496,"line_end":496,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15432,"byte_end":15462,"line_start":497,"line_end":497,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15467,"byte_end":15470,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15475,"byte_end":15543,"line_start":499,"line_end":499,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15548,"byte_end":15619,"line_start":500,"line_end":500,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15624,"byte_end":15682,"line_start":501,"line_end":501,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15687,"byte_end":15690,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15695,"byte_end":15702,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15707,"byte_end":15736,"line_start":504,"line_end":504,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15741,"byte_end":15768,"line_start":505,"line_end":505,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15773,"byte_end":15815,"line_start":506,"line_end":506,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15820,"byte_end":15843,"line_start":507,"line_end":507,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15848,"byte_end":15853,"line_start":508,"line_end":508,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15858,"byte_end":15906,"line_start":509,"line_end":509,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15911,"byte_end":15914,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15919,"byte_end":15959,"line_start":511,"line_end":511,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":15964,"byte_end":16007,"line_start":512,"line_end":512,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16012,"byte_end":16055,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16060,"byte_end":16092,"line_start":514,"line_end":514,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16097,"byte_end":16100,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16105,"byte_end":16137,"line_start":516,"line_end":516,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16142,"byte_end":16191,"line_start":517,"line_end":517,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16196,"byte_end":16256,"line_start":518,"line_end":518,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16261,"byte_end":16264,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16269,"byte_end":16314,"line_start":520,"line_end":520,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16319,"byte_end":16351,"line_start":521,"line_end":521,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16356,"byte_end":16380,"line_start":522,"line_end":522,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16385,"byte_end":16388,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16393,"byte_end":16472,"line_start":524,"line_end":524,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16477,"byte_end":16537,"line_start":525,"line_end":525,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16542,"byte_end":16549,"line_start":526,"line_end":526,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17879,"byte_end":17885,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"pub fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16788,"byte_end":16861,"line_start":535,"line_end":535,"column_start":5,"column_end":78}},{"value":"/ (up to 4).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16866,"byte_end":16880,"line_start":536,"line_end":536,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16885,"byte_end":16888,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](#method.next_tuple).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16893,"byte_end":16955,"line_start":538,"line_end":538,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16960,"byte_end":16963,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16968,"byte_end":16975,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":16980,"byte_end":17009,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17014,"byte_end":17041,"line_start":542,"line_end":542,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17046,"byte_end":17081,"line_start":543,"line_end":543,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17086,"byte_end":17109,"line_start":544,"line_end":544,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17114,"byte_end":17119,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17124,"byte_end":17164,"line_start":546,"line_end":546,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17169,"byte_end":17172,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17177,"byte_end":17210,"line_start":548,"line_end":548,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17215,"byte_end":17258,"line_start":549,"line_end":549,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17263,"byte_end":17306,"line_start":550,"line_end":550,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17311,"byte_end":17343,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17348,"byte_end":17351,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17356,"byte_end":17388,"line_start":553,"line_end":553,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17393,"byte_end":17435,"line_start":554,"line_end":554,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17440,"byte_end":17500,"line_start":555,"line_end":555,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17505,"byte_end":17508,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17513,"byte_end":17558,"line_start":557,"line_end":557,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17563,"byte_end":17589,"line_start":558,"line_end":558,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17594,"byte_end":17618,"line_start":559,"line_end":559,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17623,"byte_end":17626,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17631,"byte_end":17697,"line_start":561,"line_end":561,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17702,"byte_end":17762,"line_start":562,"line_end":562,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17767,"byte_end":17774,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17779,"byte_end":17782,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`](structs/struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":17787,"byte_end":17871,"line_start":565,"line_end":565,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19335,"byte_end":19339,"line_start":614,"line_end":614,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"pub fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":18829,"byte_end":18904,"line_start":598,"line_end":598,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":18909,"byte_end":18932,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":18937,"byte_end":18940,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":18945,"byte_end":19020,"line_start":601,"line_end":601,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19025,"byte_end":19068,"line_start":602,"line_end":602,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19073,"byte_end":19076,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19081,"byte_end":19123,"line_start":604,"line_end":604,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19128,"byte_end":19131,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19136,"byte_end":19168,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19173,"byte_end":19176,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19181,"byte_end":19188,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19193,"byte_end":19222,"line_start":609,"line_end":609,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19227,"byte_end":19230,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19235,"byte_end":19263,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19268,"byte_end":19315,"line_start":612,"line_end":612,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19320,"byte_end":19327,"line_start":613,"line_end":613,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19856,"byte_end":19867,"line_start":631,"line_end":631,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"pub fn map_results<F, T, U, E>(Self, F) -> MapResults<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19445,"byte_end":19509,"line_start":620,"line_end":620,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19514,"byte_end":19571,"line_start":621,"line_end":621,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19576,"byte_end":19590,"line_start":622,"line_end":622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19595,"byte_end":19598,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19603,"byte_end":19610,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19615,"byte_end":19644,"line_start":625,"line_end":625,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19649,"byte_end":19652,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19657,"byte_end":19706,"line_start":627,"line_end":627,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_results(|i| i + 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19711,"byte_end":19765,"line_start":628,"line_end":628,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19770,"byte_end":19836,"line_start":629,"line_end":629,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":19841,"byte_end":19848,"line_start":630,"line_end":630,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20530,"byte_end":20535,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"pub fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20062,"byte_end":20130,"line_start":638,"line_end":638,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20135,"byte_end":20207,"line_start":639,"line_end":639,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20212,"byte_end":20233,"line_start":640,"line_end":640,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20238,"byte_end":20241,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20246,"byte_end":20288,"line_start":642,"line_end":642,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20293,"byte_end":20296,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20301,"byte_end":20308,"line_start":644,"line_end":644,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20313,"byte_end":20342,"line_start":645,"line_end":645,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20347,"byte_end":20350,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20355,"byte_end":20383,"line_start":647,"line_end":647,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20388,"byte_end":20416,"line_start":648,"line_end":648,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20421,"byte_end":20445,"line_start":649,"line_end":649,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20450,"byte_end":20510,"line_start":650,"line_end":650,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20515,"byte_end":20522,"line_start":651,"line_end":651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21312,"byte_end":21320,"line_start":676,"line_end":676,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"pub fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20741,"byte_end":20816,"line_start":660,"line_end":660,"column_start":5,"column_end":80}},{"value":"/ This is much like `.merge()` but allows for a custom ordering.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20821,"byte_end":20887,"line_start":661,"line_end":661,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20892,"byte_end":20895,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20900,"byte_end":20958,"line_start":663,"line_end":663,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20963,"byte_end":20966,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":20971,"byte_end":21013,"line_start":665,"line_end":665,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21018,"byte_end":21021,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21026,"byte_end":21033,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21038,"byte_end":21067,"line_start":668,"line_end":668,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21072,"byte_end":21075,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21080,"byte_end":21116,"line_start":670,"line_end":670,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21121,"byte_end":21157,"line_start":671,"line_end":671,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21162,"byte_end":21208,"line_start":672,"line_end":672,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21213,"byte_end":21291,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21296,"byte_end":21303,"line_start":674,"line_end":674,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22910,"byte_end":22923,"line_start":716,"line_end":716,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"pub fn merge_join_by<J, F>(Self, J, F) -> MergeJoinBy<Self, J::IntoIter, F>\nwhere J: IntoIterator, F: FnMut(&Self::Item, &J::Item) -> std::cmp::Ordering,\nSelf: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"/ Create an iterator that merges items from both this and the specified","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21606,"byte_end":21679,"line_start":684,"line_end":684,"column_start":5,"column_end":78}},{"value":"/ iterator in ascending order.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21684,"byte_end":21716,"line_start":685,"line_end":685,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21721,"byte_end":21724,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ It chooses whether to pair elements based on the `Ordering` returned by the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21729,"byte_end":21808,"line_start":687,"line_end":687,"column_start":5,"column_end":84}},{"value":"/ specified compare function. At any point, inspecting the tip of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21813,"byte_end":21884,"line_start":688,"line_end":688,"column_start":5,"column_end":76}},{"value":"/ iterators `I` and `J` as items `i` of type `I::Item` and `j` of type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21889,"byte_end":21961,"line_start":689,"line_end":689,"column_start":5,"column_end":77}},{"value":"/ `J::Item` respectively, the resulting iterator will:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":21966,"byte_end":22022,"line_start":690,"line_end":690,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22027,"byte_end":22030,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ - Emit `EitherOrBoth::Left(i)` when `i < j`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22035,"byte_end":22083,"line_start":692,"line_end":692,"column_start":5,"column_end":53}},{"value":"/   and remove `i` from its source iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22088,"byte_end":22133,"line_start":693,"line_end":693,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Right(j)` when `i > j`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22138,"byte_end":22187,"line_start":694,"line_end":694,"column_start":5,"column_end":54}},{"value":"/   and remove `j` from its source iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22192,"byte_end":22237,"line_start":695,"line_end":695,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Both(i, j)` when  `i == j`,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22242,"byte_end":22295,"line_start":696,"line_end":696,"column_start":5,"column_end":58}},{"value":"/   and remove both `i` and `j` from their respective source iterators","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22300,"byte_end":22372,"line_start":697,"line_end":697,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22377,"byte_end":22380,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22385,"byte_end":22392,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22397,"byte_end":22426,"line_start":700,"line_end":700,"column_start":5,"column_end":34}},{"value":"/ use itertools::EitherOrBoth::{Left, Right, Both};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22431,"byte_end":22484,"line_start":701,"line_end":701,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22489,"byte_end":22492,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ let ki = (0..10).step(3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22497,"byte_end":22526,"line_start":703,"line_end":703,"column_start":5,"column_end":34}},{"value":"/ let ku = (0..10).step(5);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22531,"byte_end":22560,"line_start":704,"line_end":704,"column_start":5,"column_end":34}},{"value":"/ let ki_ku = ki.merge_join_by(ku, |i, j| i.cmp(j)).map(|either| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22565,"byte_end":22633,"line_start":705,"line_end":705,"column_start":5,"column_end":73}},{"value":"/     match either {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22638,"byte_end":22660,"line_start":706,"line_end":706,"column_start":5,"column_end":27}},{"value":"/         Left(_) => \"Ki\",","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22665,"byte_end":22693,"line_start":707,"line_end":707,"column_start":5,"column_end":33}},{"value":"/         Right(_) => \"Ku\",","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22698,"byte_end":22727,"line_start":708,"line_end":708,"column_start":5,"column_end":34}},{"value":"/         Both(_, _) => \"KiKu\"","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22732,"byte_end":22764,"line_start":709,"line_end":709,"column_start":5,"column_end":37}},{"value":"/     }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22769,"byte_end":22778,"line_start":710,"line_end":710,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22783,"byte_end":22790,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22795,"byte_end":22798,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(ki_ku, vec![\"KiKu\", \"Ki\", \"Ku\", \"Ki\", \"Ki\"]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22803,"byte_end":22876,"line_start":713,"line_end":713,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22881,"byte_end":22888,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":22893,"byte_end":22902,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25529,"byte_end":25546,"line_start":792,"line_end":792,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"pub fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25103,"byte_end":25177,"line_start":781,"line_end":781,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25182,"byte_end":25235,"line_start":782,"line_end":782,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25240,"byte_end":25243,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25248,"byte_end":25301,"line_start":784,"line_end":784,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25306,"byte_end":25309,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25314,"byte_end":25321,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25326,"byte_end":25355,"line_start":787,"line_end":787,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25360,"byte_end":25363,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25368,"byte_end":25422,"line_start":789,"line_end":789,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25427,"byte_end":25509,"line_start":790,"line_end":790,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":25514,"byte_end":25521,"line_start":791,"line_end":791,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28517,"byte_end":28525,"line_start":864,"line_end":864,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"pub fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27347,"byte_end":27412,"line_start":836,"line_end":836,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27417,"byte_end":27468,"line_start":837,"line_end":837,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27473,"byte_end":27476,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27481,"byte_end":27557,"line_start":839,"line_end":839,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27562,"byte_end":27625,"line_start":840,"line_end":840,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27630,"byte_end":27700,"line_start":841,"line_end":841,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27705,"byte_end":27766,"line_start":842,"line_end":842,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27771,"byte_end":27841,"line_start":843,"line_end":843,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27846,"byte_end":27918,"line_start":844,"line_end":844,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27923,"byte_end":27989,"line_start":845,"line_end":845,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":27994,"byte_end":27997,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28002,"byte_end":28044,"line_start":847,"line_end":847,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28049,"byte_end":28052,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28057,"byte_end":28086,"line_start":849,"line_end":849,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28091,"byte_end":28094,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28099,"byte_end":28106,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28111,"byte_end":28140,"line_start":852,"line_end":852,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28145,"byte_end":28148,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28153,"byte_end":28187,"line_start":854,"line_end":854,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28192,"byte_end":28244,"line_start":855,"line_end":855,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28249,"byte_end":28309,"line_start":856,"line_end":856,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28314,"byte_end":28353,"line_start":857,"line_end":857,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28358,"byte_end":28383,"line_start":858,"line_end":858,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28388,"byte_end":28408,"line_start":859,"line_end":859,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28413,"byte_end":28440,"line_start":860,"line_end":860,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28445,"byte_end":28460,"line_start":861,"line_end":861,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28465,"byte_end":28497,"line_start":862,"line_end":862,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28502,"byte_end":28509,"line_start":863,"line_end":863,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29239,"byte_end":29244,"line_start":886,"line_end":886,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"pub fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28760,"byte_end":28830,"line_start":872,"line_end":872,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28835,"byte_end":28894,"line_start":873,"line_end":873,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28899,"byte_end":28902,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28907,"byte_end":28949,"line_start":875,"line_end":875,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28954,"byte_end":28957,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28962,"byte_end":28991,"line_start":877,"line_end":877,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":28996,"byte_end":28999,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29004,"byte_end":29011,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29016,"byte_end":29045,"line_start":880,"line_end":880,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29050,"byte_end":29053,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29058,"byte_end":29106,"line_start":882,"line_end":882,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29111,"byte_end":29164,"line_start":883,"line_end":883,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29169,"byte_end":29219,"line_start":884,"line_end":884,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":29224,"byte_end":29231,"line_start":885,"line_end":885,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31444,"byte_end":31462,"line_start":950,"line_end":950,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"pub fn peeking_take_while<F>(&mut Self, F) -> PeekingTakeWhile<, Self, F>\nwhere Self: Sized + PeekingNext, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":30903,"byte_end":30969,"line_start":938,"line_end":938,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":30974,"byte_end":31032,"line_start":939,"line_end":939,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31037,"byte_end":31040,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31045,"byte_end":31120,"line_start":941,"line_end":941,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31125,"byte_end":31197,"line_start":942,"line_end":942,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31202,"byte_end":31205,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31210,"byte_end":31283,"line_start":944,"line_end":944,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31288,"byte_end":31321,"line_start":945,"line_end":945,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31326,"byte_end":31329,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31334,"byte_end":31337,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](#method.take_while_ref)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31342,"byte_end":31400,"line_start":948,"line_end":948,"column_start":5,"column_end":63}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31405,"byte_end":31436,"line_start":949,"line_end":949,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32408,"byte_end":32422,"line_start":975,"line_end":975,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"pub fn take_while_ref<F>(&mut Self, F) -> TakeWhileRef<, Self, F> where\nSelf: Clone, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31681,"byte_end":31753,"line_start":957,"line_end":957,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31758,"byte_end":31832,"line_start":958,"line_end":958,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31837,"byte_end":31840,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31845,"byte_end":31919,"line_start":960,"line_end":960,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31924,"byte_end":31993,"line_start":961,"line_end":961,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":31998,"byte_end":32027,"line_start":962,"line_end":962,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32032,"byte_end":32035,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32040,"byte_end":32047,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32052,"byte_end":32081,"line_start":965,"line_end":965,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32086,"byte_end":32089,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32094,"byte_end":32148,"line_start":967,"line_end":967,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32153,"byte_end":32156,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32161,"byte_end":32227,"line_start":969,"line_end":969,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32232,"byte_end":32284,"line_start":970,"line_end":970,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32289,"byte_end":32328,"line_start":971,"line_end":971,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32333,"byte_end":32380,"line_start":972,"line_end":972,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32385,"byte_end":32388,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32393,"byte_end":32400,"line_start":974,"line_end":974,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33088,"byte_end":33098,"line_start":996,"line_end":996,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"pub fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized +\nIterator<Item = Option<A>>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32608,"byte_end":32681,"line_start":982,"line_end":982,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32686,"byte_end":32746,"line_start":983,"line_end":983,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32751,"byte_end":32754,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32759,"byte_end":32815,"line_start":985,"line_end":985,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32820,"byte_end":32823,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32828,"byte_end":32835,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32840,"byte_end":32869,"line_start":988,"line_end":988,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32874,"byte_end":32877,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32882,"byte_end":32916,"line_start":990,"line_end":990,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32921,"byte_end":32949,"line_start":991,"line_end":991,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":32954,"byte_end":33019,"line_start":992,"line_end":992,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33024,"byte_end":33060,"line_start":993,"line_end":993,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33065,"byte_end":33068,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33073,"byte_end":33080,"line_start":995,"line_end":995,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34529,"byte_end":34547,"line_start":1035,"line_end":1035,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"pub fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33234,"byte_end":33307,"line_start":1002,"line_end":1002,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33312,"byte_end":33342,"line_start":1003,"line_end":1003,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33347,"byte_end":33350,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33355,"byte_end":33430,"line_start":1005,"line_end":1005,"column_start":5,"column_end":80}},{"value":"/ size up to 4.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33435,"byte_end":33452,"line_start":1006,"line_end":1006,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33457,"byte_end":33460,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33465,"byte_end":33472,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33477,"byte_end":33506,"line_start":1009,"line_end":1009,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33511,"byte_end":33514,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33519,"byte_end":33546,"line_start":1011,"line_end":1011,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33551,"byte_end":33598,"line_start":1012,"line_end":1012,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33603,"byte_end":33626,"line_start":1013,"line_end":1013,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33631,"byte_end":33636,"line_start":1014,"line_end":1014,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33641,"byte_end":33713,"line_start":1015,"line_end":1015,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33718,"byte_end":33721,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33726,"byte_end":33771,"line_start":1017,"line_end":1017,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33776,"byte_end":33819,"line_start":1018,"line_end":1018,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33824,"byte_end":33867,"line_start":1019,"line_end":1019,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33872,"byte_end":33915,"line_start":1020,"line_end":1020,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33920,"byte_end":33963,"line_start":1021,"line_end":1021,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":33968,"byte_end":34000,"line_start":1022,"line_end":1022,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34005,"byte_end":34008,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34013,"byte_end":34045,"line_start":1024,"line_end":1024,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34050,"byte_end":34104,"line_start":1025,"line_end":1025,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34109,"byte_end":34191,"line_start":1026,"line_end":1026,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34196,"byte_end":34199,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34204,"byte_end":34249,"line_start":1028,"line_end":1028,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34254,"byte_end":34291,"line_start":1029,"line_end":1029,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34296,"byte_end":34320,"line_start":1030,"line_end":1030,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34325,"byte_end":34328,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34333,"byte_end":34422,"line_start":1032,"line_end":1032,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34427,"byte_end":34509,"line_start":1033,"line_end":1033,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":34514,"byte_end":34521,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36195,"byte_end":36204,"line_start":1085,"line_end":1085,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"pub fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35524,"byte_end":35600,"line_start":1068,"line_end":1068,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35605,"byte_end":35663,"line_start":1069,"line_end":1069,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35668,"byte_end":35671,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35676,"byte_end":35718,"line_start":1071,"line_end":1071,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35723,"byte_end":35726,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35731,"byte_end":35738,"line_start":1073,"line_end":1073,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35743,"byte_end":35772,"line_start":1074,"line_end":1074,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35777,"byte_end":35780,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35785,"byte_end":35828,"line_start":1076,"line_end":1076,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35833,"byte_end":35906,"line_start":1077,"line_end":1077,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35911,"byte_end":35914,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35919,"byte_end":35962,"line_start":1079,"line_end":1079,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":35967,"byte_end":36035,"line_start":1080,"line_end":1080,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36040,"byte_end":36043,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36048,"byte_end":36097,"line_start":1082,"line_end":1082,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36102,"byte_end":36175,"line_start":1083,"line_end":1083,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36180,"byte_end":36187,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36926,"byte_end":36933,"line_start":1108,"line_end":1108,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"pub fn flatten(Self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>\nwhere Self: Sized, Self::Item: IntoIterator","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Flatten an iterator of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[{"value":"/ Flatten an iterator of iterables into a single combined sequence of all","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36383,"byte_end":36458,"line_start":1092,"line_end":1092,"column_start":5,"column_end":80}},{"value":"/ the elements in the iterables.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36463,"byte_end":36497,"line_start":1093,"line_end":1093,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36502,"byte_end":36505,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ This is more or less equivalent to `.flat_map` with an identity","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36510,"byte_end":36577,"line_start":1095,"line_end":1095,"column_start":5,"column_end":72}},{"value":"/ function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36582,"byte_end":36595,"line_start":1096,"line_end":1096,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36600,"byte_end":36603,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ See also the [`flatten`](fn.flatten.html) function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36608,"byte_end":36663,"line_start":1098,"line_end":1098,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36668,"byte_end":36671,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36676,"byte_end":36689,"line_start":1100,"line_end":1100,"column_start":5,"column_end":18}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36694,"byte_end":36723,"line_start":1101,"line_end":1101,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36728,"byte_end":36731,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ let data = vec![vec![1, 2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36736,"byte_end":36786,"line_start":1103,"line_end":1103,"column_start":5,"column_end":55}},{"value":"/ let flattened = data.iter().flatten();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36791,"byte_end":36833,"line_start":1104,"line_end":1104,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36838,"byte_end":36841,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(flattened, &[1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36846,"byte_end":36906,"line_start":1106,"line_end":1106,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":36911,"byte_end":36918,"line_start":1107,"line_end":1107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37858,"byte_end":37871,"line_start":1134,"line_end":1134,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"pub fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37112,"byte_end":37185,"line_start":1115,"line_end":1115,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37190,"byte_end":37251,"line_start":1116,"line_end":1116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37256,"byte_end":37259,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37264,"byte_end":37292,"line_start":1118,"line_end":1118,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](enum.Position.html)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37297,"byte_end":37345,"line_start":1119,"line_end":1119,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37350,"byte_end":37353,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37358,"byte_end":37365,"line_start":1121,"line_end":1121,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37370,"byte_end":37411,"line_start":1122,"line_end":1122,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37416,"byte_end":37419,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37424,"byte_end":37460,"line_start":1124,"line_end":1124,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37465,"byte_end":37496,"line_start":1125,"line_end":1125,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37501,"byte_end":37553,"line_start":1126,"line_end":1126,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37558,"byte_end":37611,"line_start":1127,"line_end":1127,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37616,"byte_end":37669,"line_start":1128,"line_end":1128,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37674,"byte_end":37727,"line_start":1129,"line_end":1129,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37732,"byte_end":37735,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37740,"byte_end":37776,"line_start":1131,"line_end":1131,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37781,"byte_end":37838,"line_start":1132,"line_end":1132,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37843,"byte_end":37850,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38550,"byte_end":38559,"line_start":1153,"line_end":1153,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":37987,"byte_end":38057,"line_start":1140,"line_end":1140,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38062,"byte_end":38129,"line_start":1141,"line_end":1141,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38134,"byte_end":38137,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38142,"byte_end":38225,"line_start":1143,"line_end":1143,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38230,"byte_end":38233,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38238,"byte_end":38245,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38250,"byte_end":38279,"line_start":1146,"line_end":1146,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38284,"byte_end":38287,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38292,"byte_end":38336,"line_start":1148,"line_end":1148,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38341,"byte_end":38423,"line_start":1149,"line_end":1149,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38428,"byte_end":38431,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38436,"byte_end":38530,"line_start":1151,"line_end":1151,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38535,"byte_end":38542,"line_start":1152,"line_end":1152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39112,"byte_end":39118,"line_start":1170,"line_end":1170,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where Self: Sized,\nF: FnMut(&mut Self::Item) -> ()","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies a mutating function","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38738,"byte_end":38801,"line_start":1160,"line_end":1160,"column_start":5,"column_end":68}},{"value":"/ to each element before yielding it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38806,"byte_end":38845,"line_start":1161,"line_end":1161,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38850,"byte_end":38853,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38858,"byte_end":38865,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38870,"byte_end":38899,"line_start":1164,"line_end":1164,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38904,"byte_end":38907,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![3, 2, 1]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38912,"byte_end":38957,"line_start":1166,"line_end":1166,"column_start":5,"column_end":50}},{"value":"/ let it = input.into_iter().update(|mut v| v.push(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":38962,"byte_end":39019,"line_start":1167,"line_end":1167,"column_start":5,"column_end":62}},{"value":"/ itertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39024,"byte_end":39092,"line_start":1168,"line_end":1168,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39097,"byte_end":39104,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39743,"byte_end":39753,"line_start":1191,"line_end":1191,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"pub fn next_tuple<T>(&mut Self) -> Option<T> where Self: Sized + Iterator<Item\n= T::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39311,"byte_end":39385,"line_start":1178,"line_end":1178,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39390,"byte_end":39420,"line_start":1179,"line_end":1179,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39425,"byte_end":39428,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39433,"byte_end":39509,"line_start":1181,"line_end":1181,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39514,"byte_end":39571,"line_start":1182,"line_end":1182,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39576,"byte_end":39579,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39584,"byte_end":39591,"line_start":1184,"line_end":1184,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39596,"byte_end":39625,"line_start":1185,"line_end":1185,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39630,"byte_end":39633,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39638,"byte_end":39662,"line_start":1187,"line_end":1187,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39667,"byte_end":39670,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39675,"byte_end":39723,"line_start":1189,"line_end":1189,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39728,"byte_end":39735,"line_start":1190,"line_end":1190,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40495,"byte_end":40508,"line_start":1216,"line_end":1216,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"pub fn collect_tuple<T>(Self) -> Option<T> where Self: Sized + Iterator<Item =\nT::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Collects all items from the iterator into a tuple of a specific size","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":39936,"byte_end":40008,"line_start":1198,"line_end":1198,"column_start":5,"column_end":77}},{"value":"/ (up to 4).","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40013,"byte_end":40027,"line_start":1199,"line_end":1199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40032,"byte_end":40035,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ If the number of elements inside the iterator is **exactly** equal to","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40040,"byte_end":40113,"line_start":1201,"line_end":1201,"column_start":5,"column_end":78}},{"value":"/ the tuple size, then the tuple is returned inside `Some`, otherwise","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40118,"byte_end":40189,"line_start":1202,"line_end":1202,"column_start":5,"column_end":76}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40194,"byte_end":40217,"line_start":1203,"line_end":1203,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40222,"byte_end":40225,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40230,"byte_end":40237,"line_start":1205,"line_end":1205,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40242,"byte_end":40271,"line_start":1206,"line_end":1206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40276,"byte_end":40279,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ let iter = 1..3;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40284,"byte_end":40304,"line_start":1208,"line_end":1208,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40309,"byte_end":40312,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ if let Some((x, y)) = iter.collect_tuple() {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40317,"byte_end":40365,"line_start":1210,"line_end":1210,"column_start":5,"column_end":53}},{"value":"/     assert_eq!((x, y), (1, 2))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40370,"byte_end":40404,"line_start":1211,"line_end":1211,"column_start":5,"column_end":39}},{"value":"/ } else {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40409,"byte_end":40421,"line_start":1212,"line_end":1212,"column_start":5,"column_end":17}},{"value":"/     panic!(\"Expected two elements\")","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40426,"byte_end":40465,"line_start":1213,"line_end":1213,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40470,"byte_end":40475,"line_start":1214,"line_end":1214,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40480,"byte_end":40487,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41189,"byte_end":41202,"line_start":1240,"line_end":1240,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"pub fn find_position<P>(&mut Self, P) -> Option<(usize, Self::Item)> where\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40841,"byte_end":40917,"line_start":1230,"line_end":1230,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40922,"byte_end":40925,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40930,"byte_end":40992,"line_start":1232,"line_end":1232,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":40997,"byte_end":41000,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41005,"byte_end":41012,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41017,"byte_end":41046,"line_start":1235,"line_end":1235,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41051,"byte_end":41054,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41059,"byte_end":41080,"line_start":1237,"line_end":1237,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41085,"byte_end":41169,"line_start":1238,"line_end":1238,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41174,"byte_end":41181,"line_start":1239,"line_end":1239,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42051,"byte_end":42060,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"pub fn all_equal(&mut Self) -> bool where Self::Item: PartialEq","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41512,"byte_end":41557,"line_start":1253,"line_end":1253,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41562,"byte_end":41565,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41570,"byte_end":41628,"line_start":1255,"line_end":1255,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41633,"byte_end":41636,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41641,"byte_end":41648,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41653,"byte_end":41682,"line_start":1258,"line_end":1258,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41687,"byte_end":41690,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41695,"byte_end":41748,"line_start":1260,"line_end":1260,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41753,"byte_end":41791,"line_start":1261,"line_end":1261,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41796,"byte_end":41839,"line_start":1262,"line_end":1262,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41844,"byte_end":41887,"line_start":1263,"line_end":1263,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41892,"byte_end":41935,"line_start":1264,"line_end":1264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41940,"byte_end":41943,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41948,"byte_end":41984,"line_start":1266,"line_end":1266,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":41989,"byte_end":42031,"line_start":1267,"line_end":1267,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42036,"byte_end":42043,"line_start":1268,"line_end":1268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42740,"byte_end":42748,"line_start":1290,"line_end":1290,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"pub fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42172,"byte_end":42233,"line_start":1275,"line_end":1275,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42238,"byte_end":42277,"line_start":1276,"line_end":1276,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42282,"byte_end":42285,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42290,"byte_end":42355,"line_start":1278,"line_end":1278,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42360,"byte_end":42392,"line_start":1279,"line_end":1279,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42397,"byte_end":42400,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42405,"byte_end":42412,"line_start":1281,"line_end":1281,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42417,"byte_end":42446,"line_start":1282,"line_end":1282,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42451,"byte_end":42454,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42459,"byte_end":42507,"line_start":1284,"line_end":1284,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42512,"byte_end":42560,"line_start":1285,"line_end":1285,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42565,"byte_end":42572,"line_start":1286,"line_end":1286,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42577,"byte_end":42580,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42585,"byte_end":42645,"line_start":1288,"line_end":1288,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42650,"byte_end":42732,"line_start":1289,"line_end":1289,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43441,"byte_end":43454,"line_start":1314,"line_end":1314,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"pub fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42891,"byte_end":42951,"line_start":1299,"line_end":1299,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":42956,"byte_end":42995,"line_start":1300,"line_end":1300,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43000,"byte_end":43003,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43008,"byte_end":43071,"line_start":1302,"line_end":1302,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43076,"byte_end":43115,"line_start":1303,"line_end":1303,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43120,"byte_end":43123,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43128,"byte_end":43202,"line_start":1305,"line_end":1305,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43207,"byte_end":43239,"line_start":1306,"line_end":1306,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43244,"byte_end":43247,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43252,"byte_end":43259,"line_start":1308,"line_end":1308,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43264,"byte_end":43293,"line_start":1309,"line_end":1309,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43298,"byte_end":43301,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43306,"byte_end":43367,"line_start":1311,"line_end":1311,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43372,"byte_end":43421,"line_start":1312,"line_end":1312,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43426,"byte_end":43433,"line_start":1313,"line_end":1313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44177,"byte_end":44184,"line_start":1341,"line_end":1341,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"pub fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43651,"byte_end":43715,"line_start":1324,"line_end":1324,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43720,"byte_end":43723,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43728,"byte_end":43768,"line_start":1326,"line_end":1326,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43773,"byte_end":43776,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43781,"byte_end":43788,"line_start":1328,"line_end":1328,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43793,"byte_end":43826,"line_start":1329,"line_end":1329,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43831,"byte_end":43860,"line_start":1330,"line_end":1330,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43865,"byte_end":43868,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43873,"byte_end":43902,"line_start":1332,"line_end":1332,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43907,"byte_end":43910,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43915,"byte_end":43984,"line_start":1334,"line_end":1334,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":43989,"byte_end":44058,"line_start":1335,"line_end":1335,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44063,"byte_end":44066,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44071,"byte_end":44084,"line_start":1337,"line_end":1337,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44089,"byte_end":44092,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44097,"byte_end":44157,"line_start":1339,"line_end":1339,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44162,"byte_end":44169,"line_start":1340,"line_end":1340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44847,"byte_end":44853,"line_start":1361,"line_end":1361,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"pub fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44337,"byte_end":44411,"line_start":1348,"line_end":1348,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44416,"byte_end":44419,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44424,"byte_end":44499,"line_start":1350,"line_end":1350,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44504,"byte_end":44577,"line_start":1351,"line_end":1351,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44582,"byte_end":44608,"line_start":1352,"line_end":1352,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44613,"byte_end":44616,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44621,"byte_end":44632,"line_start":1354,"line_end":1354,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44637,"byte_end":44666,"line_start":1355,"line_end":1355,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44671,"byte_end":44674,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44679,"byte_end":44736,"line_start":1357,"line_end":1357,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44741,"byte_end":44783,"line_start":1358,"line_end":1358,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44788,"byte_end":44827,"line_start":1359,"line_end":1359,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":44832,"byte_end":44839,"line_start":1360,"line_end":1360,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45809,"byte_end":45817,"line_start":1393,"line_end":1393,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"pub fn set_from<'a, A: 'a, J>(&mut Self, J) -> usize where Self: Iterator<Item\n= &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45284,"byte_end":45348,"line_start":1377,"line_end":1377,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45353,"byte_end":45403,"line_start":1378,"line_end":1378,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45408,"byte_end":45411,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45416,"byte_end":45489,"line_start":1380,"line_end":1380,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45494,"byte_end":45554,"line_start":1381,"line_end":1381,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45559,"byte_end":45562,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45567,"byte_end":45609,"line_start":1383,"line_end":1383,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45614,"byte_end":45617,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45622,"byte_end":45629,"line_start":1385,"line_end":1385,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45634,"byte_end":45663,"line_start":1386,"line_end":1386,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45668,"byte_end":45671,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45676,"byte_end":45700,"line_start":1388,"line_end":1388,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45705,"byte_end":45737,"line_start":1389,"line_end":1389,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45742,"byte_end":45775,"line_start":1390,"line_end":1390,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45780,"byte_end":45787,"line_start":1391,"line_end":1391,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":45792,"byte_end":45801,"line_start":1392,"line_end":1392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47693,"byte_end":47699,"line_start":1453,"line_end":1453,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"pub fn format(Self, &str) -> Format<, Self> where Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47205,"byte_end":47258,"line_start":1438,"line_end":1438,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47263,"byte_end":47266,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47271,"byte_end":47324,"line_start":1440,"line_end":1440,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47329,"byte_end":47374,"line_start":1441,"line_end":1441,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47379,"byte_end":47382,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47387,"byte_end":47454,"line_start":1443,"line_end":1443,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47459,"byte_end":47462,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47467,"byte_end":47474,"line_start":1445,"line_end":1445,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47479,"byte_end":47508,"line_start":1446,"line_end":1446,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47513,"byte_end":47516,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47521,"byte_end":47556,"line_start":1448,"line_end":1448,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47561,"byte_end":47576,"line_start":1449,"line_end":1449,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47581,"byte_end":47632,"line_start":1450,"line_end":1450,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47637,"byte_end":47673,"line_start":1451,"line_end":1451,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47678,"byte_end":47685,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49177,"byte_end":49188,"line_start":1491,"line_end":1491,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"pub fn format_with<F>(Self, &str, F) -> FormatWith<, Self, F> where\nSelf: Sized, F: FnMut(Self::Item, &mut FnMut(&fmt::Display) -> fmt::Result) ->\nfmt::Result","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47823,"byte_end":47876,"line_start":1459,"line_end":1459,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47881,"byte_end":47884,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of `.format()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47889,"byte_end":47939,"line_start":1461,"line_end":1461,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47944,"byte_end":47947,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":47952,"byte_end":48022,"line_start":1463,"line_end":1463,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48027,"byte_end":48090,"line_start":1464,"line_end":1464,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48095,"byte_end":48170,"line_start":1465,"line_end":1465,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48175,"byte_end":48178,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48183,"byte_end":48255,"line_start":1467,"line_end":1467,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48260,"byte_end":48336,"line_start":1468,"line_end":1468,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48341,"byte_end":48344,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48349,"byte_end":48416,"line_start":1470,"line_end":1470,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48421,"byte_end":48424,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48429,"byte_end":48436,"line_start":1472,"line_end":1472,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48441,"byte_end":48470,"line_start":1473,"line_end":1473,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48475,"byte_end":48478,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48483,"byte_end":48518,"line_start":1475,"line_end":1475,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48523,"byte_end":48619,"line_start":1476,"line_end":1476,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48624,"byte_end":48669,"line_start":1477,"line_end":1477,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48674,"byte_end":48710,"line_start":1478,"line_end":1478,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48715,"byte_end":48718,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48723,"byte_end":48770,"line_start":1480,"line_end":1480,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48775,"byte_end":48806,"line_start":1481,"line_end":1481,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48811,"byte_end":48843,"line_start":1482,"line_end":1482,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48848,"byte_end":48917,"line_start":1483,"line_end":1483,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":48922,"byte_end":49008,"line_start":1484,"line_end":1484,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49013,"byte_end":49049,"line_start":1485,"line_end":1485,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49054,"byte_end":49101,"line_start":1486,"line_end":1486,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49106,"byte_end":49141,"line_start":1487,"line_end":1487,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49146,"byte_end":49149,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49154,"byte_end":49157,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49162,"byte_end":49169,"line_start":1490,"line_end":1490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50909,"byte_end":50921,"line_start":1540,"line_end":1540,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"pub fn fold_results<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49426,"byte_end":49468,"line_start":1498,"line_end":1498,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49473,"byte_end":49476,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49481,"byte_end":49552,"line_start":1500,"line_end":1500,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49557,"byte_end":49627,"line_start":1501,"line_end":1501,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49632,"byte_end":49709,"line_start":1502,"line_end":1502,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49714,"byte_end":49749,"line_start":1503,"line_end":1503,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49754,"byte_end":49757,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49762,"byte_end":49819,"line_start":1505,"line_end":1505,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49824,"byte_end":49902,"line_start":1506,"line_end":1506,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49907,"byte_end":49991,"line_start":1507,"line_end":1507,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":49996,"byte_end":49999,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50004,"byte_end":50071,"line_start":1509,"line_end":1509,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50076,"byte_end":50102,"line_start":1510,"line_end":1510,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50107,"byte_end":50110,"line_start":1511,"line_end":1511,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50115,"byte_end":50128,"line_start":1512,"line_end":1512,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50133,"byte_end":50159,"line_start":1513,"line_end":1513,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50164,"byte_end":50188,"line_start":1514,"line_end":1514,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50193,"byte_end":50217,"line_start":1515,"line_end":1515,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50222,"byte_end":50246,"line_start":1516,"line_end":1516,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50251,"byte_end":50258,"line_start":1517,"line_end":1517,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50263,"byte_end":50266,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50271,"byte_end":50337,"line_start":1519,"line_end":1519,"column_start":5,"column_end":71}},{"value":"/ this effetively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50342,"byte_end":50392,"line_start":1520,"line_end":1520,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50397,"byte_end":50400,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50405,"byte_end":50412,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50417,"byte_end":50439,"line_start":1523,"line_end":1523,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50444,"byte_end":50473,"line_start":1524,"line_end":1524,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50478,"byte_end":50481,"line_start":1525,"line_end":1525,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50486,"byte_end":50524,"line_start":1526,"line_end":1526,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50529,"byte_end":50544,"line_start":1527,"line_end":1527,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50549,"byte_end":50570,"line_start":1528,"line_end":1528,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50575,"byte_end":50606,"line_start":1529,"line_end":1529,"column_start":5,"column_end":36}},{"value":"/           .fold_results(0, Add::add),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50611,"byte_end":50652,"line_start":1530,"line_end":1530,"column_start":5,"column_end":46}},{"value":"/     Ok(3)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50657,"byte_end":50670,"line_start":1531,"line_end":1531,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50675,"byte_end":50681,"line_start":1532,"line_end":1532,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50686,"byte_end":50698,"line_start":1533,"line_end":1533,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50703,"byte_end":50724,"line_start":1534,"line_end":1534,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50729,"byte_end":50805,"line_start":1535,"line_end":1535,"column_start":5,"column_end":81}},{"value":"/           .fold_results(0, Add::add)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50810,"byte_end":50850,"line_start":1536,"line_end":1536,"column_start":5,"column_end":45}},{"value":"/           .is_err()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50855,"byte_end":50878,"line_start":1537,"line_end":1537,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50883,"byte_end":50889,"line_start":1538,"line_end":1538,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":50894,"byte_end":50901,"line_start":1539,"line_end":1539,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52078,"byte_end":52090,"line_start":1572,"line_end":1572,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"pub fn fold_options<A, B, F>(&mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51266,"byte_end":51308,"line_start":1553,"line_end":1553,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51313,"byte_end":51316,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51321,"byte_end":51395,"line_start":1555,"line_end":1555,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51400,"byte_end":51472,"line_start":1556,"line_end":1556,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51477,"byte_end":51552,"line_start":1557,"line_end":1557,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51557,"byte_end":51560,"line_start":1558,"line_end":1558,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to `fold_results`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51565,"byte_end":51619,"line_start":1559,"line_end":1559,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51624,"byte_end":51627,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51632,"byte_end":51639,"line_start":1561,"line_end":1561,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51644,"byte_end":51666,"line_start":1562,"line_end":1562,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51671,"byte_end":51700,"line_start":1563,"line_end":1563,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51705,"byte_end":51708,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51713,"byte_end":51779,"line_start":1565,"line_end":1565,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51784,"byte_end":51854,"line_start":1566,"line_end":1566,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51859,"byte_end":51862,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51867,"byte_end":51934,"line_start":1568,"line_end":1568,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":51939,"byte_end":52000,"line_start":1569,"line_end":1569,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52005,"byte_end":52058,"line_start":1570,"line_end":1570,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52063,"byte_end":52070,"line_start":1571,"line_end":1571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52890,"byte_end":52895,"line_start":1597,"line_end":1597,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"pub fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52426,"byte_end":52474,"line_start":1585,"line_end":1585,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52479,"byte_end":52482,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52487,"byte_end":52546,"line_start":1587,"line_end":1587,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52551,"byte_end":52610,"line_start":1588,"line_end":1588,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52615,"byte_end":52688,"line_start":1589,"line_end":1589,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52693,"byte_end":52696,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52701,"byte_end":52708,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52713,"byte_end":52742,"line_start":1592,"line_end":1592,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52747,"byte_end":52750,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52755,"byte_end":52816,"line_start":1594,"line_end":1594,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52821,"byte_end":52870,"line_start":1595,"line_end":1595,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":52875,"byte_end":52882,"line_start":1596,"line_end":1596,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54959,"byte_end":54969,"line_start":1653,"line_end":1653,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"pub fn tree_fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[{"value":"/ Accumulate the elements in the iterator in a tree-like manner.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53093,"byte_end":53159,"line_start":1604,"line_end":1604,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53164,"byte_end":53167,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ You can think of it as, while there's more than one item, repeatedly","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53172,"byte_end":53244,"line_start":1606,"line_end":1606,"column_start":5,"column_end":77}},{"value":"/ combining adjacent items.  It does so in bottom-up-merge-sort order,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53249,"byte_end":53321,"line_start":1607,"line_end":1607,"column_start":5,"column_end":77}},{"value":"/ however, so that it needs only logarithmic stack space.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53326,"byte_end":53385,"line_start":1608,"line_end":1608,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53390,"byte_end":53393,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ This produces a call tree like the following (where the calls under","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53398,"byte_end":53469,"line_start":1610,"line_end":1610,"column_start":5,"column_end":76}},{"value":"/ an item are done after reading that item):","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53474,"byte_end":53520,"line_start":1611,"line_end":1611,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53525,"byte_end":53528,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53533,"byte_end":53544,"line_start":1613,"line_end":1613,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53549,"byte_end":53566,"line_start":1614,"line_end":1614,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53571,"byte_end":53602,"line_start":1615,"line_end":1615,"column_start":5,"column_end":22}},{"value":"/ └─f └─f └─f │","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53607,"byte_end":53638,"line_start":1616,"line_end":1616,"column_start":5,"column_end":22}},{"value":"/   │   │   │ │","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53643,"byte_end":53668,"line_start":1617,"line_end":1617,"column_start":5,"column_end":22}},{"value":"/   └───f   └─f","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53673,"byte_end":53702,"line_start":1618,"line_end":1618,"column_start":5,"column_end":22}},{"value":"/       │     │","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53707,"byte_end":53728,"line_start":1619,"line_end":1619,"column_start":5,"column_end":22}},{"value":"/       └─────f","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53733,"byte_end":53762,"line_start":1620,"line_end":1620,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53767,"byte_end":53774,"line_start":1621,"line_end":1621,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53779,"byte_end":53782,"line_start":1622,"line_end":1622,"column_start":5,"column_end":8}},{"value":"/ Which, for non-associative functions, will typically produce a different","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53787,"byte_end":53863,"line_start":1623,"line_end":1623,"column_start":5,"column_end":81}},{"value":"/ result than the linear call tree used by `fold1`:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53868,"byte_end":53921,"line_start":1624,"line_end":1624,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53926,"byte_end":53929,"line_start":1625,"line_end":1625,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53934,"byte_end":53945,"line_start":1626,"line_end":1626,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53950,"byte_end":53967,"line_start":1627,"line_end":1627,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":53972,"byte_end":54003,"line_start":1628,"line_end":1628,"column_start":5,"column_end":22}},{"value":"/ └─f─f─f─f─f─f","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54008,"byte_end":54039,"line_start":1629,"line_end":1629,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54044,"byte_end":54051,"line_start":1630,"line_end":1630,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54056,"byte_end":54059,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ If `f` is associative, prefer the normal `fold1` instead.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54064,"byte_end":54125,"line_start":1632,"line_end":1632,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54130,"byte_end":54133,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54138,"byte_end":54145,"line_start":1634,"line_end":1634,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54150,"byte_end":54179,"line_start":1635,"line_end":1635,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54184,"byte_end":54187,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ // The same tree as above","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54192,"byte_end":54221,"line_start":1637,"line_end":1637,"column_start":5,"column_end":34}},{"value":"/ let num_strings = (1..8).map(|x| x.to_string());","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54226,"byte_end":54278,"line_start":1638,"line_end":1638,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54283,"byte_end":54356,"line_start":1639,"line_end":1639,"column_start":5,"column_end":78}},{"value":"/     Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54361,"byte_end":54430,"line_start":1640,"line_end":1640,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54435,"byte_end":54438,"line_start":1641,"line_end":1641,"column_start":5,"column_end":8}},{"value":"/ // Like fold1, an empty iterator produces None","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54443,"byte_end":54493,"line_start":1642,"line_end":1642,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((0..0).tree_fold1(|x, y| x * y), None);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54498,"byte_end":54552,"line_start":1643,"line_end":1643,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54557,"byte_end":54560,"line_start":1644,"line_end":1644,"column_start":5,"column_end":8}},{"value":"/ // tree_fold1 matches fold1 for associative operations...","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54565,"byte_end":54626,"line_start":1645,"line_end":1645,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..10).tree_fold1(|x, y| x + y),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54631,"byte_end":54679,"line_start":1646,"line_end":1646,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x + y));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54684,"byte_end":54721,"line_start":1647,"line_end":1647,"column_start":5,"column_end":42}},{"value":"/ // ...but not for non-associative ones","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54726,"byte_end":54768,"line_start":1648,"line_end":1648,"column_start":5,"column_end":47}},{"value":"/ assert!((0..10).tree_fold1(|x, y| x - y)","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54773,"byte_end":54817,"line_start":1649,"line_end":1649,"column_start":5,"column_end":49}},{"value":"/     != (0..10).fold1(|x, y| x - y));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54822,"byte_end":54862,"line_start":1650,"line_end":1650,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":54867,"byte_end":54874,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58465,"byte_end":58475,"line_start":1751,"line_end":1751,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"pub fn fold_while<B, F>(&mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57149,"byte_end":57229,"line_start":1712,"line_end":1712,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57234,"byte_end":57237,"line_start":1713,"line_end":1713,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to `fold()` but with additional support for","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57242,"byte_end":57328,"line_start":1714,"line_end":1714,"column_start":5,"column_end":91}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57333,"byte_end":57369,"line_start":1715,"line_end":1715,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57374,"byte_end":57377,"line_start":1716,"line_end":1716,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57382,"byte_end":57389,"line_start":1717,"line_end":1717,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57394,"byte_end":57423,"line_start":1718,"line_end":1718,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57428,"byte_end":57475,"line_start":1719,"line_end":1719,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57480,"byte_end":57483,"line_start":1720,"line_end":1720,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57488,"byte_end":57538,"line_start":1721,"line_end":1721,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57543,"byte_end":57546,"line_start":1722,"line_end":1722,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57551,"byte_end":57574,"line_start":1723,"line_end":1723,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57579,"byte_end":57582,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57587,"byte_end":57603,"line_start":1725,"line_end":1725,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57608,"byte_end":57631,"line_start":1726,"line_end":1726,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57636,"byte_end":57655,"line_start":1727,"line_end":1727,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57660,"byte_end":57678,"line_start":1728,"line_end":1728,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57683,"byte_end":57692,"line_start":1729,"line_end":1729,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57697,"byte_end":57725,"line_start":1730,"line_end":1730,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57730,"byte_end":57735,"line_start":1731,"line_end":1731,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57740,"byte_end":57743,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57748,"byte_end":57760,"line_start":1733,"line_end":1733,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57765,"byte_end":57816,"line_start":1734,"line_end":1734,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57821,"byte_end":57863,"line_start":1735,"line_end":1735,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57868,"byte_end":57875,"line_start":1736,"line_end":1736,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57880,"byte_end":57883,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57888,"byte_end":57906,"line_start":1738,"line_end":1738,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57911,"byte_end":57968,"line_start":1739,"line_end":1739,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":57973,"byte_end":58031,"line_start":1740,"line_end":1740,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58036,"byte_end":58056,"line_start":1741,"line_end":1741,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58061,"byte_end":58064,"line_start":1742,"line_end":1742,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58069,"byte_end":58092,"line_start":1743,"line_end":1743,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58097,"byte_end":58129,"line_start":1744,"line_end":1744,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58134,"byte_end":58167,"line_start":1745,"line_end":1745,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58172,"byte_end":58179,"line_start":1746,"line_end":1746,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58184,"byte_end":58187,"line_start":1747,"line_end":1747,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58192,"byte_end":58280,"line_start":1748,"line_end":1748,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58285,"byte_end":58364,"line_start":1749,"line_end":1749,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":58369,"byte_end":58457,"line_start":1750,"line_end":1750,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62269,"byte_end":62282,"line_start":1870,"line_end":1870,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"pub fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: Fn(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61560,"byte_end":61609,"line_start":1849,"line_end":1849,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike `Iterator::partition`, each partition may","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61614,"byte_end":61678,"line_start":1850,"line_end":1850,"column_start":5,"column_end":69}},{"value":"/ have a distinct type.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61683,"byte_end":61708,"line_start":1851,"line_end":1851,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61713,"byte_end":61716,"line_start":1852,"line_end":1852,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61721,"byte_end":61728,"line_start":1853,"line_end":1853,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61733,"byte_end":61772,"line_start":1854,"line_end":1854,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61777,"byte_end":61780,"line_start":1855,"line_end":1855,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61785,"byte_end":61860,"line_start":1856,"line_end":1856,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61865,"byte_end":61868,"line_start":1857,"line_end":1857,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61873,"byte_end":61945,"line_start":1858,"line_end":1858,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61950,"byte_end":61970,"line_start":1859,"line_end":1859,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":61975,"byte_end":62003,"line_start":1860,"line_end":1860,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62008,"byte_end":62029,"line_start":1861,"line_end":1861,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62034,"byte_end":62075,"line_start":1862,"line_end":1862,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62080,"byte_end":62123,"line_start":1863,"line_end":1863,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62128,"byte_end":62141,"line_start":1864,"line_end":1864,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62146,"byte_end":62157,"line_start":1865,"line_end":1865,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62162,"byte_end":62165,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62170,"byte_end":62204,"line_start":1867,"line_end":1867,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62209,"byte_end":62249,"line_start":1868,"line_end":1868,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":62254,"byte_end":62261,"line_start":1869,"line_end":1869,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64869,"byte_end":64875,"line_start":1946,"line_end":1946,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"pub fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63577,"byte_end":63637,"line_start":1911,"line_end":1911,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63642,"byte_end":63645,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63650,"byte_end":63714,"line_start":1913,"line_end":1913,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63719,"byte_end":63722,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63727,"byte_end":63771,"line_start":1915,"line_end":1915,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63776,"byte_end":63838,"line_start":1916,"line_end":1916,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63843,"byte_end":63906,"line_start":1917,"line_end":1917,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63911,"byte_end":63972,"line_start":1918,"line_end":1918,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":63977,"byte_end":64035,"line_start":1919,"line_end":1919,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64040,"byte_end":64043,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64048,"byte_end":64118,"line_start":1921,"line_end":1921,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64123,"byte_end":64194,"line_start":1922,"line_end":1922,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64199,"byte_end":64223,"line_start":1923,"line_end":1923,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64228,"byte_end":64231,"line_start":1924,"line_end":1924,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64236,"byte_end":64250,"line_start":1925,"line_end":1925,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64255,"byte_end":64258,"line_start":1926,"line_end":1926,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64263,"byte_end":64270,"line_start":1927,"line_end":1927,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64275,"byte_end":64304,"line_start":1928,"line_end":1928,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64309,"byte_end":64375,"line_start":1929,"line_end":1929,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64380,"byte_end":64383,"line_start":1930,"line_end":1930,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64388,"byte_end":64413,"line_start":1931,"line_end":1931,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64418,"byte_end":64464,"line_start":1932,"line_end":1932,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64469,"byte_end":64472,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64477,"byte_end":64493,"line_start":1934,"line_end":1934,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64498,"byte_end":64548,"line_start":1935,"line_end":1935,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64553,"byte_end":64556,"line_start":1936,"line_end":1936,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64561,"byte_end":64589,"line_start":1937,"line_end":1937,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64594,"byte_end":64644,"line_start":1938,"line_end":1938,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64649,"byte_end":64652,"line_start":1939,"line_end":1939,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64657,"byte_end":64682,"line_start":1940,"line_end":1940,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64687,"byte_end":64737,"line_start":1941,"line_end":1941,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64742,"byte_end":64749,"line_start":1942,"line_end":1942,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64754,"byte_end":64757,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64762,"byte_end":64831,"line_start":1944,"line_end":1944,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":64836,"byte_end":64861,"line_start":1945,"line_end":1945,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65571,"byte_end":65584,"line_start":1963,"line_end":1963,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"pub fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65039,"byte_end":65114,"line_start":1952,"line_end":1952,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65119,"byte_end":65146,"line_start":1953,"line_end":1953,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65151,"byte_end":65154,"line_start":1954,"line_end":1954,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65159,"byte_end":65231,"line_start":1955,"line_end":1955,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65236,"byte_end":65239,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65244,"byte_end":65321,"line_start":1957,"line_end":1957,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65326,"byte_end":65403,"line_start":1958,"line_end":1958,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65408,"byte_end":65460,"line_start":1959,"line_end":1959,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65465,"byte_end":65468,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65473,"byte_end":65538,"line_start":1961,"line_end":1961,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65543,"byte_end":65563,"line_start":1962,"line_end":1962,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66222,"byte_end":66231,"line_start":1977,"line_end":1977,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65782,"byte_end":65857,"line_start":1969,"line_end":1969,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65862,"byte_end":65900,"line_start":1970,"line_end":1970,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65905,"byte_end":65908,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65913,"byte_end":65985,"line_start":1972,"line_end":1972,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65990,"byte_end":65993,"line_start":1973,"line_end":1973,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":65998,"byte_end":66075,"line_start":1974,"line_end":1974,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66080,"byte_end":66157,"line_start":1975,"line_end":1975,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66162,"byte_end":66214,"line_start":1976,"line_end":1976,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":937},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66960,"byte_end":66965,"line_start":2001,"line_end":2001,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"pub fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterables produce equal sequences","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66563,"byte_end":66622,"line_start":1990,"line_end":1990,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66623,"byte_end":66686,"line_start":1991,"line_end":1991,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66687,"byte_end":66709,"line_start":1992,"line_end":1992,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66710,"byte_end":66713,"line_start":1993,"line_end":1993,"column_start":1,"column_end":4}},{"value":"/ This is an `IntoIterator` enabled function that is similar to the standard","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66714,"byte_end":66792,"line_start":1994,"line_end":1994,"column_start":1,"column_end":79}},{"value":"/ library method `Iterator::eq`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66793,"byte_end":66827,"line_start":1995,"line_end":1995,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66828,"byte_end":66831,"line_start":1996,"line_end":1996,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66832,"byte_end":66839,"line_start":1997,"line_end":1997,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66840,"byte_end":66891,"line_start":1998,"line_end":1998,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66892,"byte_end":66944,"line_start":1999,"line_end":1999,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66945,"byte_end":66952,"line_start":2000,"line_end":2000,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":940},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67785,"byte_end":67797,"line_start":2029,"line_end":2029,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"pub fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[{"value":"/ Assert that two iterables produce equal sequences, with the same","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67403,"byte_end":67471,"line_start":2019,"line_end":2019,"column_start":1,"column_end":69}},{"value":"/ semantics as *equal(a, b)*.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67472,"byte_end":67503,"line_start":2020,"line_end":2020,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67504,"byte_end":67507,"line_start":2021,"line_end":2021,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67508,"byte_end":67573,"line_start":2022,"line_end":2022,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67574,"byte_end":67601,"line_start":2023,"line_end":2023,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67602,"byte_end":67605,"line_start":2024,"line_end":2024,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67606,"byte_end":67619,"line_start":2025,"line_end":2025,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67620,"byte_end":67679,"line_start":2026,"line_end":2026,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67680,"byte_end":67769,"line_start":2027,"line_end":2027,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":67770,"byte_end":67777,"line_start":2028,"line_end":2028,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":943},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69024,"byte_end":69033,"line_start":2071,"line_end":2071,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"pub fn partition<'a, A: 'a, I, F>(I, F) -> usize where I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68485,"byte_end":68549,"line_start":2054,"line_end":2054,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68550,"byte_end":68621,"line_start":2055,"line_end":2055,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68622,"byte_end":68625,"line_start":2056,"line_end":2056,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68626,"byte_end":68675,"line_start":2057,"line_end":2057,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68676,"byte_end":68679,"line_start":2058,"line_end":2058,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68680,"byte_end":68720,"line_start":2059,"line_end":2059,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68721,"byte_end":68724,"line_start":2060,"line_end":2060,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68725,"byte_end":68732,"line_start":2061,"line_end":2061,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68733,"byte_end":68762,"line_start":2062,"line_end":2062,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68763,"byte_end":68766,"line_start":2063,"line_end":2063,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68767,"byte_end":68824,"line_start":2064,"line_end":2064,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68825,"byte_end":68866,"line_start":2065,"line_end":2065,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68867,"byte_end":68927,"line_start":2066,"line_end":2066,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68928,"byte_end":68931,"line_start":2067,"line_end":2067,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68932,"byte_end":68976,"line_start":2068,"line_end":2068,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":68977,"byte_end":69008,"line_start":2069,"line_end":2069,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69009,"byte_end":69016,"line_start":2070,"line_end":2070,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69969,"byte_end":69977,"line_start":2101,"line_end":2101,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69928,"byte_end":69964,"line_start":2100,"line_end":2100,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1812},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70038,"byte_end":70042,"line_start":2103,"line_end":2103,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69986,"byte_end":70033,"line_start":2102,"line_end":2102,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69909,"byte_end":69918,"line_start":2099,"line_end":2099,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"pub enum FoldWhile<T> {\n\n    /// Continue folding with this value\n    Continue(T),\n\n    /// Fold is complete and will return this value\n    Done(T),\n}","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1812}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `.fold_while()`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69696,"byte_end":69762,"line_start":2095,"line_end":2095,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69763,"byte_end":69766,"line_start":2096,"line_end":2096,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](trait.Itertools.html#method.fold_while) for more information.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":69767,"byte_end":69854,"line_start":2097,"line_end":2097,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70134,"byte_end":70144,"line_start":2108,"line_end":2108,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70077,"byte_end":70122,"line_start":2107,"line_end":2107,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70337,"byte_end":70344,"line_start":2115,"line_end":2115,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70262,"byte_end":70325,"line_start":2114,"line_end":2114,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72551,"byte_end":72561,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73972,"byte_end":73990,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76240,"byte_end":76247,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76866,"byte_end":76873,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78720,"byte_end":78727,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81160,"byte_end":81168,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81396,"byte_end":81404,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":82444,"byte_end":82448,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83046,"byte_end":83050,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83266,"byte_end":83275,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83507,"byte_end":83516,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85019,"byte_end":85024,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85261,"byte_end":85266,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86072,"byte_end":86077,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86915,"byte_end":86922,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":87447,"byte_end":87454,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":87722,"byte_end":87729,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":88189,"byte_end":88201,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89435,"byte_end":89443,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89612,"byte_end":89620,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90007,"byte_end":90015,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90648,"byte_end":90653,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":91017,"byte_end":91022,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":91155,"byte_end":91160,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92369,"byte_end":92381,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92718,"byte_end":92730,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93829,"byte_end":93838,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95147,"byte_end":95164,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95416,"byte_end":95433,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95551,"byte_end":95568,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98929,"byte_end":98936,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100510,"byte_end":100520,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101811,"byte_end":101820,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102309,"byte_end":102318,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":103156,"byte_end":103162,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":104028,"byte_end":104034,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":104140,"byte_end":104146,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111008,"byte_end":111020,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120111,"byte_end":120121,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":124567,"byte_end":124577,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":125326,"byte_end":125332,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":127301,"byte_end":127312,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":129101,"byte_end":129112,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":129337,"byte_end":129348,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131221,"byte_end":131233,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":135418,"byte_end":135426,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":136189,"byte_end":136197,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":136654,"byte_end":136662,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137558,"byte_end":137566,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137886,"byte_end":137893,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":139273,"byte_end":139289,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141570,"byte_end":141584,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144294,"byte_end":144301,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144691,"byte_end":144698,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144848,"byte_end":144855,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147753,"byte_end":147763,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148537,"byte_end":148547,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150216,"byte_end":150222,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150609,"byte_end":150615,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151304,"byte_end":151311,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1515}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151414,"byte_end":151421,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152513,"byte_end":152524,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152697,"byte_end":152708,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153374,"byte_end":153385,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154034,"byte_end":154040,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154252,"byte_end":154258,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":155865,"byte_end":155877,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160351,"byte_end":160359,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160638,"byte_end":160650,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":161886,"byte_end":161898,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162816,"byte_end":162821,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":163399,"byte_end":163404,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":164326,"byte_end":164336,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":164958,"byte_end":164968,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":165789,"byte_end":165799,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66538,"byte_end":66539,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70058,"byte_end":70067,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":3396,"byte_end":3400,"line_start":124,"line_end":124,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":414}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":72551,"byte_end":72561,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":952},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":73972,"byte_end":73990,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":966},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76240,"byte_end":76247,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":980},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":76866,"byte_end":76873,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":980},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":78720,"byte_end":78727,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":990},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81160,"byte_end":81168,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1005},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":81396,"byte_end":81404,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1005},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":82444,"byte_end":82448,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1015},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83046,"byte_end":83050,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1015},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83266,"byte_end":83275,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":83507,"byte_end":83516,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85019,"byte_end":85024,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":85261,"byte_end":85266,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86072,"byte_end":86077,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":86915,"byte_end":86922,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":87447,"byte_end":87454,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":87722,"byte_end":87729,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":88189,"byte_end":88201,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89435,"byte_end":89443,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":223},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":89612,"byte_end":89620,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":223},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90007,"byte_end":90015,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":223},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":90648,"byte_end":90653,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":244},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":91017,"byte_end":91022,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":244},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":91155,"byte_end":91160,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":244},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92369,"byte_end":92381,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":264},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":92718,"byte_end":92730,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":264},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":93829,"byte_end":93838,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1040},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":94708,"byte_end":94713,"line_start":923,"line_end":923,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1945},"to":{"krate":0,"index":292}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95147,"byte_end":95164,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1049},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95416,"byte_end":95433,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1059},"to":{"krate":1,"index":1858}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":95551,"byte_end":95568,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1059},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":98929,"byte_end":98936,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":100510,"byte_end":100520,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":101811,"byte_end":101820,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":355},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":102309,"byte_end":102318,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":355},"to":{"krate":1,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":103156,"byte_end":103162,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":104028,"byte_end":104034,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/adaptors/mod.rs","byte_start":104140,"byte_end":104146,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/either_or_both.rs","byte_start":111008,"byte_end":111020,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/cons_tuples_impl.rs","byte_start":120111,"byte_end":120121,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1339},"to":{"krate":1,"index":1638}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":124567,"byte_end":124577,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":495},"to":{"krate":1,"index":6264}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/format.rs","byte_start":125326,"byte_end":125332,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1347},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/intersperse.rs","byte_start":127301,"byte_end":127312,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1394},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":129101,"byte_end":129112,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/merge_join.rs","byte_start":129337,"byte_end":129348,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/minmax.rs","byte_start":131221,"byte_end":131233,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":135418,"byte_end":135426,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1431},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":136189,"byte_end":136197,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1431},"to":{"krate":1,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/pad_tail.rs","byte_start":136654,"byte_end":136662,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1431},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137244,"byte_end":137252,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4985},"to":{"krate":0,"index":590}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137558,"byte_end":137566,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":1,"index":29565},"to":{"krate":0,"index":590}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":137886,"byte_end":137893,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":980},"to":{"krate":0,"index":590}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/peeking_take_while.rs","byte_start":139273,"byte_end":139289,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/process_results_impl.rs","byte_start":141570,"byte_end":141584,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1477},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144294,"byte_end":144301,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1488},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144691,"byte_end":144698,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1488},"to":{"krate":1,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/repeatn.rs","byte_start":144848,"byte_end":144855,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1488},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":147753,"byte_end":147763,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":148537,"byte_end":148547,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150216,"byte_end":150222,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1497},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":150609,"byte_end":150615,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1497},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151304,"byte_end":151311,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1506},"to":{"krate":1,"index":6259}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/sources.rs","byte_start":151414,"byte_end":151421,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1506},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152513,"byte_end":152524,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":152697,"byte_end":152708,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1516},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":153374,"byte_end":153385,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1516},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154034,"byte_end":154040,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":717},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":154252,"byte_end":154258,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":155865,"byte_end":155877,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1523},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/tuple_impl.rs","byte_start":156403,"byte_end":156408,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1945},"to":{"krate":0,"index":743}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160351,"byte_end":160359,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":160638,"byte_end":160650,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/with_position.rs","byte_start":161886,"byte_end":161898,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":757},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":162816,"byte_end":162821,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1608},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_eq_impl.rs","byte_start":163399,"byte_end":163404,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1608},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":164326,"byte_end":164336,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1621},"to":{"krate":1,"index":4985}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":164958,"byte_end":164968,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1621},"to":{"krate":1,"index":4917}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/zip_longest.rs","byte_start":165789,"byte_end":165799,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1621},"to":{"krate":1,"index":4940}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":8117,"byte_end":8125,"line_start":283,"line_end":283,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":4985},"to":{"krate":0,"index":819}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":66538,"byte_end":66539,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":936},"to":{"krate":0,"index":819}},{"span":{"file_name":"/Users/lmq/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.11/src/lib.rs","byte_start":70058,"byte_end":70067,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1807},"to":{"krate":4294967295,"index":4294967295}}]}